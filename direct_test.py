#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ï–ß–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –í TELEGRAM MINI APP OCR –°–ï–†–í–ò–°–ï
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ backend'–∞
"""

import requests
import json
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DirectTester:
    def __init__(self):
        self.backend_url = "http://localhost:8001"
        self.test_results = []
        
    def log_test_result(self, test_name: str, success: bool, details: str = "", response_data=None):
        """Log test result"""
        status = "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û" if success else "‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–û"
        logger.info(f"{status} - {test_name}: {details}")
        
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "response_data": response_data
        })
    
    def make_request(self, method: str, endpoint: str, **kwargs):
        """Make HTTP request and return success, data, error"""
        try:
            url = f"{self.backend_url}{endpoint}"
            response = requests.request(method, url, timeout=10, **kwargs)
            
            try:
                data = response.json()
            except:
                data = response.text
            
            if response.status_code < 400:
                return True, data, ""
            else:
                return False, data, f"HTTP {response.status_code}"
                
        except Exception as e:
            return False, None, str(e)
    
    def test_critical_ocr_service_fix(self):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 1: Simple Tesseract OCR Service –≤–º–µ—Å—Ç–æ Improved OCR Service"""
        logger.info("=== üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 1: Simple Tesseract OCR Service ===")
        
        success, data, error = self.make_request("GET", "/api/ocr-status")
        
        if success and isinstance(data, dict):
            ocr_service = data.get("ocr_service", {})
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ service_name: "Simple Tesseract OCR Service"
            service_name = ocr_service.get("service_name", "")
            service_name_correct = service_name == "Simple Tesseract OCR Service"
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ optimized_for_speed: true
            optimized_for_speed = ocr_service.get("optimized_for_speed") is True
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ primary_method: "tesseract_ocr"
            primary_method = ocr_service.get("primary_method", "")
            primary_method_correct = primary_method == "tesseract_ocr"
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ tesseract_version: "5.3.0"
            tesseract_version = ocr_service.get("tesseract_version", "")
            tesseract_version_correct = tesseract_version == "5.3.0"
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ tesseract_dependency: true
            tesseract_dependency = ocr_service.get("tesseract_dependency") is True
            
            all_correct = all([
                service_name_correct, optimized_for_speed, primary_method_correct,
                tesseract_version_correct, tesseract_dependency
            ])
            
            self.log_test_result(
                "üéØ –ì–õ–ê–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: Simple Tesseract OCR Service",
                all_correct,
                f"Service: {service_name_correct}, Speed: {optimized_for_speed}, Primary: {primary_method_correct}, Version: {tesseract_version_correct}, Dependency: {tesseract_dependency}",
                {
                    "service_name": service_name,
                    "optimized_for_speed": optimized_for_speed,
                    "primary_method": primary_method,
                    "tesseract_version": tesseract_version,
                    "tesseract_dependency": tesseract_dependency
                }
            )
        else:
            self.log_test_result(
                "üéØ –ì–õ–ê–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: Simple Tesseract OCR Service",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OCR —Å—Ç–∞—Ç—É—Å–∞: {error}",
                data
            )
    
    def test_critical_methods_only(self):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 2: –¢–æ–ª—å–∫–æ tesseract_ocr –∏ direct_pdf –º–µ—Ç–æ–¥—ã"""
        logger.info("=== üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 2: –¢–æ–ª—å–∫–æ tesseract_ocr –∏ direct_pdf –º–µ—Ç–æ–¥—ã ===")
        
        success, data, error = self.make_request("GET", "/api/ocr-status")
        
        if success and isinstance(data, dict):
            ocr_service = data.get("ocr_service", {})
            methods = ocr_service.get("methods", {})
            
            # –û–∂–∏–¥–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã
            expected_methods = {"tesseract_ocr", "direct_pdf"}
            actual_methods = set(methods.keys())
            
            # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            forbidden_methods = {"llm_vision", "ocr_space", "azure_vision"}
            forbidden_found = forbidden_methods.intersection(actual_methods)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            only_expected_methods = actual_methods == expected_methods
            no_forbidden_methods = len(forbidden_found) == 0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤
            tesseract_available = methods.get("tesseract_ocr", {}).get("available") is True
            direct_pdf_available = methods.get("direct_pdf", {}).get("available") is True
            
            all_correct = only_expected_methods and no_forbidden_methods and tesseract_available and direct_pdf_available
            
            self.log_test_result(
                "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –¢–æ–ª—å–∫–æ tesseract_ocr –∏ direct_pdf –º–µ—Ç–æ–¥—ã",
                all_correct,
                f"–û–∂–∏–¥–∞–µ–º—ã–µ: {expected_methods}, –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ: {actual_methods}, –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {forbidden_found}",
                {
                    "expected_methods": list(expected_methods),
                    "actual_methods": list(actual_methods),
                    "forbidden_found": list(forbidden_found),
                    "tesseract_available": tesseract_available,
                    "direct_pdf_available": direct_pdf_available
                }
            )
        else:
            self.log_test_result(
                "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –¢–æ–ª—å–∫–æ tesseract_ocr –∏ direct_pdf –º–µ—Ç–æ–¥—ã",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OCR —Å—Ç–∞—Ç—É—Å–∞: {error}",
                data
            )
    
    def test_telegram_mini_app_compatibility(self):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 3: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram Mini App"""
        logger.info("=== üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 3: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram Mini App ===")
        
        # –¢–µ—Å—Ç 1: Root endpoint –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç telegram_mini_app: true
        success, data, error = self.make_request("GET", "/")
        if success and isinstance(data, dict):
            telegram_flag_root = data.get("telegram_mini_app") is True
            
            self.log_test_result(
                "üéØ Root endpoint - telegram_mini_app: true",
                telegram_flag_root,
                f"Telegram Mini App flag: {data.get('telegram_mini_app')}",
                data
            )
        else:
            self.log_test_result(
                "üéØ Root endpoint - telegram_mini_app: true",
                False,
                f"–û—à–∏–±–∫–∞: {error}",
                data
            )
        
        # –¢–µ—Å—Ç 2: Health endpoint –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç telegram_mini_app: true
        success, data, error = self.make_request("GET", "/health")
        if success and isinstance(data, dict):
            telegram_flag_health = data.get("telegram_mini_app") is True
            is_healthy = data.get("status") == "healthy"
            
            self.log_test_result(
                "üéØ Health endpoint - telegram_mini_app: true",
                telegram_flag_health and is_healthy,
                f"Telegram flag: {telegram_flag_health}, Status: {data.get('status')}",
                data
            )
        else:
            self.log_test_result(
                "üéØ Health endpoint - telegram_mini_app: true",
                False,
                f"–û—à–∏–±–∫–∞: {error}",
                data
            )
    
    def test_tesseract_functionality(self):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 4: Tesseract OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
        logger.info("=== üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 4: Tesseract OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ===")
        
        success, data, error = self.make_request("GET", "/api/ocr-status")
        
        if success and isinstance(data, dict):
            ocr_service = data.get("ocr_service", {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ Tesseract
            tesseract_available = ocr_service.get("tesseract_dependency") is True
            tesseract_version = ocr_service.get("tesseract_version") == "5.3.0"
            production_ready = ocr_service.get("production_ready") is True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
            methods = ocr_service.get("methods", {})
            tesseract_method = methods.get("tesseract_ocr", {})
            tesseract_method_available = tesseract_method.get("available") is True
            
            all_tesseract_working = all([
                tesseract_available, tesseract_version, production_ready, tesseract_method_available
            ])
            
            self.log_test_result(
                "üéØ Tesseract OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                all_tesseract_working,
                f"Available: {tesseract_available}, Version: {tesseract_version}, Production: {production_ready}, Method: {tesseract_method_available}",
                ocr_service
            )
        else:
            self.log_test_result(
                "üéØ Tesseract OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                False,
                f"–û—à–∏–±–∫–∞: {error}",
                data
            )
    
    def test_modern_llm_integration(self):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 5: Modern LLM Integration –¥–æ—Å—Ç—É–ø–µ–Ω"""
        logger.info("=== üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 5: Modern LLM Integration ===")
        
        success, data, error = self.make_request("GET", "/api/modern-llm-status")
        
        if success and isinstance(data, dict):
            modern_flag = data.get("modern") is True
            status_success = data.get("status") == "success"
            has_providers = "providers" in data and len(data.get("providers", {})) > 0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ emergentintegrations –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            emergentintegrations_available = modern_flag and status_success
            
            self.log_test_result(
                "üéØ Modern LLM Integration –¥–æ—Å—Ç—É–ø–µ–Ω",
                emergentintegrations_available and has_providers,
                f"Modern: {modern_flag}, Status: {data.get('status')}, Providers: {len(data.get('providers', {}))}",
                data
            )
        else:
            self.log_test_result(
                "üéØ Modern LLM Integration –¥–æ—Å—Ç—É–ø–µ–Ω",
                False,
                f"–û—à–∏–±–∫–∞: {error}",
                data
            )
    
    def run_critical_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ï–ß–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –í TELEGRAM MINI APP OCR –°–ï–†–í–ò–°–ï")
        logger.info("=" * 100)
        
        try:
            self.test_critical_ocr_service_fix()
            self.test_critical_methods_only()
            self.test_telegram_mini_app_compatibility()
            self.test_tesseract_functionality()
            self.test_modern_llm_integration()
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.log_test_result("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤", False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", None)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.print_critical_summary()
    
    def print_critical_summary(self):
        """–í—ã–≤–æ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        logger.info("=" * 100)
        logger.info("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ï–ß–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        logger.info("=" * 100)
        logger.info(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"‚úÖ –ü—Ä–æ—à–ª–∏: {passed_tests}")
        logger.info(f"‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: {failed_tests}")
        logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        logger.info("=" * 100)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
        logger.info("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
        for result in self.test_results:
            status = "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û" if result["success"] else "‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–û"
            logger.info(f"{status} - {result['test']}")
            if not result["success"]:
                logger.info(f"   –î–µ—Ç–∞–ª–∏: {result['details']}")
        logger.info("=" * 100)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        if passed_tests == total_tests:
            logger.info("üöÄ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
            logger.info("‚úÖ Telegram Mini App —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –±–µ–∑ –≤–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Simple Tesseract OCR Service –∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å")
            logger.info("‚úÖ –£–±—Ä–∞–Ω—ã –≤—Å–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã OCR (llm_vision, ocr_space, azure_vision)")
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (optimized_for_speed: true)")
            logger.info("‚úÖ Tesseract –≤–µ—Ä—Å–∏—è 5.3.0 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ primary_method")
        else:
            logger.info("‚ö†Ô∏è –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –û–°–¢–ê–õ–ò–°–¨ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            logger.info(f"‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {passed_tests}/{total_tests} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
            logger.info("‚ùå Telegram Mini App –º–æ–∂–µ—Ç –≤—Å–µ –µ—â–µ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π")
        
        logger.info("=" * 100)
        
        return success_rate, passed_tests, total_tests

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = DirectTester()
    tester.run_critical_tests()

if __name__ == "__main__":
    main()