import React, { useState, useEffect } from 'react';
import { 
    ArrowLeft,
    Copy,
    FileText,
    Eye,
    CheckCircle,
    AlertTriangle,
    Clock,
    Target,
    Lightbulb,
    Zap,
    Star,
    User,
    Building,
    Calendar,
    Shield,
    Award,
    Crown,
    Sparkles,
    Bot
} from 'lucide-react';

const ImprovedTelegramAnalysisResult = ({ analysisResult, onClose }) => {
    const [animateIn, setAnimateIn] = useState(false);
    const [copiedSection, setCopiedSection] = useState('');
    const [sectionsVisible, setSectionsVisible] = useState({});

    useEffect(() => {
        // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const timer = setTimeout(() => setAnimateIn(true), 200);
        
        // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
        if (animateIn) {
            const sections = parseAnalysisToSections();
            sections.forEach((_, index) => {
                setTimeout(() => {
                    setSectionsVisible(prev => ({
                        ...prev,
                        [index]: true
                    }));
                }, 400 + (index * 150));
            });
        }
        
        return () => clearTimeout(timer);
    }, [animateIn]);

    const copyToClipboard = async (text, section) => {
        try {
            await navigator.clipboard.writeText(text);
            setCopiedSection(section);
            setTimeout(() => setCopiedSection(''), 2000);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        }
    };

    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    const parseAnalysisToSections = () => {
        const analysis = analysisResult?.analysis;
        if (!analysis) return [];

        const sections = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        const fullText = analysis.full_analysis || analysis.main_content || '';
        if (!fullText) return [];

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        const lines = fullText.split('\n').filter(line => line.trim());
        let currentSection = null;
        let currentContent = [];

        lines.forEach((line, index) => {
            const trimmedLine = line.trim();
            if (!trimmedLine) return;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            const isHeader = (
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
                (trimmedLine.includes(':') && trimmedLine.length < 100) ||
                // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                /^(—Ä–µ–∑—é–º–µ|—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ|–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å|—Ç–∏–ø|–∫–ª—é—á–µ–≤–æ–µ|–¥–µ–π—Å—Ç–≤–∏—è|—Å—Ä–æ–∫–∏|–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è|—Å—Ä–æ—á–Ω–æ—Å—Ç—å|–∞–Ω–∞–ª–∏–∑|–æ—Å–Ω–æ–≤–Ω–æ–µ|–≤–∞–∂–Ω–æ|—Ç—Ä–µ–±—É–µ—Ç—Å—è|–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è|–¥–µ—Ç–∞–ª–∏)/i.test(trimmedLine) ||
                // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                /^\d+\./.test(trimmedLine) ||
                // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
                (trimmedLine === trimmedLine.toUpperCase() && trimmedLine.length > 3 && trimmedLine.length < 50)
            ) && !(/^\d{2,}/.test(trimmedLine)); // –ò—Å–∫–ª—é—á–∞–µ–º –¥–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä–∞

            if (isHeader || (currentContent.length === 0 && index === 0)) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
                if (currentSection && currentContent.length > 0) {
                    sections.push({
                        ...currentSection,
                        content: currentContent.join('\n').trim()
                    });
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                const sectionTitle = trimmedLine.replace(/[*#:]/g, '').trim();
                currentSection = {
                    id: `section-${sections.length}`,
                    title: sectionTitle || `–†–∞–∑–¥–µ–ª ${sections.length + 1}`,
                    icon: getIconForSection(sectionTitle),
                    color: getColorForSection(sections.length),
                    importance: getImportanceForSection(sectionTitle)
                };
                currentContent = [];
                
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
                if (index !== 0 && !isHeader) {
                    currentContent.push(trimmedLine);
                }
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
                currentContent.push(trimmedLine);
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if (currentSection && currentContent.length > 0) {
            sections.push({
                ...currentSection,
                content: currentContent.join('\n').trim()
            });
        }

        // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–π –Ω–µ—Ç –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ–∫—Ü–∏—é
        if (sections.length === 0) {
            sections.push({
                id: 'main-analysis',
                title: '–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                content: fullText,
                icon: 'üìã',
                color: 'indigo',
                importance: 'high'
            });
        }

        return sections.filter(section => section.content && section.content.length > 10);
    };

    const getIconForSection = (title) => {
        const titleLower = title.toLowerCase();
        if (titleLower.includes('—Ä–µ–∑—é–º–µ') || titleLower.includes('—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ')) return 'üìã';
        if (titleLower.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å') || titleLower.includes('sender')) return 'üë§';
        if (titleLower.includes('—Ç–∏–ø') || titleLower.includes('type')) return 'üìÑ';
        if (titleLower.includes('–∫–ª—é—á–µ–≤–æ–µ') || titleLower.includes('key') || titleLower.includes('–≤–∞–∂–Ω–æ')) return 'üîë';
        if (titleLower.includes('–¥–µ–π—Å—Ç–≤–∏—è') || titleLower.includes('actions') || titleLower.includes('—Ç—Ä–µ–±—É–µ—Ç—Å—è')) return '‚ö°';
        if (titleLower.includes('—Å—Ä–æ–∫–∏') || titleLower.includes('deadlines') || titleLower.includes('–¥–∞—Ç–∞')) return '‚è∞';
        if (titleLower.includes('–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è') || titleLower.includes('consequences')) return '‚ö†Ô∏è';
        if (titleLower.includes('—Å—Ä–æ—á–Ω–æ—Å—Ç—å') || titleLower.includes('urgency')) return 'üö®';
        if (titleLower.includes('–∞–Ω–∞–ª–∏–∑') || titleLower.includes('–¥–µ—Ç–∞–ª–∏')) return 'üîç';
        if (titleLower.includes('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') || titleLower.includes('–æ—Å–Ω–æ–≤–Ω–æ–µ')) return 'üí°';
        if (titleLower.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || titleLower.includes('–∞–¥—Ä–µ—Å')) return 'üìß';
        return 'üìù';
    };

    const getColorForSection = (index) => {
        const colors = ['blue', 'purple', 'green', 'orange', 'pink', 'teal', 'indigo', 'red'];
        return colors[index % colors.length];
    };

    const getImportanceForSection = (title) => {
        const titleLower = title.toLowerCase();
        if (titleLower.includes('–¥–µ–π—Å—Ç–≤–∏—è') || titleLower.includes('—Å—Ä–æ–∫–∏') || titleLower.includes('—Å—Ä–æ—á–Ω–æ—Å—Ç—å')) return 'critical';
        if (titleLower.includes('–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è') || titleLower.includes('–∫–ª—é—á–µ–≤–æ–µ') || titleLower.includes('–≤–∞–∂–Ω–æ')) return 'high';
        return 'medium';
    };

    const getImportanceConfig = (importance) => {
        switch (importance) {
            case 'critical':
                return {
                    badge: 'bg-red-100 text-red-800',
                    icon: <Zap className="h-4 w-4" />,
                    text: '–ö–†–ò–¢–ò–ß–ù–û'
                };
            case 'high':
                return {
                    badge: 'bg-orange-100 text-orange-800',
                    icon: <Star className="h-4 w-4" />,
                    text: '–í–ê–ñ–ù–û'
                };
            default:
                return null;
        }
    };

    const getColorConfig = (color) => {
        const configs = {
            blue: {
                gradient: 'from-blue-500 to-blue-600',
                bg: 'bg-blue-50',
                border: 'border-blue-200',
                text: 'text-blue-900',
                icon: 'text-blue-600'
            },
            purple: {
                gradient: 'from-purple-500 to-purple-600',
                bg: 'bg-purple-50',
                border: 'border-purple-200',
                text: 'text-purple-900',
                icon: 'text-purple-600'
            },
            green: {
                gradient: 'from-green-500 to-green-600',
                bg: 'bg-green-50',
                border: 'border-green-200',
                text: 'text-green-900',
                icon: 'text-green-600'
            },
            orange: {
                gradient: 'from-orange-500 to-orange-600',
                bg: 'bg-orange-50',
                border: 'border-orange-200',
                text: 'text-orange-900',
                icon: 'text-orange-600'
            },
            pink: {
                gradient: 'from-pink-500 to-pink-600',
                bg: 'bg-pink-50',
                border: 'border-pink-200',
                text: 'text-pink-900',
                icon: 'text-pink-600'
            },
            teal: {
                gradient: 'from-teal-500 to-teal-600',
                bg: 'bg-teal-50',
                border: 'border-teal-200',
                text: 'text-teal-900',
                icon: 'text-teal-600'
            },
            indigo: {
                gradient: 'from-indigo-500 to-indigo-600',
                bg: 'bg-indigo-50',
                border: 'border-indigo-200',
                text: 'text-indigo-900',
                icon: 'text-indigo-600'
            },
            red: {
                gradient: 'from-red-500 to-red-600',
                bg: 'bg-red-50',
                border: 'border-red-200',
                text: 'text-red-900',
                icon: 'text-red-600'
            }
        };
        return configs[color] || configs.blue;
    };

    const sections = parseAnalysisToSections();

    return (
        <div className="fixed inset-0 bg-slate-900 z-50 overflow-hidden">
            <div className="h-full flex flex-col">
                
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω */}
                <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 px-4 py-4 flex-shrink-0">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                            <div className="p-2 bg-white/20 rounded-xl backdrop-blur-sm">
                                <FileText className="h-6 w-6 text-white" />
                            </div>
                            <div>
                                <h2 className="text-xl font-bold text-white">–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h2>
                                <p className="text-white/90 text-sm">AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</p>
                            </div>
                        </div>
                        <button
                            onClick={onClose}
                            className="p-2 hover:bg-white/20 rounded-xl transition-colors"
                        >
                            <ArrowLeft className="h-5 w-5 text-white" />
                        </button>
                    </div>
                </div>

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω */}
                <div className="flex-1 overflow-y-auto bg-gray-50 p-4 space-y-4">
                    
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ */}
                    <div className="bg-white rounded-xl shadow-lg border p-4">
                        <div className="flex items-center space-x-3">
                            <div className="p-2 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg">
                                <FileText className="h-5 w-5 text-white" />
                            </div>
                            <div>
                                <h3 className="text-lg font-bold text-gray-900">
                                    {analysisResult?.file_name || '–î–æ–∫—É–º–µ–Ω—Ç'}
                                </h3>
                                <p className="text-gray-600 text-sm flex items-center space-x-1">
                                    <Bot className="h-4 w-4" />
                                    <span>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI</span>
                                </p>
                            </div>
                        </div>
                    </div>

                    {/* –°–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ */}
                    <div className="space-y-4">
                        {sections.map((section, index) => {
                            const colorConfig = getColorConfig(section.color);
                            const importanceConfig = getImportanceConfig(section.importance);
                            
                            return (
                                <div
                                    key={section.id}
                                    className={`bg-white rounded-xl shadow-lg border-2 ${colorConfig.border} p-4`}
                                >
                                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
                                    <div className="flex items-start justify-between mb-3">
                                        <div className="flex items-center space-x-3 flex-1">
                                            <div className={`p-2 bg-gradient-to-r ${colorConfig.gradient} rounded-lg flex-shrink-0`}>
                                                <span className="text-lg">{section.icon}</span>
                                            </div>
                                            <div className="flex-1 min-w-0">
                                                <h4 className={`text-lg font-bold ${colorConfig.text} mb-1`}>
                                                    {section.title}
                                                </h4>
                                                {importanceConfig && (
                                                    <span className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-bold ${importanceConfig.badge}`}>
                                                        {importanceConfig.icon}
                                                        <span>{importanceConfig.text}</span>
                                                    </span>
                                                )}
                                            </div>
                                        </div>
                                        
                                        <button
                                            onClick={() => copyToClipboard(section.content, section.id)}
                                            className={`p-2 bg-gradient-to-r ${colorConfig.gradient} hover:shadow-lg rounded-lg transition-all flex-shrink-0 ml-2`}
                                        >
                                            <Copy className="h-4 w-4 text-white" />
                                        </button>
                                    </div>
                                    
                                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º */}
                                    <div className={`${colorConfig.bg} rounded-lg p-4 ${colorConfig.border} border`}>
                                        <div className={`${colorConfig.text} leading-relaxed text-base`}>
                                            {section.content.split('\n').map((line, lineIndex) => (
                                                line.trim() && (
                                                    <p key={lineIndex} className="mb-2 text-left">
                                                        {line.trim()}
                                                    </p>
                                                )
                                            ))}
                                        </div>
                                    </div>
                                    
                                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è */}
                                    {copiedSection === section.id && (
                                        <div className="absolute top-2 right-2 bg-green-500 text-white px-3 py-1 rounded-full text-xs font-bold">
                                            ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
                                        </div>
                                    )}
                                </div>
                            );
                        })}
                    </div>

                    {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å */}
                    <div className="bg-gradient-to-r from-indigo-100 to-purple-100 rounded-xl p-4 border-2 border-indigo-200">
                        <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                                <div className="p-2 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-lg">
                                    <Award className="h-5 w-5 text-white" />
                                </div>
                                <div>
                                    <p className="font-bold text-gray-900">–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</p>
                                    <p className="text-gray-600 text-sm">–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</p>
                                </div>
                            </div>
                            
                            <button
                                onClick={onClose}
                                className="px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white rounded-lg transition-all font-bold"
                            >
                                –ì–æ—Ç–æ–≤–æ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ImprovedTelegramAnalysisResult;