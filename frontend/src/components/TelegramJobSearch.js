import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';
import { 
    Briefcase, Search, MapPin, Filter, Bell, Star, 
    Zap, Globe, CheckCircle, AlertCircle, Clock,
    User, FileText, MessageCircle, TrendingUp, 
    Building2, Euro, Languages, Target, ArrowRight,
    BookOpen, Brain, Award, MessageSquare, Sparkles,
    ChevronDown, X
} from 'lucide-react';
import { 
    isTelegramWebApp, 
    hapticFeedback, 
    telegramWebApp,
    showBackButton,
    hideBackButton 
} from '../utils/telegramWebApp';

const TelegramJobSearch = ({ onBack }) => {
    const { user, backendUrl } = useContext(AuthContext);
    const [currentView, setCurrentView] = useState('main'); // main, search, resume-analysis, interview-prep
    const [loading, setLoading] = useState(false);
    const [jobs, setJobs] = useState([]);
    const [subscriptions, setSubscriptions] = useState([]);
    const [searchFilters, setSearchFilters] = useState({
        search_query: '',
        location: '',
        remote: null,
        visa_sponsorship: null,
        language_level: '',
        category: ''
    });
    const [resumeText, setResumeText] = useState('');
    const [targetPosition, setTargetPosition] = useState('');
    const [analysisResult, setAnalysisResult] = useState(null);
    const [interviewType, setInterviewType] = useState('behavioral');
    const [jobDescription, setJobDescription] = useState('');
    const [coachingResult, setCoachingResult] = useState(null);
    
    // City search state
    const [cities, setCities] = useState([]);
    const [showCityDropdown, setShowCityDropdown] = useState(false);
    const [citySearchInput, setCitySearchInput] = useState('');

    const languageLevels = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2'];
    const jobCategories = ['tech', 'marketing', 'finance', 'sales', 'design', 'management', 'healthcare', 'education', 'other'];
    const interviewTypes = {
        'behavioral': '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é',
        'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é',
        'case_study': '–ö–µ–π—Å-–∏–Ω—Ç–µ—Ä–≤—å—é',
        'cultural_fit': '–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
        'phone_screening': '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥',
        'final_round': '–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é'
    };

    useEffect(() => {
        try {
            console.log('TelegramJobSearch mounted');
            console.log('Backend URL:', backendUrl);
            console.log('Is Telegram WebApp:', isTelegramWebApp());
            
            if (isTelegramWebApp()) {
                if (currentView !== 'main') {
                    showBackButton(handleBackClick);
                } else {
                    hideBackButton();
                }
            }
            
            // Load subscriptions if user is authenticated
            if (user) {
                loadSubscriptions();
            }
            
            // Load popular cities
            loadPopularCities();
            
            // Initialize city search input with current location filter
            const currentLocation = searchFilters.location || '';
            if (currentLocation !== citySearchInput) {
                console.log('Initializing city search with:', currentLocation);
                setCitySearchInput(currentLocation);
            }
        } catch (error) {
            console.error('Error in TelegramJobSearch useEffect:', error);
        }
    }, [currentView, user, searchFilters.location]);

    // Search cities when user types
    useEffect(() => {
        const delayDebounce = setTimeout(() => {
            try {
                const input = citySearchInput || '';
                console.log('City search useEffect triggered with input:', input);
                
                if (input.length >= 2) {
                    console.log('Triggering city search for:', input);
                    searchCities(input);
                } else if (input.length === 0) {
                    console.log('Input empty, loading popular cities');
                    loadPopularCities();
                } else {
                    // –ü—Ä–∏ –≤–≤–æ–¥–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
                    console.log('Input too short, loading popular cities');
                    loadPopularCities();
                }
            } catch (error) {
                console.error('Error in city search useEffect:', error);
                setCities([]);
            }
        }, 300);

        return () => clearTimeout(delayDebounce);
    }, [citySearchInput, backendUrl]);

    const handleBackClick = () => {
        if (currentView === 'main') {
            onBack();
        } else {
            setCurrentView('main');
        }
    };

    const loadPopularCities = async () => {
        try {
            const url = `${backendUrl}/api/cities/popular`;
            console.log('Loading popular cities from:', url);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log('Popular cities response:', data);
            
            if (data.status === 'success' && data.data && data.data.cities) {
                setCities(data.data.cities);
                console.log('Popular cities loaded:', data.data.cities.length);
            } else {
                console.warn('Popular cities returned unexpected format:', data);
                setCities([]);
            }
        } catch (error) {
            console.error('Error loading popular cities:', error);
            setCities([]);
        }
    };

    const searchCities = async (query) => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ query - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞—Ä—É–∂—É –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ catch
        const cleanQuery = query ? query.trim() : '';
        let safeQuery = '';
        
        try {
            if (cleanQuery.length < 2) {
                console.log('Query too short, loading popular cities instead');
                loadPopularCities();
                return;
            }
            
            // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            safeQuery = cleanQuery
                .replace(/[^\w\s√§√∂√º√Ñ√ñ√ú√ü\-]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                .substring(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
            if (!safeQuery || safeQuery.length < 2) {
                console.log('Query became invalid after cleaning, loading popular cities');
                loadPopularCities();
                return;
            }
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL
            const encodedQuery = encodeURIComponent(safeQuery);
            const url = `${backendUrl}/api/cities/search?q=${encodedQuery}&limit=10`;
            
            console.log('üèôÔ∏è Cities Search Debug:');
            console.log('Original query:', cleanQuery);
            console.log('Safe query:', safeQuery);
            console.log('Encoded query:', encodedQuery);
            console.log('Cities search URL:', url);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });
            
            console.log('‚úÖ Cities Response Info:');
            console.log('Status:', response.status);
            console.log('OK:', response.ok);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Cities API Error:', {
                    status: response.status,
                    statusText: response.statusText,
                    responseText: errorText
                });
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ Cities search response:', data);
            
            if (data.status === 'success' && data.cities) {
                setCities(data.cities);
                console.log('Cities search result:', data.cities.length, 'cities found');
            } else {
                console.warn('Cities search returned unexpected format:', data);
                setCities([]);
            }
        } catch (error) {
            console.error('‚ùå Cities Search Error:');
            console.error('Error Type:', error.constructor.name);
            console.error('Error Message:', error.message);
            console.error('Error Stack:', error.stack);
            console.error('Cities search error details:', {
                message: error.message,
                stack: error.stack,
                query: cleanQuery,
                safeQuery: safeQuery || 'undefined'
            });
            
            setCities([]);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
            if (error.message && (error.message.includes('NetworkError') || error.message.includes('fetch'))) {
                console.error('üö® NETWORK ERROR IN CITIES SEARCH:', error.message);
                if (isTelegramWebApp()) {
                    telegramWebApp.showAlert(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.`);
                }
            }
        }
    };

    const handleCitySelect = (cityName) => {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
            if (!cityName || typeof cityName !== 'string') {
                console.warn('Invalid city name:', cityName);
                return;
            }
            
            const cleanCityName = cityName.trim();
            if (cleanCityName.length === 0) {
                console.warn('Empty city name after trim');
                return;
            }
            
            console.log('Selecting city:', cleanCityName);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ –æ–±–∞ –º–µ—Å—Ç–∞ - –≤ input –ò –≤ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            setCitySearchInput(cleanCityName);
            setSearchFilters(prev => ({...prev, location: cleanCityName}));
            setShowCityDropdown(false);
            
            if (isTelegramWebApp()) hapticFeedback('light');
        } catch (error) {
            console.error('Error selecting city:', error);
        }
    };

    const loadSubscriptions = async () => {
        try {
            const response = await fetch(`${backendUrl}/api/job-subscriptions`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                setSubscriptions(data.data || []);
            }
        } catch (error) {
            console.error('Error loading subscriptions:', error);
        }
    };

    const searchJobs = async () => {
        setLoading(true);
        if (isTelegramWebApp()) hapticFeedback('light');

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: –≥–æ—Ä–æ–¥ –∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´
            const requiredFields = [];
            
            if (!searchFilters.location || searchFilters.location.trim() === '') {
                requiredFields.push('–ì–æ—Ä–æ–¥');
            }
            
            if (!searchFilters.language_level || searchFilters.language_level.trim() === '') {
                requiredFields.push('–£—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞');
            }
            
            if (requiredFields.length > 0) {
                const errorMessage = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${requiredFields.join(', ')}`;
                
                if (isTelegramWebApp()) {
                    telegramWebApp.showAlert(`‚ùå ${errorMessage}`);
                } else {
                    alert(`‚ùå ${errorMessage}`);
                }
                setLoading(false);
                return;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
            const cleanFilters = {};
            Object.entries(searchFilters).forEach(([key, value]) => {
                if (value !== null && value !== undefined && value !== '') {
                    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    if (typeof value === 'string') {
                        const cleanValue = value.trim();
                        if (cleanValue.length > 0) {
                            cleanFilters[key] = cleanValue;
                        }
                    } else {
                        cleanFilters[key] = value;
                    }
                }
            });

            // –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL —Å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º encoding
            let url = `${backendUrl}/api/job-search`;
            const paramParts = [];
            
            Object.entries(cleanFilters).forEach(([key, value]) => {
                try {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    const safeValue = String(value).replace(/[^\w\s√§√∂√º√Ñ√ñ√ú√ü\-+.,]/g, '');
                    paramParts.push(`${encodeURIComponent(key)}=${encodeURIComponent(safeValue)}`);
                    console.log(`Encoded parameter: ${key} = "${value}" -> "${safeValue}"`);
                } catch (encodeError) {
                    console.warn('Failed to encode parameter:', key, value, encodeError);
                    // Fallback —Å –µ—â–µ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º encoding
                    const safeFallback = String(value).replace(/[^\w\s]/g, '');
                    paramParts.push(`${key}=${safeFallback}`);
                }
            });

            if (paramParts.length > 0) {
                url += '?' + paramParts.join('&');
            }

            console.log('üîç Job Search Debug Info:');
            console.log('Original filters:', searchFilters);
            console.log('Clean filters:', cleanFilters);
            console.log('Backend URL:', backendUrl);
            console.log('Full API URL:', url);
            console.log('Request headers:', {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            });

            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });
            
            console.log('‚úÖ Response Info:');
            console.log('Status:', response.status);
            console.log('Status Text:', response.statusText);
            console.log('OK:', response.ok);
            console.log('Headers:', Object.fromEntries(response.headers.entries()));
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Response Error Details:');
                console.error('Status:', response.status);
                console.error('Status Text:', response.statusText);
                console.error('Response Text:', errorText);
                
                throw new Error(`HTTP ${response.status}: ${response.statusText}${errorText ? ' - ' + errorText : ''}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ Response data:', data);

            if (data.status === 'success') {
                const jobsData = data.jobs || [];  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ jobs
                console.log('Jobs found:', jobsData.length);
                
                setJobs(jobsData);
                const totalFound = data.total_found || jobsData.length;
                if (isTelegramWebApp()) {
                    telegramWebApp.showAlert(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${totalFound} –≤–∞–∫–∞–Ω—Å–∏–π!`);
                } else {
                    alert(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${totalFound} –≤–∞–∫–∞–Ω—Å–∏–π!`);
                }
            } else {
                console.error('API returned non-success status:', data);
                const errorMessage = data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
                if (isTelegramWebApp()) {
                    telegramWebApp.showAlert(`‚ùå ${errorMessage}`);
                } else {
                    alert(`‚ùå ${errorMessage}`);
                }
            }
        } catch (error) {
            console.error('‚ùå Job Search Error:');
            console.error('Error Type:', error.constructor.name);
            console.error('Error Message:', error.message);
            console.error('Error Stack:', error.stack);
            console.error('Full Error Object:', error);
            
            let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã';
            
            if (error.message) {
                if (error.message.includes('NetworkError') || error.message.includes('fetch')) {
                    errorMessage = 'üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
                } else if (error.message.includes('HTTP 400') || error.message.includes('Bad Request')) {
                    errorMessage = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.';
                } else if (error.message.includes('HTTP 500')) {
                    errorMessage = 'üîß –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                } else {
                    // –í–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–Ω–æ —É–±–∏—Ä–∞–µ–º –ª–æ–∂–Ω—ã–µ pattern errors)
                    errorMessage = `üîç ${error.message}`;
                }
            }
            
            console.error('üì¢ User will see:', errorMessage);
            
            if (isTelegramWebApp()) {
                telegramWebApp.showAlert(`‚ùå ${errorMessage}`);
            } else {
                alert(`‚ùå ${errorMessage}`);
            }
        } finally {
            setLoading(false);
        }
    };

    const createSubscription = async () => {
        if (isTelegramWebApp()) hapticFeedback('medium');

        try {
            const response = await fetch(`${backendUrl}/api/job-subscriptions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(searchFilters)
            });

            const data = await response.json();

            if (data.status === 'success') {
                if (isTelegramWebApp()) {
                    telegramWebApp.showAlert('–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ Telegram');
                    hapticFeedback('success');
                }
                loadSubscriptions();
            }
        } catch (error) {
            console.error('Error creating subscription:', error);
            if (isTelegramWebApp()) {
                telegramWebApp.showAlert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏');
            }
        }
    };

    const analyzeResume = async () => {
        if (!resumeText.trim()) {
            if (isTelegramWebApp()) {
                telegramWebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            }
            return;
        }

        setLoading(true);
        if (isTelegramWebApp()) hapticFeedback('medium');

        try {
            const response = await fetch(`${backendUrl}/api/analyze-resume`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({
                    resume_text: resumeText,
                    target_position: targetPosition,
                    language: 'ru'
                })
            });

            const data = await response.json();

            if (data.status === 'success') {
                setAnalysisResult(data);
                if (isTelegramWebApp()) {
                    telegramWebApp.showAlert('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω!');
                    hapticFeedback('success');
                }
            }
        } catch (error) {
            console.error('Error analyzing resume:', error);
            if (isTelegramWebApp()) {
                telegramWebApp.showAlert('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ');
            }
        } finally {
            setLoading(false);
        }
    };

    const prepareInterview = async () => {
        if (!jobDescription.trim()) {
            if (isTelegramWebApp()) {
                telegramWebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏');
            }
            return;
        }

        setLoading(true);
        if (isTelegramWebApp()) hapticFeedback('medium');

        try {
            const response = await fetch(`${backendUrl}/api/prepare-interview`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({
                    job_description: jobDescription,
                    resume_text: resumeText || undefined,
                    interview_type: interviewType,
                    language: 'ru'
                })
            });

            const data = await response.json();

            if (data.status === 'success') {
                setCoachingResult(data);
                if (isTelegramWebApp()) {
                    telegramWebApp.showAlert('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –≥–æ—Ç–æ–≤–∞!');
                    hapticFeedback('success');
                }
            }
        } catch (error) {
            console.error('Error preparing interview:', error);
            if (isTelegramWebApp()) {
                telegramWebApp.showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é');
            }
        } finally {
            setLoading(false);
        }
    };

    const renderJobCard = (job) => (
        <div key={job.id} className="bg-white rounded-xl p-4 shadow-sm border border-gray-100 mb-3">
            <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                    <h3 className="font-semibold text-gray-900 text-sm mb-1">{job.title}</h3>
                    <div className="flex items-center text-xs text-gray-600 mb-2">
                        <Building2 className="h-3 w-3 mr-1" />
                        <span className="mr-3">{job.company_name}</span>
                        <MapPin className="h-3 w-3 mr-1" />
                        <span>{job.location}</span>
                    </div>
                </div>
                {job.remote && (
                    <div className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                        Remote
                    </div>
                )}
            </div>

            <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3 text-xs">
                    {job.visa_sponsorship && (
                        <div className="flex items-center text-blue-600">
                            <Globe className="h-3 w-3 mr-1" />
                            <span>Visa</span>
                        </div>
                    )}
                    {job.estimated_salary && (
                        <div className="flex items-center text-green-600">
                            <Euro className="h-3 w-3 mr-1" />
                            <span>{job.estimated_salary.min_salary}k-{job.estimated_salary.max_salary}k</span>
                        </div>
                    )}
                </div>
                
                <button
                    onClick={() => {
                        if (isTelegramWebApp()) {
                            telegramWebApp.openLink(job.url || '#');
                        }
                    }}
                    className="text-blue-600 text-xs font-medium hover:text-blue-700"
                >
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                </button>
            </div>
        </div>
    );

    const renderMainView = () => (
        <div className="space-y-6">
            {/* Header */}
            <div className="text-center bg-gradient-to-r from-violet-500 to-fuchsia-500 text-white p-6 rounded-xl">
                <div className="flex justify-center mb-3">
                    <div className="bg-white/20 p-3 rounded-full">
                        <Briefcase className="h-6 w-6" />
                    </div>
                </div>
                <h1 className="text-xl font-bold mb-2">–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏</h1>
                <p className="text-sm text-white/90">–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–∞—Ä—å–µ—Ä—ã —Å –∫—Ä—É—Ç—ã–º–∏ —Ñ–∏—à–∫–∞–º–∏</p>
            </div>

            {/* Quick Stats */}
            <div className="grid grid-cols-3 gap-3">
                <div className="bg-white p-3 rounded-lg text-center shadow-sm">
                    <div className="text-lg font-bold text-violet-600">{jobs.length}</div>
                    <div className="text-xs text-gray-600">–ù–∞–π–¥–µ–Ω–æ</div>
                </div>
                <div className="bg-white p-3 rounded-lg text-center shadow-sm">
                    <div className="text-lg font-bold text-green-600">{subscriptions.length}</div>
                    <div className="text-xs text-gray-600">–ü–æ–¥–ø–∏—Å–æ–∫</div>
                </div>
                <div className="bg-white p-3 rounded-lg text-center shadow-sm">
                    <div className="text-lg font-bold text-blue-600">AI</div>
                    <div className="text-xs text-gray-600">–ì–æ—Ç–æ–≤</div>
                </div>
            </div>

            {/* Main Actions */}
            <div className="space-y-3">
                <button
                    onClick={() => {
                        setCurrentView('search');
                        if (isTelegramWebApp()) hapticFeedback('light');
                    }}
                    className="w-full bg-gradient-to-r from-violet-500 to-purple-600 text-white p-4 rounded-xl font-semibold flex items-center justify-between shadow-lg hover:shadow-xl transition-all"
                >
                    <div className="flex items-center">
                        <Search className="h-5 w-5 mr-3" />
                        <div className="text-left">
                            <div className="font-semibold">–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π</div>
                            <div className="text-xs text-white/80">–° –ò–ò-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —è–∑—ã–∫—É</div>
                        </div>
                    </div>
                    <ArrowRight className="h-5 w-5" />
                </button>

                <button
                    onClick={() => {
                        setCurrentView('resume-analysis');
                        if (isTelegramWebApp()) hapticFeedback('light');
                    }}
                    className="w-full bg-gradient-to-r from-blue-500 to-cyan-600 text-white p-4 rounded-xl font-semibold flex items-center justify-between shadow-lg hover:shadow-xl transition-all"
                >
                    <div className="flex items-center">
                        <FileText className="h-5 w-5 mr-3" />
                        <div className="text-left">
                            <div className="font-semibold">–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ</div>
                            <div className="text-xs text-white/80">–ò–ò —É–ª—É—á—à–∏—Ç –≤–∞—à–µ —Ä–µ–∑—é–º–µ</div>
                        </div>
                    </div>
                    <ArrowRight className="h-5 w-5" />
                </button>

                <button
                    onClick={() => {
                        setCurrentView('interview-prep');
                        if (isTelegramWebApp()) hapticFeedback('light');
                    }}
                    className="w-full bg-gradient-to-r from-orange-500 to-red-600 text-white p-4 rounded-xl font-semibold flex items-center justify-between shadow-lg hover:shadow-xl transition-all"
                >
                    <div className="flex items-center">
                        <MessageCircle className="h-5 w-5 mr-3" />
                        <div className="text-left">
                            <div className="font-semibold">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é</div>
                            <div className="text-xs text-white/80">–ò–ò-–∫–æ—É—á –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é</div>
                        </div>
                    </div>
                    <ArrowRight className="h-5 w-5" />
                </button>
            </div>

            {/* Active Subscriptions */}
            {subscriptions.length > 0 && (
                <div className="bg-white p-4 rounded-xl shadow-sm">
                    <div className="flex items-center justify-between mb-3">
                        <h3 className="font-semibold text-gray-900 flex items-center">
                            <Bell className="h-4 w-4 mr-2 text-green-600" />
                            –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                        </h3>
                        <span className="text-xs text-gray-500">{subscriptions.length}</span>
                    </div>
                    <div className="space-y-2">
                        {subscriptions.slice(0, 2).map((sub, index) => (
                            <div key={index} className="bg-green-50 p-3 rounded-lg">
                                <div className="text-sm font-medium text-gray-900">
                                    {sub.search_query || sub.location || '–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏'}
                                </div>
                                <div className="text-xs text-gray-600 mt-1">
                                    {sub.language_level && `–£—Ä–æ–≤–µ–Ω—å: ${sub.language_level} ‚Ä¢ `}
                                    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {/* Features */}
            <div className="bg-gradient-to-r from-gray-50 to-gray-100 p-4 rounded-xl">
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <Sparkles className="h-4 w-4 mr-2 text-yellow-500" />
                    –ö—Ä—É—Ç—ã–µ —Ñ–∏—à–∫–∏
                </h3>
                <div className="grid grid-cols-2 gap-3 text-xs">
                    <div className="flex items-center text-gray-700">
                        <Languages className="h-3 w-3 mr-2 text-blue-500" />
                        –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –Ω–µ–º–µ—Ü–∫–æ–≥–æ
                    </div>
                    <div className="flex items-center text-gray-700">
                        <Bell className="h-3 w-3 mr-2 text-green-500" />
                        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
                    </div>
                    <div className="flex items-center text-gray-700">
                        <Brain className="h-3 w-3 mr-2 text-purple-500" />
                        –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ
                    </div>
                    <div className="flex items-center text-gray-700">
                        <Target className="h-3 w-3 mr-2 text-red-500" />
                        –ò–ò-–∫–æ—É—á–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–≤—å—é
                    </div>
                </div>
            </div>
        </div>
    );

    const renderSearchView = () => (
        <div className="space-y-4">
            {/* Header */}
            <div className="bg-gradient-to-r from-violet-500 to-purple-600 text-white p-4 rounded-xl">
                <h2 className="font-bold text-lg mb-1 flex items-center justify-between">
                    –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π 
                    <span className="text-xs bg-white/20 px-2 py-1 rounded-full">v2.0 üî•</span>
                </h2>
                <p className="text-sm text-white/90">–ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –ò–ò-—Ñ–∏–ª—å—Ç—Ä–∞–º–∏ + –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤</p>
            </div>

            {/* Search Filters */}
            <div className="bg-white p-4 rounded-xl shadow-sm space-y-4">
                <div>
                    <input
                        type="text"
                        placeholder="–ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)..."
                        value={searchFilters.search_query}
                        onChange={(e) => setSearchFilters(prev => ({...prev, search_query: e.target.value}))}
                        className="w-full p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-violet-500 focus:border-transparent"
                    />
                    <p className="text-xs text-gray-500 mt-1">üí° –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π</p>
                </div>

                <div className="relative">
                    <input
                        type="text"
                        placeholder="–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Berlin) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û"
                        value={citySearchInput || ''}
                        onChange={(e) => {
                            try {
                                const value = e.target.value || '';
                                console.log('City input changed to:', value);
                                setCitySearchInput(value);
                                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º location –≤ searchFilters –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤–≤–æ–¥–µ
                                setSearchFilters(prev => ({...prev, location: value}));
                                setShowCityDropdown(true);
                            } catch (error) {
                                console.error('Error handling city input change:', error);
                            }
                        }}
                        onFocus={() => {
                            console.log('City input focused, loading cities...');
                            setShowCityDropdown(true);
                            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
                            if (!citySearchInput || citySearchInput.length < 2) {
                                loadPopularCities();
                            }
                        }}
                        className="w-full p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-violet-500 focus:border-transparent pr-10"
                        required
                    />
                    <MapPin className="absolute right-3 top-3 h-4 w-4 text-gray-400" />
                    
                    {/* –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dropdown –∫–æ–≥–¥–∞ –µ—Å—Ç—å –≥–æ—Ä–æ–¥–∞ –ò–õ–ò –ø—Ä–∏ focus */}
                    {showCityDropdown && (
                        <div className="absolute z-50 w-full bg-white border border-gray-300 rounded-lg shadow-xl mt-1 max-h-60 overflow-y-auto">
                            <div className="p-2 text-xs text-gray-500 font-medium bg-gray-50">
                                {(citySearchInput || '').length >= 2 ? '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:' : '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:'}
                            </div>
                            {cities.length > 0 ? (
                                cities.map((city, index) => (
                                    <button
                                        key={`${city.name}-${index}`}
                                        onClick={(e) => {
                                            e.preventDefault();
                                            e.stopPropagation();
                                            handleCitySelect(city.name);
                                        }}
                                        className="w-full text-left p-3 hover:bg-violet-50 border-t border-gray-100 first:border-t-0 flex items-center justify-between transition-colors"
                                    >
                                        <div>
                                            <div className="text-sm font-medium text-gray-900">{city.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'}</div>
                                            <div className="text-xs text-gray-500">
                                                {city.state || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω'} ‚Ä¢ {city.population ? `${(city.population / 1000).toFixed(0)}k –∂–∏—Ç–µ–ª–µ–π` : '–ù–∞—Å–µ–ª–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                            </div>
                                        </div>
                                        {city.type === 'major' && (
                                            <Star className="h-3 w-3 text-yellow-500" />
                                        )}
                                    </button>
                                ))
                            ) : (
                                <div className="p-3 text-sm text-gray-500 text-center">
                                    {(citySearchInput || '').length >= 2 ? '–ì–æ—Ä–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...' : '–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...'}
                                </div>
                            )}
                        </div>
                    )}
                    
                    {/* Close dropdown when clicking outside - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï z-index */}
                    {showCityDropdown && (
                        <div 
                            className="fixed inset-0 z-30" 
                            onClick={() => {
                                console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ dropdown');
                                setShowCityDropdown(false);
                            }}
                        />
                    )}
                </div>

                <div className="grid grid-cols-2 gap-3">
                    <select
                        value={searchFilters.language_level}
                        onChange={(e) => setSearchFilters(prev => ({...prev, language_level: e.target.value}))}
                        className="p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-violet-500 focus:border-transparent"
                        required
                    >
                        <option value="">–£—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û</option>
                        {languageLevels.map(level => (
                            <option key={level} value={level}>{level}</option>
                        ))}
                    </select>

                    <select
                        value={searchFilters.category}
                        onChange={(e) => setSearchFilters(prev => ({...prev, category: e.target.value}))}
                        className="p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-violet-500 focus:border-transparent"
                    >
                        <option value="">–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</option>
                        {jobCategories.map(category => (
                            <option key={category} value={category}>
                                {category.charAt(0).toUpperCase() + category.slice(1)}
                            </option>
                        ))}
                    </select>
                </div>

                <div className="flex space-x-3">
                    <label className="flex items-center">
                        <input
                            type="checkbox"
                            checked={searchFilters.remote === true}
                            onChange={(e) => setSearchFilters(prev => ({...prev, remote: e.target.checked ? true : null}))}
                            className="mr-2 text-violet-600"
                        />
                        <span className="text-sm text-gray-700">–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞</span>
                    </label>
                    <label className="flex items-center">
                        <input
                            type="checkbox"
                            checked={searchFilters.visa_sponsorship === true}
                            onChange={(e) => setSearchFilters(prev => ({...prev, visa_sponsorship: e.target.checked ? true : null}))}
                            className="mr-2 text-violet-600"
                        />
                        <span className="text-sm text-gray-700">–í–∏–∑–∞</span>
                    </label>
                </div>
            </div>

            {/* Action Buttons */}
            <div className="flex space-x-3">
                <button
                    onClick={searchJobs}
                    disabled={loading || !searchFilters.location || !searchFilters.language_level}
                    className="flex-1 bg-violet-600 text-white p-3 rounded-lg font-semibold flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    {loading ? (
                        <>
                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                            –ü–æ–∏—Å–∫...
                        </>
                    ) : (
                        <>
                            <Search className="h-4 w-4 mr-2" />
                            –ù–∞–π—Ç–∏
                        </>
                    )}
                </button>
                <button
                    onClick={createSubscription}
                    disabled={!searchFilters.location || !searchFilters.language_level}
                    className="bg-green-600 text-white p-3 rounded-lg flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <Bell className="h-4 w-4" />
                </button>
                
                {/* Debug info button */}
                <button
                    onClick={() => {
                        console.log('DEBUG INFO:');
                        console.log('searchFilters:', searchFilters);
                        console.log('citySearchInput:', citySearchInput);
                        console.log('location valid:', !!searchFilters.location);
                        console.log('language_level valid:', !!searchFilters.language_level);
                        console.log('Button should be enabled:', !(!searchFilters.location || !searchFilters.language_level));
                        
                        alert(`DEBUG INFO:
Location: '${searchFilters.location}'
Language: '${searchFilters.language_level}'  
City Input: '${citySearchInput}'
Location Valid: ${!!searchFilters.location}
Language Valid: ${!!searchFilters.language_level}
Button Enabled: ${!(!searchFilters.location || !searchFilters.language_level)}`);
                    }}
                    className="px-4 py-3 bg-gray-100 text-gray-600 rounded-lg text-sm font-medium hover:bg-gray-200"
                >
                    üîß
                </button>
            </div>

            {/* Required fields notice */}
            <div className="bg-blue-50 p-3 rounded-lg">
                <p className="text-xs text-blue-800">
                    <strong>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:</strong> –ì–æ—Ä–æ–¥ –∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞. 
                    –ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω - –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π.
                </p>
            </div>

            {/* Results */}
            {jobs.length > 0 && (
                <div>
                    <div className="flex items-center justify-between mb-3">
                        <h3 className="font-semibold text-gray-900">–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏</h3>
                        <span className="text-sm text-gray-500">{jobs.length} –∏–∑ {jobs.length}</span>
                    </div>
                    <div className="space-y-3 max-h-96 overflow-y-auto">
                        {jobs.map(renderJobCard)}
                    </div>
                </div>
            )}
        </div>
    );

    const renderResumeAnalysisView = () => (
        <div className="space-y-4">
            {/* Header */}
            <div className="bg-gradient-to-r from-blue-500 to-cyan-600 text-white p-4 rounded-xl">
                <h2 className="font-bold text-lg mb-1">–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ</h2>
                <p className="text-sm text-white/90">–ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —É–ª—É—á—à–∏—Ç –≤–∞—à–µ —Ä–µ–∑—é–º–µ</p>
            </div>

            {/* Resume Input */}
            <div className="bg-white p-4 rounded-xl shadow-sm space-y-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
                    </label>
                    <textarea
                        value={resumeText}
                        onChange={(e) => setResumeText(e.target.value)}
                        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ..."
                        rows={6}
                        className="w-full p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    </label>
                    <input
                        type="text"
                        value={targetPosition}
                        onChange={(e) => setTargetPosition(e.target.value)}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Senior Developer"
                        className="w-full p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                </div>

                <button
                    onClick={analyzeResume}
                    disabled={loading || !resumeText.trim()}
                    className="w-full bg-blue-600 text-white p-3 rounded-lg font-semibold flex items-center justify-center disabled:opacity-50"
                >
                    {loading ? (
                        <>
                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                            –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...
                        </>
                    ) : (
                        <>
                            <Brain className="h-4 w-4 mr-2" />
                            –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ
                        </>
                    )}
                </button>
            </div>

            {/* Analysis Results */}
            {analysisResult && analysisResult.status === 'success' && (
                <div className="bg-white p-4 rounded-xl shadow-sm space-y-4">
                    <h3 className="font-semibold text-gray-900 flex items-center">
                        <Award className="h-4 w-4 mr-2 text-blue-600" />
                        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    </h3>

                    {/* Score */}
                    <div className="bg-gradient-to-r from-blue-50 to-cyan-50 p-3 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium text-gray-700">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</span>
                            <span className="text-lg font-bold text-blue-600">
                                {analysisResult.analysis.overall_score}/100
                            </span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                            <div
                                className="bg-blue-600 h-2 rounded-full transition-all"
                                style={{ width: `${analysisResult.analysis.overall_score}%` }}
                            ></div>
                        </div>
                    </div>

                    {/* Strengths */}
                    {analysisResult.analysis.strengths && analysisResult.analysis.strengths.length > 0 && (
                        <div>
                            <h4 className="font-medium text-green-800 mb-2 flex items-center">
                                <CheckCircle className="h-4 w-4 mr-1" />
                                –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
                            </h4>
                            <div className="space-y-1">
                                {analysisResult.analysis.strengths.map((strength, index) => (
                                    <div key={index} className="text-sm text-gray-700 bg-green-50 p-2 rounded">
                                        ‚Ä¢ {strength}
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Improvements */}
                    {analysisResult.analysis.improvements && analysisResult.analysis.improvements.length > 0 && (
                        <div>
                            <h4 className="font-medium text-orange-800 mb-2 flex items-center">
                                <AlertCircle className="h-4 w-4 mr-1" />
                                –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
                            </h4>
                            <div className="space-y-1">
                                {analysisResult.analysis.improvements.map((improvement, index) => (
                                    <div key={index} className="text-sm text-gray-700 bg-orange-50 p-2 rounded">
                                        ‚Ä¢ {improvement}
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Action Items */}
                    {analysisResult.analysis.action_items && analysisResult.analysis.action_items.length > 0 && (
                        <div>
                            <h4 className="font-medium text-purple-800 mb-2 flex items-center">
                                <Clock className="h-4 w-4 mr-1" />
                                –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
                            </h4>
                            <div className="space-y-2">
                                {analysisResult.analysis.action_items.map((item, index) => (
                                    <div key={index} className="bg-purple-50 p-3 rounded-lg">
                                        <div className="font-medium text-sm text-purple-900">{item.title}</div>
                                        <div className="text-xs text-purple-700 mt-1">{item.description}</div>
                                        {item.estimated_time && (
                                            <div className="text-xs text-purple-600 mt-1">
                                                ‚è±Ô∏è {item.estimated_time}
                                            </div>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            )}
        </div>
    );

    const renderInterviewPrepView = () => (
        <div className="space-y-4">
            {/* Header */}
            <div className="bg-gradient-to-r from-orange-500 to-red-600 text-white p-4 rounded-xl">
                <h2 className="font-bold text-lg mb-1">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é</h2>
                <p className="text-sm text-white/90">–ò–ò-–∫–æ—É—á –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é</p>
            </div>

            {/* Interview Prep Input */}
            <div className="bg-white p-4 rounded-xl shadow-sm space-y-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                    </label>
                    <textarea
                        value={jobDescription}
                        onChange={(e) => setJobDescription(e.target.value)}
                        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏..."
                        rows={4}
                        className="w-full p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        –¢–∏–ø –∏–Ω—Ç–µ—Ä–≤—å—é
                    </label>
                    <select
                        value={interviewType}
                        onChange={(e) => setInterviewType(e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                    >
                        {Object.entries(interviewTypes).map(([key, label]) => (
                            <option key={key} value={key}>{label}</option>
                        ))}
                    </select>
                </div>

                <button
                    onClick={prepareInterview}
                    disabled={loading || !jobDescription.trim()}
                    className="w-full bg-orange-600 text-white p-3 rounded-lg font-semibold flex items-center justify-center disabled:opacity-50"
                >
                    {loading ? (
                        <>
                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                            –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é...
                        </>
                    ) : (
                        <>
                            <MessageSquare className="h-4 w-4 mr-2" />
                            –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é
                        </>
                    )}
                </button>
            </div>

            {/* Coaching Results */}
            {coachingResult && coachingResult.status === 'success' && (
                <div className="bg-white p-4 rounded-xl shadow-sm space-y-4">
                    <h3 className="font-semibold text-gray-900 flex items-center">
                        <MessageCircle className="h-4 w-4 mr-2 text-orange-600" />
                        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é
                    </h3>

                    {/* Expected Questions */}
                    {coachingResult.coaching.expected_questions && coachingResult.coaching.expected_questions.length > 0 && (
                        <div>
                            <h4 className="font-medium text-orange-800 mb-2 flex items-center">
                                <MessageSquare className="h-4 w-4 mr-1" />
                                –û–∂–∏–¥–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                            </h4>
                            <div className="space-y-2">
                                {coachingResult.coaching.expected_questions.map((q, index) => (
                                    <div key={index} className="bg-orange-50 p-3 rounded-lg">
                                        <div className="font-medium text-sm text-orange-900">{q.question}</div>
                                        <div className="text-xs text-orange-700 mt-1">
                                            {q.type} ‚Ä¢ {q.difficulty}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Questions for Employer */}
                    {coachingResult.coaching.questions_for_employer && coachingResult.coaching.questions_for_employer.length > 0 && (
                        <div>
                            <h4 className="font-medium text-blue-800 mb-2 flex items-center">
                                <MessageCircle className="h-4 w-4 mr-1" />
                                –í–æ–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é
                            </h4>
                            <div className="space-y-1">
                                {coachingResult.coaching.questions_for_employer.map((question, index) => (
                                    <div key={index} className="text-sm text-gray-700 bg-blue-50 p-2 rounded">
                                        ‚Ä¢ {question}
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Preparation Checklist */}
                    {coachingResult.preparation_checklist && coachingResult.preparation_checklist.length > 0 && (
                        <div>
                            <h4 className="font-medium text-purple-800 mb-2 flex items-center">
                                <CheckCircle className="h-4 w-4 mr-1" />
                                –ß–µ–∫–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
                            </h4>
                            <div className="space-y-2">
                                {coachingResult.preparation_checklist.map((item, index) => (
                                    <div key={index} className="bg-purple-50 p-3 rounded-lg">
                                        <div className="font-medium text-sm text-purple-900">{item.task}</div>
                                        <div className="text-xs text-purple-700 mt-1">
                                            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {item.priority} ‚Ä¢ {item.time_needed}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            )}
        </div>
    );

    return (
        <div className="min-h-screen bg-gray-50 p-4">
            <div className="max-w-md mx-auto">
                {currentView === 'main' && renderMainView()}
                {currentView === 'search' && renderSearchView()}
                {currentView === 'resume-analysis' && renderResumeAnalysisView()}
                {currentView === 'interview-prep' && renderInterviewPrepView()}
            </div>
        </div>
    );
};

export default TelegramJobSearch;