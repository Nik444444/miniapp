import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';
import { 
    Rocket, Brain, Zap, Target, Star, TrendingUp,
    BarChart3, PieChart, Award, Trophy, ChevronRight,
    CheckCircle, Clock, AlertTriangle, Sparkles,
    FileText, MessageSquare, BookOpen, Settings,
    ArrowLeft, Plus, RotateCcw, Eye, X, Download
} from 'lucide-react';
import { 
    isTelegramWebApp, 
    hapticFeedback, 
    telegramWebApp,
    showBackButton,
    hideBackButton 
} from '../utils/telegramWebApp';

const RevolutionaryAIRecruiter = ({ onBack, aiProfile = null }) => {
    const { user, backendUrl } = useContext(AuthContext);
    const [currentView, setCurrentView] = useState('overview');
    const [loading, setLoading] = useState(false);
    
    // Revolutionary Analysis State
    const [revolutionaryStatus, setRevolutionaryStatus] = useState(null);
    const [revolutionaryAnalysis, setRevolutionaryAnalysis] = useState(null);
    const [analysisProgress, setAnalysisProgress] = useState(0);
    
    // Features State
    const [selectedJob, setSelectedJob] = useState(null);
    const [instantAnalysis, setInstantAnalysis] = useState(null);
    const [coverLetter, setCoverLetter] = useState(null);
    const [coverLetterStyle, setCoverLetterStyle] = useState('professional');
    
    // UI State
    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(null);
    const [showDetails, setShowDetails] = useState({});

    const coverLetterStyles = [
        { value: 'professional', label: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', icon: 'üëî', description: '–°—Ç—Ä–æ–≥–∏–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å' },
        { value: 'creative', label: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π', icon: 'üé®', description: '–ñ–∏–≤–æ–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥' },
        { value: 'technical', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', icon: '‚öôÔ∏è', description: '–§–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö' },
        { value: 'friendly', label: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', icon: 'üòä', description: '–¢–µ–ø–ª—ã–π –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥' }
    ];

    useEffect(() => {
        console.log('üöÄ Revolutionary AI Recruiter mounted');
        if (isTelegramWebApp()) {
            showBackButton();
            telegramWebApp.BackButton.onClick(() => {
                hapticFeedback('impact', 'light');
                onBack();
            });
        }
        
        loadRevolutionaryStatus();
        
        return () => {
            if (isTelegramWebApp()) {
                hideBackButton();
            }
        };
    }, []);

    const loadRevolutionaryStatus = async () => {
        try {
            const response = await fetch(`${backendUrl}/api/revolutionary-status`, {
                headers: {
                    'Authorization': `Bearer ${user.token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                setRevolutionaryStatus(data);
                
                if (data.revolutionary_analysis?.completed) {
                    // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —É–∂–µ –µ—Å—Ç—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                    if (aiProfile?.revolutionary_analysis) {
                        setRevolutionaryAnalysis(aiProfile.revolutionary_analysis);
                    }
                }
            }
        } catch (error) {
            console.error('Failed to load revolutionary status:', error);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
        }
    };

    const conductRevolutionaryAnalysis = async () => {
        if (!revolutionaryStatus?.features_available?.revolutionary_analysis) {
            setError('üîë –î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å AI –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!');
            return;
        }

        setLoading(true);
        setError(null);
        setAnalysisProgress(0);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progressInterval = setInterval(() => {
            setAnalysisProgress(prev => {
                if (prev >= 90) {
                    clearInterval(progressInterval);
                    return 90;
                }
                return prev + Math.random() * 15;
            });
        }, 800);

        try {
            hapticFeedback('impact', 'medium');
            
            const response = await fetch(`${backendUrl}/api/revolutionary-analysis`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${user.token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    analysis_depth: 'comprehensive',
                    focus_areas: ['skills', 'market', 'strategy', 'salary']
                })
            });
            
            const data = await response.json();
            clearInterval(progressInterval);
            setAnalysisProgress(100);
            
            if (response.ok && data.status === 'success') {
                setRevolutionaryAnalysis(data.analysis);
                setSuccess('üöÄ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Å—É–ø–µ—Ä-—Å–∏–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã!');
                hapticFeedback('notification', 'success');
                setCurrentView('analysis');
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');
            }
        } catch (error) {
            console.error('Revolutionary analysis failed:', error);
            setError(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
            clearInterval(progressInterval);
            setAnalysisProgress(0);
        } finally {
            setLoading(false);
        }
    };

    const analyzeJobInstantly = async (jobData, analysisType = 'compatibility') => {
        if (!revolutionaryStatus?.features_available?.instant_job_analysis) {
            setError('üîë –î–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å AI –∫–ª—é—á–∏!');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            hapticFeedback('impact', 'light');
            
            const response = await fetch(`${backendUrl}/api/instant-job-analysis`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${user.token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    job_data: jobData,
                    analysis_type: analysisType
                })
            });
            
            const data = await response.json();
            
            if (response.ok && data.status === 'success') {
                setInstantAnalysis(data.analysis);
                setSelectedJob(jobData);
                setCurrentView('job-analysis');
                hapticFeedback('notification', 'success');
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏');
            }
        } catch (error) {
            console.error('Instant job analysis failed:', error);
            setError(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    const generatePerfectCoverLetter = async (jobData, style = 'professional') => {
        if (!revolutionaryStatus?.features_available?.perfect_cover_letters) {
            setError('üîë –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å AI –∫–ª—é—á–∏!');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            hapticFeedback('impact', 'medium');
            
            const response = await fetch(`${backendUrl}/api/perfect-cover-letter`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${user.token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    job_data: jobData,
                    style: style,
                    custom_points: []
                })
            });
            
            const data = await response.json();
            
            if (response.ok && data.status === 'success') {
                setCoverLetter(data.cover_letter);
                setSelectedJob(jobData);
                setCurrentView('cover-letter');
                setSuccess('üìù –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ!');
                hapticFeedback('notification', 'success');
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞');
            }
        } catch (error) {
            console.error('Cover letter generation failed:', error);
            setError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    const toggleDetails = (section) => {
        setShowDetails(prev => ({
            ...prev,
            [section]: !prev[section]
        }));
    };

    const renderOverview = () => (
        <div className="max-w-4xl mx-auto p-4 space-y-6">
            {/* Header */}
            <div className="text-center bg-gradient-to-r from-purple-600 to-pink-600 text-white p-6 rounded-2xl">
                <div className="flex items-center justify-center mb-4">
                    <Rocket className="h-12 w-12 mr-3" />
                    <h1 className="text-2xl font-bold">–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π AI –†–µ–∫—Ä—É—Ç–µ—Ä</h1>
                </div>
                <p className="text-purple-100 text-sm">
                    –°—É–ø–µ—Ä-—É–º–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
                </p>
            </div>

            {/* Status Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Revolutionary Analysis Status */}
                <div className="bg-white border-2 border-purple-200 rounded-xl p-4">
                    <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center">
                            <Brain className="h-6 w-6 text-purple-600 mr-2" />
                            <h3 className="font-semibold text-gray-800">–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h3>
                        </div>
                        {revolutionaryStatus?.revolutionary_analysis?.completed ? (
                            <CheckCircle className="h-5 w-5 text-green-500" />
                        ) : (
                            <Clock className="h-5 w-5 text-orange-500" />
                        )}
                    </div>
                    <p className="text-sm text-gray-600 mb-3">
                        {revolutionaryStatus?.revolutionary_analysis?.completed 
                            ? '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.'
                            : '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.'}
                    </p>
                    {!revolutionaryStatus?.revolutionary_analysis?.completed ? (
                        <button
                            onClick={conductRevolutionaryAnalysis}
                            disabled={loading || !revolutionaryStatus?.features_available?.revolutionary_analysis}
                            className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                        >
                            {loading ? (
                                <div className="flex items-center">
                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                    –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... {Math.round(analysisProgress)}%
                                </div>
                            ) : (
                                <>
                                    <Sparkles className="h-4 w-4 mr-2" />
                                    –ù–∞—á–∞—Ç—å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                                </>
                            )}
                        </button>
                    ) : (
                        <button
                            onClick={() => setCurrentView('analysis')}
                            className="w-full bg-purple-100 text-purple-700 py-2 px-4 rounded-lg flex items-center justify-center"
                        >
                            <Eye className="h-4 w-4 mr-2" />
                            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏–∑
                        </button>
                    )}
                </div>

                {/* AI Features Status */}
                <div className="bg-white border-2 border-blue-200 rounded-xl p-4">
                    <div className="flex items-center mb-3">
                        <Zap className="h-6 w-6 text-blue-600 mr-2" />
                        <h3 className="font-semibold text-gray-800">AI –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h3>
                    </div>
                    <div className="space-y-2">
                        <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π</span>
                            {revolutionaryStatus?.features_available?.instant_job_analysis ? (
                                <CheckCircle className="h-4 w-4 text-green-500" />
                            ) : (
                                <X className="h-4 w-4 text-red-500" />
                            )}
                        </div>
                        <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞</span>
                            {revolutionaryStatus?.features_available?.perfect_cover_letters ? (
                                <CheckCircle className="h-4 w-4 text-green-500" />
                            ) : (
                                <X className="h-4 w-4 text-red-500" />
                            )}
                        </div>
                        <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑</span>
                            {revolutionaryStatus?.features_available?.batch_analysis ? (
                                <CheckCircle className="h-4 w-4 text-green-500" />
                            ) : (
                                <X className="h-4 w-4 text-red-500" />
                            )}
                        </div>
                    </div>
                    
                    {revolutionaryStatus?.system_status !== 'revolutionary' && (
                        <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                            <p className="text-xs text-yellow-700">
                                üîë –î–æ–±–∞–≤—å—Ç–µ AI –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
                            </p>
                        </div>
                    )}
                </div>
            </div>

            {/* AI Providers */}
            {revolutionaryStatus?.ai_providers && (
                <div className="bg-white border border-gray-200 rounded-xl p-4">
                    <h3 className="font-semibold text-gray-800 mb-3 flex items-center">
                        <Settings className="h-5 w-5 mr-2" />
                        –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                        {revolutionaryStatus.ai_providers.map((provider, index) => (
                            <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                                <div>
                                    <p className="font-medium text-sm capitalize">{provider.name}</p>
                                    <p className="text-xs text-gray-500">{provider.model}</p>
                                </div>
                                <CheckCircle className="h-4 w-4 text-green-500" />
                            </div>
                        ))}
                    </div>
                    {revolutionaryStatus.ai_providers.length === 0 && (
                        <p className="text-sm text-gray-500 text-center py-4">
                            –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
                        </p>
                    )}
                </div>
            )}

            {/* Quick Actions */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <button
                    onClick={() => setCurrentView('job-test')}
                    className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white p-4 rounded-xl flex items-center justify-between"
                >
                    <div className="text-left">
                        <h4 className="font-semibold">–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑</h4>
                        <p className="text-sm text-blue-100">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏</p>
                    </div>
                    <ChevronRight className="h-6 w-6" />
                </button>

                <button
                    onClick={() => setCurrentView('cover-letter-test')}
                    className="bg-gradient-to-r from-green-500 to-emerald-500 text-white p-4 rounded-xl flex items-center justify-between"
                >
                    <div className="text-left">
                        <h4 className="font-semibold">–°–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ</h4>
                        <p className="text-sm text-green-100">–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ</p>
                    </div>
                    <ChevronRight className="h-6 w-6" />
                </button>
            </div>

            {/* Error/Success Messages */}
            {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg flex items-start">
                    <AlertTriangle className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" />
                    <span className="text-sm">{error}</span>
                </div>
            )}

            {success && (
                <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg flex items-start">
                    <CheckCircle className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" />
                    <span className="text-sm">{success}</span>
                </div>
            )}
        </div>
    );

    const renderAnalysis = () => {
        if (!revolutionaryAnalysis) {
            return (
                <div className="max-w-4xl mx-auto p-4">
                    <div className="text-center py-8">
                        <Brain className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-semibold text-gray-600 mb-2">–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</h3>
                        <p className="text-sm text-gray-500 mb-4">–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</p>
                        <button
                            onClick={() => setCurrentView('overview')}
                            className="bg-purple-600 text-white px-4 py-2 rounded-lg"
                        >
                            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±–∑–æ—Ä—É
                        </button>
                    </div>
                </div>
            );
        }

        return (
            <div className="max-w-4xl mx-auto p-4 space-y-6">
                {/* Header */}
                <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-6 rounded-2xl">
                    <h1 className="text-2xl font-bold mb-2 flex items-center">
                        <Trophy className="h-8 w-8 mr-3" />
                        –í–∞—à —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    </h1>
                    <p className="text-purple-100 text-sm">
                        –ü–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
                    </p>
                </div>

                {/* Career Strategy */}
                {revolutionaryAnalysis.career_strategy && (
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                        <div className="flex items-center justify-between mb-4">
                            <h3 className="text-lg font-semibold flex items-center">
                                <Target className="h-6 w-6 text-blue-600 mr-2" />
                                –ö–∞—Ä—å–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                            </h3>
                            <button
                                onClick={() => toggleDetails('strategy')}
                                className="text-blue-600 hover:text-blue-700"
                            >
                                <Eye className="h-5 w-5" />
                            </button>
                        </div>

                        <div className="bg-blue-50 p-4 rounded-lg mb-4">
                            <p className="font-medium text-blue-800">
                                {revolutionaryAnalysis.career_strategy.strategy_type || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è'}
                            </p>
                        </div>

                        {showDetails.strategy && (
                            <div className="space-y-4">
                                {revolutionaryAnalysis.career_strategy.short_term_goals && (
                                    <div>
                                        <h4 className="font-medium text-gray-800 mb-2">–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (3-6 –º–µ—Å.)</h4>
                                        <ul className="list-disc list-inside text-sm text-gray-600 space-y-1">
                                            {revolutionaryAnalysis.career_strategy.short_term_goals.actions?.map((action, index) => (
                                                <li key={index}>{action}</li>
                                            ))}
                                        </ul>
                                    </div>
                                )}

                                {revolutionaryAnalysis.career_strategy.long_term_perspective && (
                                    <div>
                                        <h4 className="font-medium text-gray-800 mb-2">–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞</h4>
                                        <ul className="list-disc list-inside text-sm text-gray-600 space-y-1">
                                            {revolutionaryAnalysis.career_strategy.long_term_perspective.career_growth?.map((growth, index) => (
                                                <li key={index}>{growth}</li>
                                            ))}
                                        </ul>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                )}

                {/* Success Predictions */}
                {revolutionaryAnalysis.success_predictions && (
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                        <h3 className="text-lg font-semibold mb-4 flex items-center">
                            <BarChart3 className="h-6 w-6 text-green-600 mr-2" />
                            –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                        </h3>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            {revolutionaryAnalysis.success_predictions.overall_success && (
                                <>
                                    <div className="text-center p-4 bg-green-50 rounded-lg">
                                        <div className="text-2xl font-bold text-green-600">
                                            {revolutionaryAnalysis.success_predictions.overall_success.interview_probability || 75}%
                                        </div>
                                        <div className="text-sm text-green-700">–®–∞–Ω—Å –∏–Ω—Ç–µ—Ä–≤—å—é</div>
                                    </div>
                                    <div className="text-center p-4 bg-blue-50 rounded-lg">
                                        <div className="text-2xl font-bold text-blue-600">
                                            {revolutionaryAnalysis.success_predictions.overall_success.offer_probability || 60}%
                                        </div>
                                        <div className="text-sm text-blue-700">–®–∞–Ω—Å –æ—Ñ—Ñ–µ—Ä–∞</div>
                                    </div>
                                    <div className="text-center p-4 bg-purple-50 rounded-lg">
                                        <div className="text-lg font-bold text-purple-600">
                                            {revolutionaryAnalysis.success_predictions.overall_success.time_to_employment || '2-4 –º–µ—Å.'}
                                        </div>
                                        <div className="text-sm text-purple-700">–í—Ä–µ–º—è –¥–æ —Ä–∞–±–æ—Ç—ã</div>
                                    </div>
                                </>
                            )}
                        </div>
                    </div>
                )}

                {/* Job Recommendations */}
                {revolutionaryAnalysis.job_recommendations && revolutionaryAnalysis.job_recommendations.length > 0 && (
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                        <h3 className="text-lg font-semibold mb-4 flex items-center">
                            <Star className="h-6 w-6 text-yellow-600 mr-2" />
                            –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({revolutionaryAnalysis.job_recommendations.length})
                        </h3>

                        <div className="space-y-4">
                            {revolutionaryAnalysis.job_recommendations.slice(0, 3).map((rec, index) => (
                                <div key={index} className="border border-gray-200 rounded-lg p-4">
                                    <div className="flex items-start justify-between mb-3">
                                        <div>
                                            <h4 className="font-medium text-gray-800">{rec.job?.title || '–ü–æ–∑–∏—Ü–∏—è'}</h4>
                                            <p className="text-sm text-gray-600">{rec.job?.company_name || '–ö–æ–º–ø–∞–Ω–∏—è'}</p>
                                        </div>
                                        <div className="text-right">
                                            <div className="text-lg font-bold text-green-600">
                                                {rec.revolutionary_analysis?.compatibility_score || 75}%
                                            </div>
                                            <div className="text-xs text-gray-500">—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</div>
                                        </div>
                                    </div>

                                    {rec.ai_insights?.hidden_opportunities && (
                                        <div className="bg-yellow-50 p-3 rounded-lg">
                                            <p className="text-sm text-yellow-800">
                                                üí° <strong>AI –ò–Ω—Å–∞–π—Ç:</strong> {rec.ai_insights.hidden_opportunities}
                                            </p>
                                        </div>
                                    )}

                                    <div className="flex gap-2 mt-3">
                                        <button
                                            onClick={() => analyzeJobInstantly(rec.job, 'compatibility')}
                                            className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded"
                                        >
                                            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                                        </button>
                                        <button
                                            onClick={() => generatePerfectCoverLetter(rec.job)}
                                            className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded"
                                        >
                                            –°–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {revolutionaryAnalysis.job_recommendations.length > 3 && (
                            <div className="text-center mt-4">
                                <button
                                    onClick={() => toggleDetails('recommendations')}
                                    className="text-blue-600 hover:text-blue-700 flex items-center mx-auto"
                                >
                                    {showDetails.recommendations ? '–°–∫—Ä—ã—Ç—å' : `–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ${revolutionaryAnalysis.job_recommendations.length - 3}`}
                                    <ChevronRight className={`h-4 w-4 ml-1 transition-transform ${showDetails.recommendations ? 'rotate-90' : ''}`} />
                                </button>
                            </div>
                        )}
                    </div>
                )}

                {/* Back Button */}
                <button
                    onClick={() => setCurrentView('overview')}
                    className="w-full bg-gray-100 text-gray-700 py-3 px-4 rounded-lg flex items-center justify-center"
                >
                    <ArrowLeft className="h-4 w-4 mr-2" />
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±–∑–æ—Ä—É
                </button>
            </div>
        );
    };

    const renderJobTest = () => (
        <div className="max-w-4xl mx-auto p-4 space-y-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏</h2>
            
            <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg">
                <p className="text-sm text-yellow-800">
                    üöß –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑.
                </p>
            </div>

            <button
                onClick={() => setCurrentView('overview')}
                className="w-full bg-gray-100 text-gray-700 py-3 px-4 rounded-lg flex items-center justify-center"
            >
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞–∑–∞–¥
            </button>
        </div>
    );

    const renderCoverLetterTest = () => (
        <div className="max-w-4xl mx-auto p-4 space-y-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞</h2>
            
            {/* Style Selection */}
            <div className="bg-white border border-gray-200 rounded-xl p-6">
                <h3 className="font-semibold text-gray-800 mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {coverLetterStyles.map((style) => (
                        <button
                            key={style.value}
                            onClick={() => setCoverLetterStyle(style.value)}
                            className={`p-3 rounded-lg border-2 text-left transition-colors ${
                                coverLetterStyle === style.value
                                    ? 'border-purple-500 bg-purple-50'
                                    : 'border-gray-200 hover:border-gray-300'
                            }`}
                        >
                            <div className="flex items-center mb-2">
                                <span className="text-lg mr-2">{style.icon}</span>
                                <span className="font-medium">{style.label}</span>
                            </div>
                            <p className="text-sm text-gray-600">{style.description}</p>
                        </button>
                    ))}
                </div>
            </div>

            <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg">
                <p className="text-sm text-yellow-800">
                    üöß –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ.
                </p>
            </div>

            <button
                onClick={() => setCurrentView('overview')}
                className="w-full bg-gray-100 text-gray-700 py-3 px-4 rounded-lg flex items-center justify-center"
            >
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞–∑–∞–¥
            </button>
        </div>
    );

    // Clear messages after 5 seconds
    useEffect(() => {
        if (error || success) {
            const timer = setTimeout(() => {
                setError(null);
                setSuccess(null);
            }, 5000);
            return () => clearTimeout(timer);
        }
    }, [error, success]);

    // Main render logic
    switch (currentView) {
        case 'analysis':
            return renderAnalysis();
        case 'job-test':
            return renderJobTest();
        case 'cover-letter-test':
            return renderCoverLetterTest();
        default:
            return renderOverview();
    }
};

export default RevolutionaryAIRecruiter;