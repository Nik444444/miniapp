#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º
"""

import asyncio
import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –∫ –ø—É—Ç–∏
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

from modern_llm_manager import modern_llm_manager
from letter_ai_service import letter_ai_service

async def test_with_real_api_key():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º"""
    
    print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–ò–°–¨–ú–ê –° –†–ï–ê–õ–¨–ù–´–ú API –ö–õ–Æ–ß–û–ú")
    print("=" * 70)
    
    # –†–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    real_api_key = "AIzaSyBUedxUkLvRC4-_uA4RNjwoI0nqjmJyk4A"
    user_providers = [("gemini", "gemini-2.0-flash", real_api_key)]
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á: {real_api_key[:10]}...{real_api_key[-4:]}")
    print()
    
    # –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    print("üß™ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞")
    try:
        response = await modern_llm_manager.generate_content(
            prompt="–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '–†–∞–±–æ—Ç–∞–µ—Ç'",
            provider="gemini",
            model="gemini-2.0-flash", 
            api_key=real_api_key
        )
        
        print(f"   ‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   üìù –û—Ç–≤–µ—Ç: {response}")
        print()
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê —Å API –∫–ª—é—á–æ–º: {e}")
        print()
        return
    
    # –¢–ï–°–¢ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ –ø–∏—Å—å–º–∞ –¥–ª—è Ausl√§nderbeh√∂rde
    print("üß™ –¢–ï–°–¢ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞ –≤ Ausl√§nderbeh√∂rde")
    try:
        result = await letter_ai_service.generate_letter_from_request(
            user_request="Ich m√∂chte eine Verl√§ngerung meiner Aufenthaltserlaubnis beantragen, da mein aktueller Aufenthaltstitel am 15. M√§rz 2025 abl√§uft.",
            recipient_type="Ausl√§nderbeh√∂rde",
            user_language="ru",
            user_providers=user_providers
        )
        
        print(f"   üìä –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('status')}")
        
        if result.get('status') == 'success':
            print(f"   üéØ –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('generation_method')}")
            letter = result.get('letter', {})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            print(f"   üìß –¢–µ–º–∞: {letter.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"   üìÑ –¢–∏–ø –ø–∏—Å—å–º–∞: {letter.get('letter_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   üé≠ –£—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏: {letter.get('formality_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞
            content = letter.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')
            print(f"   üìù –î–ª–∏–Ω–∞ –ø–∏—Å—å–º–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üìú –ù–∞—á–∞–ª–æ –ø–∏—Å—å–º–∞:")
            print("   " + "="*50)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –ø–∏—Å—å–º–∞
            lines = content.split('\n')[:15]  # –ü–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫
            for line in lines:
                print(f"   {line}")
            if len(content) > 500:
                print("   ... (–ø–∏—Å—å–º–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è)")
            print("   " + "="*50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
            translation = letter.get('translation')
            if translation:
                print(f"   üåê –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:")
                translation_lines = translation.split('\n')[:10]  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
                for line in translation_lines:
                    print(f"   {line}")
                print("   " + "="*30)
            print()
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('error')}")
            print()
            
    except Exception as e:
        print(f"   ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        print()
    
    # –¢–ï–°–¢ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞ –≤ Job Center
    print("üß™ –¢–ï–°–¢ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞ –≤ Job Center")
    try:
        result = await letter_ai_service.generate_letter_from_request(
            user_request="Ich m√∂chte Arbeitslosengeld beantragen, da ich meinen Job verloren habe",
            recipient_type="Job Center",
            user_language="ru", 
            user_providers=user_providers
        )
        
        print(f"   üìä –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('status')}")
        
        if result.get('status') == 'success':
            letter = result.get('letter', {})
            content = letter.get('content', '')
            print(f"   üìù –ü–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∏—Å—å–º–æ –∫–ª—é—á–µ–≤—ã–µ –Ω–µ–º–µ—Ü–∫–∏–µ —Å–ª–æ–≤–∞
            german_words = ['Sehr geehrte', 'Antrag', 'Arbeitslosengeld', 'Mit freundlichen Gr√º√üen']
            found_words = [word for word in german_words if word in content]
            print(f"   üá©üá™ –ù–∞–π–¥–µ–Ω—ã –Ω–µ–º–µ—Ü–∫–∏–µ —Ñ—Ä–∞–∑—ã: {found_words}")
            print()
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            print()
            
    except Exception as e:
        print(f"   ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        print()
        
    print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ API –∫–ª—é—á–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(test_with_real_api_key())