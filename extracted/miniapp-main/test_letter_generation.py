#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º API –∫–ª—é—á–æ–º
"""

import asyncio
import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –∫ –ø—É—Ç–∏
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

from modern_llm_manager import modern_llm_manager
from letter_ai_service import letter_ai_service

async def test_letter_generation_with_user_key():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º API –∫–ª—é—á–æ–º"""
    
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–ò–°–¨–ú–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú API –ö–õ–Æ–ß–û–ú")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    print("üìä –°—Ç–∞—Ç—É—Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    provider_status = modern_llm_manager.get_provider_status()
    for name, status in provider_status.items():
        print(f"   {name}: {status['status']} ({status['model']})")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–µ–º–æ API –∫–ª—é—á–æ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å AIza –¥–ª—è Gemini)
    test_api_key = "AIzaSyDemo_" + "x" * 30  # –î–µ–º–æ –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_providers = [("gemini", "gemini-2.0-flash", test_api_key)]
    
    print(f"üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å API –∫–ª—é—á–æ–º: {test_api_key[:10]}...{test_api_key[-4:]}")
    print(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {len(user_providers)}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å—å–º–∞
    print("üß™ –¢–ï–°–¢ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ letter_ai_service")
    try:
        result = await letter_ai_service.generate_letter_from_request(
            user_request="Ich m√∂chte eine Verl√§ngerung meiner Aufenthaltserlaubnis beantragen",
            recipient_type="Ausl√§nderbeh√∂rde",
            user_language="ru",
            user_providers=user_providers
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status')}")
        if result.get('status') == 'success':
            print(f"   –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('generation_method')}")
            letter = result.get('letter', {})
            content = letter.get('content', '–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
            print(f"   –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {content[:100]}...")
        else:
            print(f"   –û—à–∏–±–∫–∞: {result.get('error')}")
        print()
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ modern_llm_manager
    print("üß™ –¢–ï–°–¢ 2: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ modern_llm_manager")
    try:
        response = await modern_llm_manager.generate_content(
            prompt="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞",
            provider="gemini",
            model="gemini-2.0-flash", 
            api_key=test_api_key
        )
        
        print(f"   –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {bool(response)}")
        if response:
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {response[:100]}...")
        print()
            
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º API –∫–ª—é—á–æ–º (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º)
    print("üß™ –¢–ï–°–¢ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª—é—á–µ–π (–¥–µ–º–æ —Ä–µ–∂–∏–º)")
    try:
        response = await modern_llm_manager.generate_content(
            prompt="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ API –∫–ª—é—á–∞"
        )
        
        print(f"   –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {bool(response)}")
        if response:
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '–¥–µ–º–æ': {'–¥–µ–º–æ' in response.lower()}")
            print(f"   –û—Ç–≤–µ—Ç: {response[:200]}...")
        print()
            
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        print()
        
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    asyncio.run(test_letter_generation_with_user_key())