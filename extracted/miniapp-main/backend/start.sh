#!/bin/bash
# –£–ª—É—á—à–µ–Ω–Ω—ã–π start.sh –¥–ª—è 100% —Ä–∞–±–æ—Ç—ã Tesseract OCR –Ω–∞ Render

echo "üöÄ Starting German AI Backend v14.0 - Production Mode with Tesseract OCR..."

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
echo "System Information:"
echo "Working directory: $(pwd)"
echo "Current PATH: $PATH"
echo "Current user: $(whoami)"
echo "Python version: $(python --version)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "Environment Variables:"
echo "TESSERACT_AVAILABLE: ${TESSERACT_AVAILABLE:-not_set}"
echo "TESSERACT_VERSION: ${TESSERACT_VERSION:-not_set}"
echo "TESSDATA_PREFIX: ${TESSDATA_PREFIX:-not_set}"
echo "SQLITE_DB_PATH: ${SQLITE_DB_PATH:-not_set}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å tesseract –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
echo "üîç Checking Tesseract OCR availability..."
if command -v tesseract &> /dev/null; then
    echo "‚úÖ tesseract found in PATH: $(which tesseract)"
    tesseract --version | head -3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    echo "üì¶ Available language packages:"
    tesseract --list-langs 2>/dev/null || echo "Could not list languages"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TESSDATA_PREFIX
    if [ -n "$TESSDATA_PREFIX" ] && [ -d "$TESSDATA_PREFIX" ]; then
        echo "‚úÖ TESSDATA_PREFIX is set and directory exists: $TESSDATA_PREFIX"
        echo "Available language files:"
        ls -la "$TESSDATA_PREFIX" | grep -E "\.(traineddata)$" || echo "No traineddata files found"
    else
        echo "‚ö†Ô∏è TESSDATA_PREFIX issue - trying default paths"
        echo "Available tessdata locations:"
        find /usr -name "tessdata" -type d 2>/dev/null || echo "No tessdata directories found"
    fi
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É tesseract
    echo "üß™ Testing Tesseract OCR functionality..."
    if echo "test" | tesseract stdin stdout -l eng 2>/dev/null; then
        echo "‚úÖ Tesseract test successful"
    else
        echo "‚ö†Ô∏è Tesseract test failed"
    fi
else
    echo "‚ùå tesseract not found in PATH"
    echo "üí° Available commands:"
    ls -la /usr/bin/ | grep -i tesseract || echo "No tesseract in /usr/bin"
    echo "‚ö†Ô∏è OCR functionality will be limited to LLM Vision fallback"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º emergentintegrations
echo "üîç Checking emergentintegrations..."
if python -c "import emergentintegrations; print('emergentintegrations version:', emergentintegrations.__version__ if hasattr(emergentintegrations, '__version__') else 'unknown')" 2>/dev/null; then
    echo "‚úÖ emergentintegrations available"
else
    echo "‚ö†Ô∏è emergentintegrations not available - using fallback mode"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üîç Checking Python dependencies..."
python -c "import pytesseract; print('‚úÖ pytesseract OK')" 2>/dev/null || echo "‚ùå pytesseract not available"
python -c "import cv2; print('‚úÖ opencv-python OK')" 2>/dev/null || echo "‚ùå opencv-python not available"
python -c "import PIL; print('‚úÖ Pillow OK')" 2>/dev/null || echo "‚ùå Pillow not available"
python -c "import httpcore; print('‚úÖ httpcore OK')" 2>/dev/null || echo "‚ùå httpcore not available"
python -c "import PyPDF2; print('‚úÖ PyPDF2 OK')" 2>/dev/null || echo "‚ùå PyPDF2 not available"
python -c "import pdf2image; print('‚úÖ pdf2image OK')" 2>/dev/null || echo "‚ùå pdf2image not available"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üîç Checking application modules..."
python -c "from modern_llm_manager import modern_llm_manager; print('‚úÖ modern_llm_manager OK')" 2>/dev/null || echo "‚ùå modern_llm_manager not available"
python -c "from improved_ocr_service import improved_ocr_service; print('‚úÖ improved_ocr_service OK')" 2>/dev/null || echo "‚ùå improved_ocr_service not available"
python -c "from database import db; print('‚úÖ database OK')" 2>/dev/null || echo "‚ùå database not available"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üóÇÔ∏è Setting up database directory..."
mkdir -p /app/backend/data 2>/dev/null || echo "Database directory already exists"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ -f "server.py" ]; then
    echo "‚úÖ server.py found"
else
    echo "‚ùå server.py not found in $(pwd)"
    echo "Files in current directory:"
    ls -la
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export TESSERACT_AVAILABLE=true
export TESSERACT_VERSION=5.3.0
export SQLITE_DB_PATH=${SQLITE_DB_PATH:-"/app/backend/data/german_ai.db"}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
PORT=${PORT:-8001}
echo "üì° Using port: $PORT"

echo "üîß System diagnostics complete"
echo "üöÄ Starting uvicorn server in production mode..."
echo "üìù Server will be available at: http://0.0.0.0:$PORT"

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è production
exec uvicorn server:app --host 0.0.0.0 --port $PORT --workers 1 --log-level info