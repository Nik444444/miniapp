import os
import httpx
import asyncio
from datetime import datetime
from typing import List, Dict, Optional

class TelegramNewsService:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_name = os.getenv('TELEGRAM_CHANNEL', 'germany_ua_news')
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
    async def get_channel_posts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞"""
        try:
            async with httpx.AsyncClient() as client:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel_info = await self._get_channel_info(client)
                if not channel_info:
                    return []
                
                channel_id = channel_info.get('id')
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                response = await client.get(
                    f"{self.base_url}/getUpdates",
                    params={'limit': limit, 'timeout': 30}
                )
                
                if response.status_code != 200:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
                    return []
                
                data = response.json()
                if not data.get('ok'):
                    print(f"Telegram API –æ—à–∏–±–∫–∞: {data}")
                    return []
                
                posts = []
                for update in data.get('result', []):
                    if 'channel_post' in update:
                        post_data = update['channel_post']
                        if post_data.get('chat', {}).get('id') == channel_id:
                            posts.append(self._format_post(post_data))
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ getUpdates, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                if not posts:
                    posts = await self._get_channel_posts_alternative(client, channel_id, limit)
                
                return posts[:limit]
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram: {e}")
            return []
    
    async def _get_channel_info(self, client: httpx.AsyncClient) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            response = await client.get(
                f"{self.base_url}/getChat",
                params={'chat_id': f"@{self.channel_name}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return data.get('result')
            
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return None
    
    async def _get_channel_posts_alternative(self, client: httpx.AsyncClient, channel_id: int, limit: int) -> List[Dict]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
        posts = []
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤)
            response = await client.get(
                f"{self.base_url}/getChatHistory",
                params={
                    'chat_id': channel_id,
                    'limit': limit
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    for message in data.get('result', {}).get('messages', []):
                        posts.append(self._format_post(message))
        
        except Exception as e:
            print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        return posts
    
    def _format_post(self, post_data: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        text = post_data.get('text', '')
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        preview_text = text[:200] + "..." if len(text) > 200 else text
        
        return {
            'id': post_data.get('message_id'),
            'text': text,
            'preview_text': preview_text,
            'date': post_data.get('date'),
            'formatted_date': self._format_date(post_data.get('date')),
            'views': post_data.get('views', 0),
            'channel_name': self.channel_name,
            'has_media': bool(post_data.get('photo') or post_data.get('video')),
            'media_type': self._get_media_type(post_data),
            'link': f"https://t.me/{self.channel_name}/{post_data.get('message_id', '')}"
        }
    
    def _format_date(self, timestamp: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not timestamp:
            return "–ù–µ–¥–∞–≤–Ω–æ"
        
        dt = datetime.fromtimestamp(timestamp)
        now = datetime.now()
        diff = now - dt
        
        if diff.days == 0:
            if diff.seconds < 3600:
                minutes = diff.seconds // 60
                return f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
            else:
                hours = diff.seconds // 3600
                return f"{hours} —á –Ω–∞–∑–∞–¥"
        elif diff.days == 1:
            return "–í—á–µ—Ä–∞"
        elif diff.days < 7:
            return f"{diff.days} –¥–Ω—è –Ω–∞–∑–∞–¥"
        else:
            return dt.strftime("%d.%m.%Y")
    
    def _get_media_type(self, post_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–µ–¥–∏–∞ –≤ –ø–æ—Å—Ç–µ"""
        if post_data.get('photo'):
            return 'photo'
        elif post_data.get('video'):
            return 'video'
        elif post_data.get('document'):
            return 'document'
        elif post_data.get('audio'):
            return 'audio'
        else:
            return 'text'

    async def get_sample_news(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        return [
            {
                'id': 1,
                'text': 'üá©üá™ –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–∞ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Å–Ω—É—Ç—Å—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∏–≥—Ä–∞–Ω—Ç–æ–≤.',
                'preview_text': 'üá©üá™ –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–∞ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Å–Ω—É—Ç—Å—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∏–≥—Ä–∞–Ω—Ç–æ–≤.',
                'date': int(datetime.now().timestamp()) - 3600,
                'formatted_date': '1 —á –Ω–∞–∑–∞–¥',
                'views': 1250,
                'channel_name': self.channel_name,
                'has_media': False,
                'media_type': 'text',
                'link': f'https://t.me/{self.channel_name}/1'
            },
            {
                'id': 2,
                'text': 'üíº –†—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏: –∫–∞–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã –≤ 2025 –≥–æ–¥—É. –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä.',
                'preview_text': 'üíº –†—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏: –∫–∞–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã –≤ 2025 –≥–æ–¥—É. –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä.',
                'date': int(datetime.now().timestamp()) - 7200,
                'formatted_date': '2 —á –Ω–∞–∑–∞–¥',
                'views': 890,
                'channel_name': self.channel_name,
                'has_media': True,
                'media_type': 'photo',
                'link': f'https://t.me/{self.channel_name}/2'
            },
            {
                'id': 3,
                'text': 'üè† –¶–µ–Ω—ã –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ë–µ—Ä–ª–∏–Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞. –ß—Ç–æ –¥–µ–ª–∞—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º?',
                'preview_text': 'üè† –¶–µ–Ω—ã –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ë–µ—Ä–ª–∏–Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞. –ß—Ç–æ –¥–µ–ª–∞—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º?',
                'date': int(datetime.now().timestamp()) - 14400,
                'formatted_date': '4 —á –Ω–∞–∑–∞–¥',
                'views': 2100,
                'channel_name': self.channel_name,
                'has_media': False,
                'media_type': 'text',
                'link': f'https://t.me/{self.channel_name}/3'
            }
        ]

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramNewsService()