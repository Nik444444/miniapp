"""
üéØ Perfect AI Recruiter - –ò–¥–µ–∞–ª—å–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –¥–ª—è Telegram Mini App
–ü—Ä–æ—Å—Ç–æ–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∫–æ—Ç–æ—Ä—ã–π:
- –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∑–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
- –î–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
"""

import logging
import json
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from modern_llm_manager import modern_llm_manager
from job_search_service import JobSearchService
from german_cities_service import GermanCitiesService

logger = logging.getLogger(__name__)

class PerfectAIRecruiter:
    def __init__(self, database):
        self.db = database
        self.job_search_service = JobSearchService()
        self.cities_service = GermanCitiesService()
        
        # –ü—Ä–æ—Å—Ç—ã–µ —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        self.stages = {
            'greeting': {'name': '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', 'progress': 20},
            'skills': {'name': '–ù–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç', 'progress': 60},
            'complete': {'name': '–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É', 'progress': 100}
        }

    async def start_conversation(self,
                                user_id: str,
                                user_language: str = 'ru',
                                user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üöÄ –ó–∞–ø—É—Å–∫ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
        """
        try:
            logger.info(f"üéØ Starting Perfect AI Recruiter for user {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            existing_profile = await self.db.get_ai_recruiter_profile(user_id)
            
            if existing_profile and existing_profile.get('stage') == 'complete':
                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = await self._generate_job_recommendations(existing_profile, user_providers)
                return {
                    'status': 'success',
                    'stage': 'complete',
                    'ai_message': self._get_welcome_back_message(user_language),
                    'profile': existing_profile,
                    'progress': 100,
                    'is_complete': True,
                    'recommendations': recommendations
                }
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = {
                'user_id': user_id,
                'language': user_language,
                'stage': 'greeting',
                'profile_data': {},
                'conversation': [],
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ai_message = await self._generate_message(profile, None, user_language, user_providers)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile['conversation'].append({
                'timestamp': datetime.now().isoformat(),
                'stage': 'greeting',
                'ai_message': ai_message,
                'user_message': None
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            await self.db.save_ai_recruiter_profile(user_id, profile)
            
            return {
                'status': 'success',
                'stage': 'greeting',
                'ai_message': ai_message,
                'profile': profile,
                'progress': 20,
                'is_complete': False
            }
            
        except Exception as e:
            logger.error(f"Failed to start Perfect AI Recruiter: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {str(e)}',
                'fallback_message': self._get_fallback_message(user_language)
            }

    async def continue_conversation(self,
                                   user_id: str,
                                   user_message: str,
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üí¨ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
        """
        try:
            logger.info(f"üéØ Continuing Perfect AI Recruiter conversation for user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ.',
                    'restart_required': True
                }
            
            current_stage = profile.get('stage', 'greeting')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            extracted_data = await self._analyze_user_response(
                user_message, current_stage, profile['language'], user_providers
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile['profile_data'].update(extracted_data)
            profile['updated_at'] = datetime.now().isoformat()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            next_stage = self._get_next_stage(current_stage, profile['profile_data'])
            profile['stage'] = next_stage
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
            ai_message = await self._generate_message(
                profile, user_message, profile['language'], user_providers
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            profile['conversation'].append({
                'timestamp': datetime.now().isoformat(),
                'stage': next_stage,
                'ai_message': ai_message,
                'user_message': user_message,
                'extracted_data': extracted_data
            })
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = self.stages[next_stage]['progress']
            is_complete = next_stage == 'complete'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω
            recommendations = None
            if is_complete:
                recommendations = await self._generate_job_recommendations(profile, user_providers)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await self.db.save_ai_recruiter_profile(user_id, profile)
            
            return {
                'status': 'success',
                'stage': next_stage,
                'ai_message': ai_message,
                'profile': profile,
                'progress': progress,
                'is_complete': is_complete,
                'recommendations': recommendations
            }
            
        except Exception as e:
            logger.error(f"Failed to continue conversation: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {str(e)}'
            }

    async def get_job_recommendations(self,
                                     user_id: str,
                                     user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞–±–æ—Ç—ã
        """
        try:
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            if profile.get('stage') != 'complete':
                return {
                    'status': 'error',
                    'message': '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            recommendations = await self._generate_job_recommendations(profile, user_providers)
            
            return {
                'status': 'success',
                'recommendations': recommendations,
                'profile_completeness': self.stages[profile.get('stage', 'greeting')]['progress']
            }
            
        except Exception as e:
            logger.error(f"Failed to get recommendations: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}'
            }

    async def analyze_job_compatibility(self,
                                       user_id: str,
                                       job_data: Dict[str, Any],
                                       user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π
        """
        try:
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            analysis = await self._analyze_compatibility(profile, job_data, user_providers)
            
            return {
                'status': 'success',
                'analysis': analysis,
                'job_title': job_data.get('title', 'Unknown'),
                'compatibility_score': analysis.get('overall_score', 0)
            }
            
        except Exception as e:
            logger.error(f"Failed to analyze compatibility: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {str(e)}'
            }

    async def translate_job(self,
                           job_data: Dict[str, Any],
                           target_language: str,
                           user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üåç –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫
        """
        try:
            logger.info(f"üåç Translating job to {target_language}")
            
            if user_providers:
                provider, model, api_key = user_providers[0]
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ {target_language}:

–ù–∞–∑–≤–∞–Ω–∏–µ: {job_data.get('title', '')}
–ö–æ–º–ø–∞–Ω–∏—è: {job_data.get('company_name', '')}
–û–ø–∏—Å–∞–Ω–∏–µ: {job_data.get('description', '')}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {job_data.get('requirements', '')}

–í–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "title": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
    "company_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
    "description": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "requirements": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
    "location": "{job_data.get('location', '')}"
}}"""
                
                translation = await modern_llm_manager.generate_content(
                    prompt=prompt,
                    provider=provider,
                    model=model,
                    api_key=api_key,
                    max_tokens=1500
                )
                
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                translated_job = self._parse_translation(translation, job_data)
            else:
                # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                translated_job = job_data.copy()
                translated_job['translation_note'] = f'–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {target_language} –¥–æ–±–∞–≤—å—Ç–µ AI –∫–ª—é—á–∏'
            
            return {
                'status': 'success',
                'original_job': job_data,
                'translated_job': translated_job,
                'target_language': target_language
            }
            
        except Exception as e:
            logger.error(f"Failed to translate job: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}',
                'fallback_translation': job_data
            }

    async def generate_cover_letter(self,
                                   user_id: str,
                                   job_data: Dict[str, Any],
                                   style: str = 'professional',
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        """
        try:
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            cover_letter = await self._generate_cover_letter(
                profile, job_data, style, user_providers
            )
            
            return {
                'status': 'success',
                'cover_letter': cover_letter,
                'job_title': job_data.get('title', 'Unknown'),
                'style': style
            }
            
        except Exception as e:
            logger.error(f"Failed to generate cover letter: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {str(e)}'
            }

    # =====================================================
    # –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´
    # =====================================================

    async def _generate_message(self,
                               profile: Dict[str, Any],
                               user_message: Optional[str],
                               language: str,
                               user_providers: List[Tuple[str, str, str]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è AI"""
        
        stage = profile.get('stage', 'greeting')
        profile_data = profile.get('profile_data', {})
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
        if stage == 'greeting':
            prompt = self._create_greeting_prompt(language)
        elif stage == 'skills':
            prompt = self._create_skills_prompt(profile_data, user_message, language)
        else:
            prompt = self._create_completion_prompt(profile_data, language)
        
        if user_providers:
            try:
                provider, model, api_key = user_providers[0]
                ai_message = await modern_llm_manager.generate_content(
                    prompt=prompt,
                    provider=provider,
                    model=model,
                    api_key=api_key,
                    max_tokens=300
                )
                
                if ai_message:
                    return ai_message.strip()
            except Exception as e:
                logger.error(f"Failed to generate AI message: {e}")
        
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏—è
        return self._get_fallback_message_for_stage(stage, language)

    def _create_greeting_prompt(self, language: str) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"""
        if language == 'ru':
            return """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏.

–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∏ –∫—Ä–∞—Ç–∫–æ (–≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö) —Å–ø—Ä–æ—Å–∏ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
- –ö–∞–∫—É—é —Ä–∞–±–æ—Ç—É –æ–Ω –∏—â–µ—Ç
- –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ì–µ—Ä–º–∞–Ω–∏–∏
- –ö–∞–∫–æ–π —É –Ω–µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ (A1-C2)

–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º. –ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ."""
        else:
            return """You are a professional AI recruiter for jobs in Germany.

Introduce yourself briefly (2-3 sentences) and ask the candidate:
- What job they are looking for
- In which German city
- What is their German language level (A1-C2)

Be friendly and professional. Keep it short."""

    def _create_skills_prompt(self, profile_data: Dict[str, Any], user_message: str, language: str) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤"""
        if language == 'ru':
            return f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: "{user_message}"

–£–∂–µ —Å–æ–±—Ä–∞–Ω–æ: {json.dumps(profile_data, ensure_ascii=False)}

–¢–µ–ø–µ—Ä—å –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å–ø—Ä–æ—Å–∏ –æ –µ–≥–æ –Ω–∞–≤—ã–∫–∞—Ö –∏ –æ–ø—ã—Ç–µ:
- –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
- –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏
- –ï—Å—Ç—å –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏

–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."""
        else:
            return f"""User responded: "{user_message}"

Already collected: {json.dumps(profile_data, ensure_ascii=False)}

Now briefly (1-2 sentences) ask about skills and experience:
- How many years of experience
- What are the main technical skills
- Do they have education in this field

Be brief and specific."""

    def _create_completion_prompt(self, profile_data: Dict[str, Any], language: str) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        if language == 'ru':
            return f"""–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(profile_data, ensure_ascii=False)}

–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–æ–∏—Å–∫ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–≥–æ.

–ë—É–¥—å –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–º –∏ –æ–±–Ω–∞–¥–µ–∂–∏–≤–∞—é—â–∏–º. 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º."""
        else:
            return f"""Collected data: {json.dumps(profile_data, ensure_ascii=False)}

Thank the user for the information and say you're now starting to search for perfect job opportunities specifically for them.

Be encouraging and optimistic. 2-3 sentences maximum."""

    async def _analyze_user_response(self,
                                   user_message: str,
                                   stage: str,
                                   language: str,
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        extracted_data = {}
        
        if stage == 'greeting':
            extracted_data.update(self._extract_basic_info(user_message))
        elif stage == 'skills':
            extracted_data.update(self._extract_skills_info(user_message))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if user_providers:
            try:
                ai_data = await self._ai_extract_data(user_message, stage, user_providers)
                extracted_data.update(ai_data)
            except Exception as e:
                logger.error(f"AI extraction failed: {e}")
        
        return extracted_data

    def _extract_basic_info(self, message: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        data = {}
        message_lower = message.lower()
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        professions = {
            'developer': ['developer', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', 'dev'],
            'designer': ['designer', '–¥–∏–∑–∞–π–Ω–µ—Ä', 'ui', 'ux'],
            'manager': ['manager', '–º–µ–Ω–µ–¥–∂–µ—Ä', 'project manager'],
            'engineer': ['engineer', '–∏–Ω–∂–µ–Ω–µ—Ä'],
            'analyst': ['analyst', '–∞–Ω–∞–ª–∏—Ç–∏–∫']
        }
        
        for profession, keywords in professions.items():
            if any(keyword in message_lower for keyword in keywords):
                data['profession'] = profession
                break
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        cities = ['berlin', 'm√ºnchen', 'hamburg', 'k√∂ln', 'frankfurt', 'stuttgart', 'd√ºsseldorf']
        for city in cities:
            if city in message_lower:
                data['city'] = city.capitalize()
                break
        
        # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ
        for level in ['a1', 'a2', 'b1', 'b2', 'c1', 'c2']:
            if level in message_lower:
                data['german_level'] = level.upper()
                break
        
        return data

    def _extract_skills_info(self, message: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≤—ã–∫–∞—Ö"""
        data = {}
        message_lower = message.lower()
        
        # –ü–æ–∏—Å–∫ –ª–µ—Ç –æ–ø—ã—Ç–∞
        import re
        experience_match = re.search(r'(\d+)\s*(?:–≥–æ–¥|–ª–µ—Ç|–≥–æ–¥–∞|years?)', message_lower)
        if experience_match:
            data['experience_years'] = int(experience_match.group(1))
        
        # –ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
        tech_skills = ['python', 'javascript', 'java', 'react', 'vue', 'angular', 'node', 'docker', 'kubernetes']
        found_skills = [skill for skill in tech_skills if skill in message_lower]
        if found_skills:
            data['technical_skills'] = found_skills
        
        # –ü–æ–∏—Å–∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if any(word in message_lower for word in ['—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∏–Ω—Å—Ç–∏—Ç—É—Ç', 'university', 'degree', '–¥–∏–ø–ª–æ–º']):
            data['has_education'] = True
        
        return data

    async def _ai_extract_data(self,
                              user_message: str,
                              stage: str,
                              user_providers: List[Tuple[str, str, str]]) -> Dict[str, Any]:
        """AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        prompt = f"""–ò–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–≠—Ç–∞–ø: {stage}
–û—Ç–≤–µ—Ç: "{user_message}"

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{{"profession": "...", "city": "...", "german_level": "...", "experience_years": 0, "technical_skills": []}}"""
        
        try:
            provider, model, api_key = user_providers[0]
            result = await modern_llm_manager.generate_content(
                prompt=prompt,
                provider=provider,
                model=model,
                api_key=api_key,
                max_tokens=200
            )
            
            if result and '{' in result:
                json_str = result[result.find('{'):result.rfind('}')+1]
                return json.loads(json_str)
                
        except Exception as e:
            logger.error(f"Failed to AI extract data: {e}")
        
        return {}

    def _get_next_stage(self, current_stage: str, profile_data: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
        if current_stage == 'greeting':
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–≤—ã–∫–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if len(profile_data) >= 2:
                return 'skills'
            return 'greeting'
        elif current_stage == 'skills':
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –µ—Å–ª–∏ —Å–æ–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if len(profile_data) >= 4:
                return 'complete'
            return 'skills'
        else:
            return 'complete'

    async def _generate_job_recommendations(self,
                                          profile: Dict[str, Any],
                                          user_providers: List[Tuple[str, str, str]] = None) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            profile_data = profile.get('profile_data', {})
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_params = {
                'location': profile_data.get('city', 'Berlin'),
                'language_level': profile_data.get('german_level', 'B1'),
                'search_query': profile_data.get('profession', 'developer')
            }
            
            logger.info(f"üéØ Searching jobs with params: {search_params}")
            
            # –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            jobs_result = await self.job_search_service.search_jobs(**search_params)
            
            if jobs_result.get('status') == 'success':
                jobs = jobs_result.get('jobs', [])[:10]  # –¢–æ–ø 10 –≤–∞–∫–∞–Ω—Å–∏–π
                
                recommendations = []
                for job in jobs:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                    compatibility = await self._analyze_compatibility(profile, job, user_providers)
                    
                    recommendations.append({
                        'job': job,
                        'compatibility_score': compatibility.get('overall_score', 75),
                        'match_reasons': compatibility.get('strengths', []),
                        'improvement_suggestions': compatibility.get('suggestions', [])
                    })
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                recommendations.sort(key=lambda x: x['compatibility_score'], reverse=True)
                return recommendations[:5]  # –¢–æ–ø 5
            else:
                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                return self._create_demo_recommendations(profile_data)
            
        except Exception as e:
            logger.error(f"Failed to generate recommendations: {e}")
            return self._create_demo_recommendations(profile.get('profile_data', {}))

    async def _analyze_compatibility(self,
                                   profile: Dict[str, Any],
                                   job_data: Dict[str, Any],
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π"""
        
        profile_data = profile.get('profile_data', {})
        
        if user_providers:
            try:
                provider, model, api_key = user_providers[0]
                
                prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π.

–ö–ê–ù–î–ò–î–ê–¢:
–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile_data.get('profession', 'Unknown')}
–û–ø—ã—Ç: {profile_data.get('experience_years', 'Unknown')} –ª–µ—Ç
–ù–∞–≤—ã–∫–∏: {', '.join(profile_data.get('technical_skills', []))}
–ù–µ–º–µ—Ü–∫–∏–π: {profile_data.get('german_level', 'Unknown')}

–í–ê–ö–ê–ù–°–ò–Ø:
–ù–∞–∑–≤–∞–Ω–∏–µ: {job_data.get('title', '')}
–û–ø–∏—Å–∞–Ω–∏–µ: {job_data.get('description', '')[:300]}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {job_data.get('requirements', '')}

–í–µ—Ä–Ω–∏ JSON:
{{
    "overall_score": 85,
    "strengths": ["—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤"],
    "weaknesses": ["—Å–ø–∏—Å–æ–∫ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç"],
    "suggestions": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
}}"""
                
                result = await modern_llm_manager.generate_content(
                    prompt=prompt,
                    provider=provider,
                    model=model,
                    api_key=api_key,
                    max_tokens=800
                )
                
                if result and '{' in result:
                    json_str = result[result.find('{'):result.rfind('}')+1]
                    return json.loads(json_str)
                    
            except Exception as e:
                logger.error(f"AI compatibility analysis failed: {e}")
        
        # –ü—Ä–æ—Å—Ç–æ–π fallback –∞–Ω–∞–ª–∏–∑
        return {
            'overall_score': 75,
            'strengths': ['–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç', '–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–≤—ã–∫–∏'],
            'weaknesses': ['–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —è–∑—ã–∫–∞'],
            'suggestions': ['–ò–∑—É—á–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏', '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–≤—å—é']
        }

    async def _generate_cover_letter(self,
                                   profile: Dict[str, Any],
                                   job_data: Dict[str, Any],
                                   style: str,
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
        
        profile_data = profile.get('profile_data', {})
        
        if user_providers:
            try:
                provider, model, api_key = user_providers[0]
                
                prompt = f"""–°–æ–∑–¥–∞–π –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –≤ —Å—Ç–∏–ª–µ "{style}".

–ö–ê–ù–î–ò–î–ê–¢:
{json.dumps(profile_data, ensure_ascii=False)}

–í–ê–ö–ê–ù–°–ò–Ø:
–ù–∞–∑–≤–∞–Ω–∏–µ: {job_data.get('title', '')}
–ö–æ–º–ø–∞–Ω–∏—è: {job_data.get('company_name', '')}
–û–ø–∏—Å–∞–Ω–∏–µ: {job_data.get('description', '')[:300]}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ.
–í–µ—Ä–Ω–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "subject": "—Ç–µ–º–∞ –ø–∏—Å—å–º–∞",
    "greeting": "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
    "body": "–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç",
    "closing": "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ",
    "full_text": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"
}}"""
                
                result = await modern_llm_manager.generate_content(
                    prompt=prompt,
                    provider=provider,
                    model=model,
                    api_key=api_key,
                    max_tokens=1500
                )
                
                if result and '{' in result:
                    json_str = result[result.find('{'):result.rfind('}')+1]
                    parsed = json.loads(json_str)
                    parsed['word_count'] = len(parsed.get('full_text', '').split())
                    parsed['style'] = style
                    return parsed
                    
            except Exception as e:
                logger.error(f"AI cover letter generation failed: {e}")
        
        # Fallback –ø–∏—Å—å–º–æ
        return {
            'subject': f'Bewerbung f√ºr {job_data.get("title", "die Position")}',
            'greeting': f'Sehr geehrte Damen und Herren,',
            'body': f'hiermit bewerbe ich mich f√ºr die Position {job_data.get("title", "")} in Ihrem Unternehmen. Mit meiner Erfahrung in {profile_data.get("profession", "")} bin ich √ºberzeugt, dass ich eine wertvolle Erg√§nzung f√ºr Ihr Team sein kann.',
            'closing': 'Mit freundlichen Gr√º√üen',
            'full_text': f'Sehr geehrte Damen und Herren,\n\nhiermit bewerbe ich mich f√ºr die Position {job_data.get("title", "")} in Ihrem Unternehmen. Mit meiner Erfahrung in {profile_data.get("profession", "")} bin ich √ºberzeugt, dass ich eine wertvolle Erg√§nzung f√ºr Ihr Team sein kann.\n\nMit freundlichen Gr√º√üen',
            'word_count': 50,
            'style': style
        }

    def _create_demo_recommendations(self, profile_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        profession = profile_data.get('profession', 'Developer')
        city = profile_data.get('city', 'Berlin')
        
        return [
            {
                'job': {
                    'title': f'Senior {profession}',
                    'company_name': 'TechCorp Deutschland',
                    'location': city,
                    'salary': '65,000 - 80,000 EUR',
                    'description': f'Exciting opportunity for an experienced {profession}.',
                    'requirements': ['3+ years experience', 'Strong technical skills']
                },
                'compatibility_score': 92,
                'match_reasons': ['Perfect skill match', 'Great location'],
                'improvement_suggestions': ['Improve German language skills']
            },
            {
                'job': {
                    'title': f'Junior {profession}',
                    'company_name': 'StartupHub GmbH',
                    'location': city,
                    'salary': '45,000 - 55,000 EUR',
                    'description': f'Great entry position for motivated {profession}.',
                    'requirements': ['1+ year experience', 'Learning mindset']
                },
                'compatibility_score': 85,
                'match_reasons': ['Entry level friendly', 'Startup environment'],
                'improvement_suggestions': ['Build portfolio projects']
            }
        ]

    def _parse_translation(self, translation: str, original_job: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        try:
            if '{' in translation and '}' in translation:
                json_str = translation[translation.find('{'):translation.rfind('}')+1]
                parsed = json.loads(json_str)
                return parsed
        except:
            pass
        
        # Fallback
        return original_job.copy()

    def _get_fallback_message(self, language: str) -> str:
        """Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if language == 'ru':
            return "–ü—Ä–∏–≤–µ—Ç! –Ø AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∏ –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –≤—ã –∏—â–µ—Ç–µ?"
        else:
            return "Hello! I'm an AI recruiter and I'll help you find the perfect job in Germany. Tell me, what job are you looking for?"

    def _get_fallback_message_for_stage(self, stage: str, language: str) -> str:
        """Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞"""
        messages = {
            'ru': {
                'greeting': "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –≤—ã –∏—â–µ—Ç–µ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏?",
                'skills': "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã.",
                'complete': "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –Ω–∞–π–¥—É –∏–¥–µ–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤–∞—Å."
            },
            'en': {
                'greeting': "Hello! Tell me what job you're looking for in Germany?",
                'skills': "Tell me about your skills and work experience.",
                'complete': "Great! Now I'll find perfect job opportunities for you."
            }
        }
        
        return messages.get(language, messages['ru']).get(stage, messages['ru']['greeting'])

    def _get_welcome_back_message(self, language: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if language == 'ru':
            return "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤. –í–æ—Ç –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:"
        else:
            return "Welcome back! Your profile is ready. Here are your personalized job recommendations:"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
perfect_ai_recruiter = None

def get_perfect_ai_recruiter(database):
    global perfect_ai_recruiter
    if perfect_ai_recruiter is None:
        perfect_ai_recruiter = PerfectAIRecruiter(database)
    return perfect_ai_recruiter