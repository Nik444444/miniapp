"""
üß† HOUSING AI SERVICE
AI-–∞–Ω–∞–ª–∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""

import logging
from typing import Dict, Any, List, Optional
import time
import json
import re
from modern_llm_manager import modern_llm_manager

logger = logging.getLogger(__name__)

class HousingAIService:
    def __init__(self):
        self.scam_keywords = [
            'western union', 'moneygram', 'paypal', 'bitcoin', 'cryptocurrency',
            'advance payment', 'vorauszahlung ohne besichtigung', 'sofortzahlung',
            'agent in london', 'agent abroad', 'key by post', 'schl√ºssel per post',
            'ich bin im ausland', 'bin nicht in deutschland', 'unable to meet',
            'send money first', 'geld zuerst senden', 'no viewing possible',
            'keine besichtigung m√∂glich', 'pay before viewing', 'zahlen vor besichtigung'
        ]
        
        self.suspicious_price_threshold = 0.3  # 30% below market average
        
    def analyze_listing_for_scam(self, listing: Dict[str, Any], market_context: Dict[str, Any] = None) -> Dict[str, Any]:
        """Analyze listing for scam indicators"""
        try:
            scam_score = 0
            warnings = []
            details = []
            
            title = listing.get('title', '').lower()
            price = listing.get('price')
            area = listing.get('area')
            source = listing.get('source', '')
            location = listing.get('location', '').lower()
            
            # 1. Keyword Analysis
            for keyword in self.scam_keywords:
                if keyword in title:
                    scam_score += 25
                    warnings.append(f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
                    details.append(f"Scam keyword detected: {keyword}")
            
            # 2. Price Analysis
            if price and area and area > 0:
                price_per_sqm = price / area
                
                # Unrealistically low price per sqm (varies by city)
                if price_per_sqm < 8:  # Less than 8 EUR/sqm is very suspicious
                    scam_score += 30
                    warnings.append(f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞: {price_per_sqm:.2f}‚Ç¨/–º¬≤")
                    details.append(f"Extremely low price per sqm: {price_per_sqm:.2f}")
                elif price_per_sqm < 12:  # Less than 12 EUR/sqm is suspicious
                    scam_score += 15
                    warnings.append(f"‚ö†Ô∏è –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞: {price_per_sqm:.2f}‚Ç¨/–º¬≤")
                    details.append(f"Very low price per sqm: {price_per_sqm:.2f}")
            
            # 3. Market Context Analysis
            if market_context and price:
                avg_price = market_context.get('average_price')
                if avg_price and price < (avg_price * (1 - self.suspicious_price_threshold)):
                    scam_score += 20
                    warnings.append(f"‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–∞ {((avg_price - price) / avg_price * 100):.0f}% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞")
                    details.append(f"Price significantly below market average")
            
            # 4. Source Reliability
            if source == 'eBay Kleinanzeigen':
                scam_score += 5  # Slightly higher risk
                details.append("Higher risk source")
            
            # 5. Location Analysis
            if any(word in location for word in ['fake', 'scam', 'temporary']):
                scam_score += 20
                warnings.append("üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")
            
            # Determine risk level
            if scam_score >= 50:
                risk_level = "–í–´–°–û–ö–ò–ô"
                risk_color = "üî¥"
                recommendation = "–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–ú - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞!"
            elif scam_score >= 25:
                risk_level = "–°–†–ï–î–ù–ò–ô"
                risk_color = "üü°"
                recommendation = "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
            elif scam_score >= 10:
                risk_level = "–ù–ò–ó–ö–ò–ô"
                risk_color = "üü†"
                recommendation = "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –ø—Ä–æ—è–≤–∏—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
            else:
                risk_level = "–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô"
                risk_color = "üü¢"
                recommendation = "–í—ã–≥–ª—è–¥–∏—Ç –Ω–∞–¥–µ–∂–Ω–æ"
            
            return {
                'scam_score': min(scam_score, 100),
                'risk_level': risk_level,
                'risk_color': risk_color,
                'recommendation': recommendation,
                'warnings': warnings,
                'details': details,
                'analysis_time': time.time()
            }
            
        except Exception as e:
            logger.error(f"Scam analysis failed: {str(e)}")
            return {
                'scam_score': 0,
                'risk_level': "–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù",
                'risk_color': "‚ö™",
                'recommendation': "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                'warnings': [],
                'details': ['Analysis failed'],
                'analysis_time': time.time()
            }
    
    def analyze_neighborhood(self, city: str, district: str = None, user_providers: Dict = None) -> Dict[str, Any]:
        """AI-–∞–Ω–∞–ª–∏–∑ —Ä–∞–π–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
        try:
            if not user_providers:
                logger.info("No user API keys available for neighborhood analysis")
                return self._get_demo_neighborhood_analysis(city, district)
            
            prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –ì–µ—Ä–º–∞–Ω–∏–∏:

–ì–æ—Ä–æ–¥: {city}
–†–∞–π–æ–Ω: {district or '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å'}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

1. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ (–æ—Ü–µ–Ω–∫–∞ 1-10):
- –£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
- –û—Å–≤–µ—â–µ–Ω–∏–µ —É–ª–∏—Ü

2. –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê (–æ—Ü–µ–Ω–∫–∞ 1-10):
- –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
- –ú–∞–≥–∞–∑–∏–Ω—ã –∏ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
- –®–∫–æ–ª—ã –∏ –¥–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã

3. –°–¢–û–ò–ú–û–°–¢–¨ –ñ–ò–ó–ù–ò (–æ—Ü–µ–Ω–∫–∞ 1-10):
- –¶–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã
- –¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏
- –û–±—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å

4. –ö–ê–ß–ï–°–¢–í–û –ñ–ò–ó–ù–ò (–æ—Ü–µ–Ω–∫–∞ 1-10):
- –ó–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã –∏ –ø–∞—Ä–∫–∏
- –ö—É–ª—å—Ç—É—Ä–Ω–∞—è –∂–∏–∑–Ω—å
- –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ
- –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

5. –ü–ï–†–°–ü–ï–ö–¢–ò–í–´ –†–ê–ó–í–ò–¢–ò–Ø:
- –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ä–∞–π–æ–Ω
- –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å

–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏.
"""
            
            # Try to get AI analysis
            response = modern_llm_manager.generate_content(
                prompt=prompt,
                **user_providers
            )
            
            if response and len(response) > 100:
                return {
                    'status': 'success',
                    'analysis': response,
                    'ai_powered': True,
                    'analysis_time': time.time()
                }
            else:
                logger.warning("AI analysis returned insufficient content")
                return self._get_demo_neighborhood_analysis(city, district)
                
        except Exception as e:
            logger.error(f"Neighborhood AI analysis failed: {str(e)}")
            return self._get_demo_neighborhood_analysis(city, district)
    
    def _get_demo_neighborhood_analysis(self, city: str, district: str = None) -> Dict[str, Any]:
        """–î–µ–º–æ –∞–Ω–∞–ª–∏–∑ —Ä–∞–π–æ–Ω–∞"""
        area_name = district or city
        
        demo_analysis = f"""
üèôÔ∏è –ê–ù–ê–õ–ò–ó –†–ê–ô–û–ù–ê: {area_name.upper()}

üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: 7/10
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–ª–∏—Ü
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ü–∏–µ–π

üöá –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê: 8/10
‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Å–≤—è–∑—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–æ–≤ –≤ –ø–µ—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –∞–ø—Ç–µ–∫–∏ —Ä—è–¥–æ–º
‚Ä¢ –®–∫–æ–ª—ã –∏ –¥–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã –≤ —Ä–∞–π–æ–Ω–µ

üí∞ –°–¢–û–ò–ú–û–°–¢–¨ –ñ–ò–ó–ù–ò: 6/10
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

üå≥ –ö–ê–ß–ï–°–¢–í–û –ñ–ò–ó–ù–ò: 7/10
‚Ä¢ –ü–∞—Ä–∫–∏ –∏ –∑–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω–æ–π –∫—É—Ö–Ω–∏
‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä—ã
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–Ω–∞—è –∂–∏–∑–Ω—å

üìà –ü–ï–†–°–ü–ï–ö–¢–ò–í–´ –†–ê–ó–í–ò–¢–ò–Ø:
‚Ä¢ –†–∞–π–æ–Ω –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –æ–∂–∏–¥–∞–µ—Ç—Å—è

‚≠ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–π–æ–Ω –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å —Ö–æ—Ä–æ—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏.
"""
        
        return {
            'status': 'demo',
            'analysis': demo_analysis,
            'ai_powered': False,
            'analysis_time': time.time()
        }
    
    def calculate_total_living_costs(self, listing: Dict[str, Any], city: str) -> Dict[str, Any]:
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            base_rent = listing.get('price', 0)
            if not base_rent:
                return {'error': 'No price information available'}
            
            # Typical German additional costs
            costs = {
                'base_rent': base_rent,
                'nebenkosten': round(base_rent * 0.25),  # 25% of base rent
                'internet': 35,  # Average internet cost
                'electricity': round(base_rent * 0.15),  # ~15% of base rent
                'insurance': 25,  # Basic personal insurance
                'broadcasting_fee': 18.36,  # GEZ fee
            }
            
            # City-specific adjustments
            city_multiplier = self._get_city_cost_multiplier(city.lower())
            adjusted_costs = {k: round(v * city_multiplier) if k != 'broadcasting_fee' else v 
                            for k, v in costs.items()}
            
            total_monthly = sum(adjusted_costs.values())
            
            # Kaution (deposit) - typically 2-3 months rent
            kaution = base_rent * 3
            
            return {
                'monthly_costs': adjusted_costs,
                'total_monthly': total_monthly,
                'kaution_deposit': kaution,
                'first_month_total': total_monthly + kaution,
                'city_multiplier': city_multiplier,
                'calculation_time': time.time(),
                'currency': 'EUR'
            }
            
        except Exception as e:
            logger.error(f"Cost calculation failed: {str(e)}")
            return {'error': 'Cost calculation unavailable'}
    
    def _get_city_cost_multiplier(self, city: str) -> float:
        """Get cost multiplier based on city"""
        expensive_cities = {
            'm√ºnchen': 1.4, 'munich': 1.4,
            'frankfurt': 1.3,
            'hamburg': 1.2,
            'k√∂ln': 1.1, 'cologne': 1.1,
            'd√ºsseldorf': 1.2,
            'stuttgart': 1.2,
            'berlin': 1.15,
        }
        
        moderate_cities = {
            'dresden': 0.9,
            'leipzig': 0.85,
            'hannover': 0.95,
            'bremen': 0.9,
            'n√ºrnberg': 0.95, 'nuremberg': 0.95,
        }
        
        affordable_cities = {
            'chemnitz': 0.7,
            'magdeburg': 0.75,
            'erfurt': 0.8,
            'rostock': 0.8,
        }
        
        city = city.lower()
        
        if city in expensive_cities:
            return expensive_cities[city]
        elif city in moderate_cities:
            return moderate_cities[city]
        elif city in affordable_cities:
            return affordable_cities[city]
        else:
            return 1.0  # Default multiplier
    
    def generate_landlord_message(self, listing: Dict[str, Any], user_info: Dict[str, Any], user_providers: Dict = None) -> Dict[str, Any]:
        """Generate personalized message to landlord"""
        try:
            if not user_providers:
                return self._get_demo_landlord_message(listing, user_info)
            
            title = listing.get('title', 'die Wohnung')
            location = listing.get('location', '')
            price = listing.get('price', 'N/A')
            
            user_name = user_info.get('name', 'Interessent')
            user_occupation = user_info.get('occupation', 'Angestellter')
            user_income = user_info.get('income', 'stabiles Einkommen')
            
            prompt = f"""
–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—é –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã:

–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {title}
–õ–æ–∫–∞—Ü–∏—è: {location}
–¶–µ–Ω–∞: {price}‚Ç¨

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ:
- –ò–º—è: {user_name}
- –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {user_occupation}
- –î–æ—Ö–æ–¥: {user_income}

–ü–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å:
1. –í–µ–∂–ª–∏–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
2. –ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±—è
3. –í—ã—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ
4. –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
5. –ü—Ä–æ—Å—å–±—É –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
6. –í–µ–∂–ª–∏–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

–ü–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –ù–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –≤–µ–∂–ª–∏–≤—ã–º
- –ö—Ä–∞—Ç–∫–∏–º (–Ω–µ –±–æ–ª–µ–µ 150 —Å–ª–æ–≤)
- –£–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º

–ü–æ—Å–ª–µ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥.
"""
            
            response = modern_llm_manager.generate_content(
                prompt=prompt,
                **user_providers
            )
            
            if response and len(response) > 50:
                return {
                    'status': 'success',
                    'message': response,
                    'ai_powered': True,
                    'generation_time': time.time()
                }
            else:
                return self._get_demo_landlord_message(listing, user_info)
                
        except Exception as e:
            logger.error(f"Landlord message generation failed: {str(e)}")
            return self._get_demo_landlord_message(listing, user_info)
    
    def _get_demo_landlord_message(self, listing: Dict[str, Any], user_info: Dict[str, Any]) -> Dict[str, Any]:
        """Demo landlord message"""
        title = listing.get('title', 'die Wohnung')
        price = listing.get('price', 'N/A')
        user_name = user_info.get('name', 'Name')
        
        demo_message = f"""
–ù–ï–ú–ï–¶–ö–ò–ô –¢–ï–ö–°–¢:

Sehr geehrte Damen und Herren,

ich interessiere mich sehr f√ºr Ihre Wohnung "{title}" zum Preis von {price}‚Ç¨.

Ich bin {user_name}, arbeite als Fachkraft mit stabilem Einkommen und suche eine langfristige Mietwohnung. Gerne w√ºrde ich die Wohnung besichtigen und alle notwendigen Unterlagen (Schufa, Gehaltsnachweis, etc.) vorlegen.

W√§ren Sie f√ºr einen Besichtigungstermin verf√ºgbar?

Mit freundlichen Gr√º√üen,
{user_name}

---

–†–£–°–°–ö–ò–ô –ü–ï–†–ï–í–û–î:

–£–≤–∞–∂–∞–µ–º—ã–µ –¥–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞,

—è –æ—á–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ "{title}" –ø–æ —Ü–µ–Ω–µ {price}‚Ç¨.

–Ø {user_name}, —Ä–∞–±–æ—Ç–∞—é –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º –∏ –∏—â—É –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É. –° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Å–º–æ—Ç—Ä—é –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (Schufa, —Å–ø—Ä–∞–≤–∫–∞ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∏ —Ç.–¥.).

–ë—ã–ª–∏ –±—ã –≤—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞?

–° –¥—Ä—É–∂–µ—Å–∫–∏–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏,
{user_name}
"""
        
        return {
            'status': 'demo',
            'message': demo_message,
            'ai_powered': False,
            'generation_time': time.time()
        }

# Initialize global service
housing_ai_service = HousingAIService()