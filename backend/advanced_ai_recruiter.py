"""
üéØ Advanced AI Recruiter Service - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
–ò–¥–µ–∞–ª—å–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∫–æ—Ç–æ—Ä—ã–π:
- –£–º–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ 3-5 –≤–æ–ø—Ä–æ—Å–æ–≤
- –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –î–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –ª—é–±–æ–π —è–∑—ã–∫
- –°–æ–∑–¥–∞–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
"""

import logging
import json
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from modern_llm_manager import modern_llm_manager
from job_search_service import JobSearchService
from german_cities_service import GermanCitiesService

logger = logging.getLogger(__name__)

class AdvancedAIRecruiter:
    def __init__(self, database):
        self.db = database
        self.job_search_service = JobSearchService()
        self.cities_service = GermanCitiesService()
        
        # –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ - —Å–æ–∫—Ä–∞—â–µ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        self.stages = {
            'initial': {'name': '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', 'weight': 20},
            'skills': {'name': '–ù–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç', 'weight': 40},
            'preferences': {'name': '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', 'weight': 30},
            'complete': {'name': '–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É', 'weight': 100}
        }
        
        # –Ø–∑—ã–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        self.languages = {
            'ru': '—Ä—É—Å—Å–∫–∏–π',
            'en': 'english',
            'de': 'deutsch',
            'uk': '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'es': 'espa√±ol',
            'fr': 'fran√ßais'
        }
    
    async def start_conversation(self,
                                user_id: str,
                                user_language: str = 'ru',
                                user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
        """
        try:
            logger.info(f"Starting advanced AI recruiter for user {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            existing_profile = await self.db.get_ai_recruiter_profile(user_id)
            
            if existing_profile:
                # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
                return await self._resume_conversation(existing_profile, user_language, user_providers)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = self._create_initial_profile(user_id, user_language)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ai_message = await self._generate_smart_message(
                profile, 'initial', None, user_language, user_providers
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile['conversation_history'].append({
                'timestamp': datetime.now().isoformat(),
                'stage': 'initial',
                'ai_message': ai_message,
                'user_message': None
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            await self.db.save_ai_recruiter_profile(user_id, profile)
            
            return {
                'status': 'success',
                'stage': 'initial',
                'ai_message': ai_message,
                'profile': profile,
                'progress': 0,
                'is_complete': False
            }
            
        except Exception as e:
            logger.error(f"Failed to start AI recruiter: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {str(e)}',
                'fallback_message': self._get_fallback_message(user_language)
            }
    
    async def continue_conversation(self,
                                   user_id: str,
                                   user_message: str,
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üí¨ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        try:
            logger.info(f"Continuing conversation for user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ.',
                    'restart_required': True
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            extracted_data = await self._analyze_user_response(
                user_message, profile, user_providers
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile['collected_data'].update(extracted_data)
            profile['last_interaction'] = datetime.now().isoformat()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            next_stage = self._get_next_stage(profile)
            profile['stage'] = next_stage
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            ai_message = await self._generate_smart_message(
                profile, next_stage, user_message, profile['language'], user_providers
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            profile['conversation_history'].append({
                'timestamp': datetime.now().isoformat(),
                'stage': next_stage,
                'ai_message': ai_message,
                'user_message': user_message,
                'extracted_data': extracted_data
            })
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = self._calculate_progress(profile)
            is_complete = next_stage == 'complete'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω
            recommendations = None
            if is_complete:
                recommendations = await self._generate_job_recommendations(profile, user_providers)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await self.db.save_ai_recruiter_profile(user_id, profile)
            
            return {
                'status': 'success',
                'stage': next_stage,
                'ai_message': ai_message,
                'profile': profile,
                'progress': progress,
                'is_complete': is_complete,
                'recommendations': recommendations
            }
            
        except Exception as e:
            logger.error(f"Failed to continue conversation: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {str(e)}'
            }
    
    async def get_job_recommendations(self,
                                     user_id: str,
                                     user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞–±–æ—Ç—ã
        """
        try:
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            recommendations = await self._generate_job_recommendations(profile, user_providers)
            
            return {
                'status': 'success',
                'recommendations': recommendations,
                'profile_completeness': self._calculate_progress(profile)
            }
            
        except Exception as e:
            logger.error(f"Failed to get recommendations: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}'
            }
    
    async def translate_job(self,
                           job_data: Dict[str, Any],
                           target_language: str,
                           user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üåç –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫
        """
        try:
            logger.info(f"Translating job to {target_language}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            prompt = self._create_translation_prompt(job_data, target_language)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
            if user_providers:
                provider, model, api_key = user_providers[0]
                translation = await modern_llm_manager.generate_content(
                    prompt=prompt,
                    provider=provider,
                    model=model,
                    api_key=api_key,
                    max_tokens=2000
                )
            else:
                translation = self._create_demo_translation(job_data, target_language)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            translated_job = self._parse_translation(translation, job_data)
            
            return {
                'status': 'success',
                'original_job': job_data,
                'translated_job': translated_job,
                'target_language': target_language
            }
            
        except Exception as e:
            logger.error(f"Failed to translate job: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}',
                'fallback_translation': job_data
            }
    
    async def analyze_job_compatibility(self,
                                       user_id: str,
                                       job_data: Dict[str, Any],
                                       user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π
        """
        try:
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            analysis = await self._analyze_compatibility(profile, job_data, user_providers)
            
            return {
                'status': 'success',
                'analysis': analysis,
                'job_title': job_data.get('title', 'Unknown'),
                'compatibility_score': analysis.get('score', 0)
            }
            
        except Exception as e:
            logger.error(f"Failed to analyze compatibility: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {str(e)}'
            }
    
    # =====================================================
    # –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´
    # =====================================================
    
    def _create_initial_profile(self, user_id: str, language: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        return {
            'user_id': user_id,
            'language': language,
            'stage': 'initial',
            'collected_data': {},
            'conversation_history': [],
            'created_at': datetime.now().isoformat(),
            'last_interaction': datetime.now().isoformat()
        }
    
    async def _resume_conversation(self,
                                  profile: Dict[str, Any],
                                  language: str,
                                  user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        current_stage = profile.get('stage', 'initial')
        
        if current_stage == 'complete':
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = await self._generate_job_recommendations(profile, user_providers)
            return {
                'status': 'success',
                'stage': 'complete',
                'ai_message': self._get_completion_message(language),
                'profile': profile,
                'progress': 100,
                'is_complete': True,
                'recommendations': recommendations
            }
        
        # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
        ai_message = await self._generate_smart_message(
            profile, current_stage, None, language, user_providers
        )
        
        return {
            'status': 'success',
            'stage': current_stage,
            'ai_message': ai_message,
            'profile': profile,
            'progress': self._calculate_progress(profile),
            'is_complete': False
        }
    
    async def _generate_smart_message(self,
                                     profile: Dict[str, Any],
                                     stage: str,
                                     user_message: Optional[str],
                                     language: str,
                                     user_providers: List[Tuple[str, str, str]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = self._create_context_prompt(profile, stage, user_message, language)
        
        if user_providers:
            try:
                provider, model, api_key = user_providers[0]
                ai_message = await modern_llm_manager.generate_content(
                    prompt=prompt,
                    provider=provider,
                    model=model,
                    api_key=api_key,
                    max_tokens=500
                )
                
                if ai_message:
                    return ai_message.strip()
            except Exception as e:
                logger.error(f"Failed to generate AI message: {e}")
        
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏—è
        return self._get_fallback_message_for_stage(stage, language)
    
    def _create_context_prompt(self,
                              profile: Dict[str, Any],
                              stage: str,
                              user_message: Optional[str],
                              language: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        collected_data = profile.get('collected_data', {})
        history_summary = self._summarize_conversation_history(profile)
        
        prompts = {
            'ru': {
                'initial': f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. 
                
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∞–∫—Å–∏–º—É–º 3-5 –≤–æ–ø—Ä–æ—Å–æ–≤) —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å:
- –ö–∞–∫—É—é —Ä–∞–±–æ—Ç—É –∏—â–µ—Ç —á–µ–ª–æ–≤–µ–∫
- –ö–∞–∫–æ–π —É –Ω–µ–≥–æ –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏
- –ì–¥–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
- –£—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞

–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º. –ù–ï –≥–æ–≤–æ—Ä–∏ "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" –ø–æ–≤—Ç–æ—Ä–Ω–æ.

{history_summary}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):""",
                
                'skills': f"""–ü—Ä–æ–¥–æ–ª–∂–∏ –∏–Ω—Ç–µ—Ä–≤—å—é. –£–∂–µ —Å–æ–±—Ä–∞–Ω–æ: {collected_data}
                
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: "{user_message}"

–¢–µ–ø–µ—Ä—å —É–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –Ω–∞–≤—ã–∫–∞—Ö –∏ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã. –ó–∞–¥–∞–π –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):""",
                
                'preferences': f"""–ü—Ä–æ–¥–æ–ª–∂–∏ –∏–Ω—Ç–µ—Ä–≤—å—é. –£–∂–µ —Å–æ–±—Ä–∞–Ω–æ: {collected_data}
                
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: "{user_message}"

–¢–µ–ø–µ—Ä—å —É–∑–Ω–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ (–∑–∞—Ä–ø–ª–∞—Ç–∞, –≥—Ä–∞—Ñ–∏–∫, –∫–æ–º–ø–∞–Ω–∏—è). –ó–∞–¥–∞–π –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):""",
                
                'complete': f"""–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–±—Ä–∞–Ω–æ: {collected_data}
                
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: "{user_message}"

–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–æ–∏—Å–∫ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–≥–æ.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):"""
            },
            'en': {
                'initial': f"""You are a professional AI recruiter helping find the perfect job in Germany.
                
Your task is to conduct a short interview (maximum 3-5 questions) to learn:
- What job they're looking for
- Their experience and skills
- Where they want to work
- German language level

Be friendly, professional, and efficient. DON'T say "Hello" repeatedly.

{history_summary}

Your response (in English):""",
                
                'skills': f"""Continue the interview. Already collected: {collected_data}
                
User responded: "{user_message}"

Now learn details about skills and work experience. Ask ONE specific question.

Your response (in English):""",
                
                'preferences': f"""Continue the interview. Already collected: {collected_data}
                
User responded: "{user_message}"

Now learn work preferences (salary, schedule, company). Ask ONE specific question.

Your response (in English):""",
                
                'complete': f"""Interview completed! Collected: {collected_data}
                
User responded: "{user_message}"

Thank the user and say you're starting to search for perfect job opportunities specifically for them.

Your response (in English):"""
            }
        }
        
        return prompts.get(language, prompts['ru']).get(stage, prompts['ru']['initial'])
    
    def _summarize_conversation_history(self, profile: Dict[str, Any]) -> str:
        """–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        history = profile.get('conversation_history', [])
        if not history:
            return "–†–∞–∑–≥–æ–≤–æ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è."
        
        if len(history) == 1:
            return "–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        
        return f"–£–∂–µ –±—ã–ª–æ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—á—Ç–µ–Ω—ã."
    
    async def _analyze_user_response(self,
                                   user_message: str,
                                   profile: Dict[str, Any],
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        current_stage = profile.get('stage', 'initial')
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        extracted_data = {}
        
        if current_stage == 'initial':
            # –ò—â–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –≥–æ—Ä–æ–¥, —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞
            extracted_data.update(self._extract_initial_data(user_message))
        
        elif current_stage == 'skills':
            # –ò—â–µ–º –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç
            extracted_data.update(self._extract_skills_data(user_message))
        
        elif current_stage == 'preferences':
            # –ò—â–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            extracted_data.update(self._extract_preferences_data(user_message))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å LLM, –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if user_providers:
            try:
                ai_analysis = await self._ai_analyze_response(user_message, current_stage, user_providers)
                extracted_data.update(ai_analysis)
            except Exception as e:
                logger.error(f"Failed AI analysis: {e}")
        
        return extracted_data
    
    def _extract_initial_data(self, message: str) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = {}
        
        # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ
        message_lower = message.lower()
        for level in ['a1', 'a2', 'b1', 'b2', 'c1', 'c2']:
            if level in message_lower:
                data['german_level'] = level.upper()
                break
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        cities = [
            'berlin', '–±–µ—Ä–ª–∏–Ω', 'm√ºnchen', '–º—é–Ω—Ö–µ–Ω', 'munich', 'hamburg', '–≥–∞–º–±—É—Ä–≥',
            'k√∂ln', '–∫—ë–ª—å–Ω', 'cologne', 'frankfurt', '—Ñ—Ä–∞–Ω–∫—Ñ—É—Ä—Ç', 'd√ºsseldorf', '–¥—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ',
            'stuttgart', '—à—Ç—É—Ç–≥–∞—Ä—Ç', 'leipzig', '–ª–µ–π–ø—Ü–∏–≥', 'dresden', '–¥—Ä–µ–∑–¥–µ–Ω',
            'hannover', '–≥–∞–Ω–Ω–æ–≤–µ—Ä', 'n√ºrnberg', '–Ω—é—Ä–Ω–±–µ—Ä–≥', 'nuremberg'
        ]
        for city in cities:
            if city in message_lower:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
                if city in ['–±–µ—Ä–ª–∏–Ω', 'berlin']:
                    data['preferred_city'] = 'Berlin'
                elif city in ['–º—é–Ω—Ö–µ–Ω', 'm√ºnchen', 'munich']:
                    data['preferred_city'] = 'M√ºnchen'
                elif city in ['–≥–∞–º–±—É—Ä–≥', 'hamburg']:
                    data['preferred_city'] = 'Hamburg'
                elif city in ['–∫—ë–ª—å–Ω', 'k√∂ln', 'cologne']:
                    data['preferred_city'] = 'K√∂ln'
                elif city in ['—Ñ—Ä–∞–Ω–∫—Ñ—É—Ä—Ç', 'frankfurt']:
                    data['preferred_city'] = 'Frankfurt'
                elif city in ['–¥—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ', 'd√ºsseldorf']:
                    data['preferred_city'] = 'D√ºsseldorf'
                elif city in ['—à—Ç—É—Ç–≥–∞—Ä—Ç', 'stuttgart']:
                    data['preferred_city'] = 'Stuttgart'
                else:
                    data['preferred_city'] = city.title()
                break
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        profession_patterns = {
            'developer': ['developer', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', 'dev', 'coder'],
            'python developer': ['python', '–ø–∞–π—Ç–æ–Ω'],
            'frontend developer': ['frontend', '—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥', 'react', 'vue', 'angular'],
            'backend developer': ['backend', '–±—ç–∫–µ–Ω–¥', '–±–µ–∫–µ–Ω–¥'],
            'fullstack developer': ['fullstack', '—Ñ—É–ª–ª—Å—Ç–µ–∫', 'full stack', 'full-stack'],
            'data scientist': ['data scientist', '–¥–∞—Ç–∞ —Å–∞–µ–Ω—Ç–∏—Å—Ç', '–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö'],
            'designer': ['designer', '–¥–∏–∑–∞–π–Ω–µ—Ä', 'ui', 'ux'],
            'manager': ['manager', '–º–µ–Ω–µ–¥–∂–µ—Ä', 'project manager', '–ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä'],
            'qa engineer': ['qa', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 'quality', 'tester'],
            'devops': ['devops', '–¥–µ–≤–æ–ø—Å', 'infrastructure', '–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'],
            'engineer': ['engineer', '–∏–Ω–∂–µ–Ω–µ—Ä'],
            'analyst': ['analyst', '–∞–Ω–∞–ª–∏—Ç–∏–∫'],
            'consultant': ['consultant', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'],
            'marketing': ['marketing', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥'],
            'sales': ['sales', '–ø—Ä–æ–¥–∞–∂–∏', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º']
        }
        
        for profession, patterns in profession_patterns.items():
            for pattern in patterns:
                if pattern in message_lower:
                    data['profession'] = profession
                    break
            if 'profession' in data:
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ
        if 'profession' not in data:
            words = message_lower.split()
            profession_words = ['developer', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', 'manager', '–º–µ–Ω–µ–¥–∂–µ—Ä', 
                              'designer', '–¥–∏–∑–∞–π–Ω–µ—Ä', 'analyst', '–∞–Ω–∞–ª–∏—Ç–∏–∫', 'specialist', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç']
            for word in words:
                if word in profession_words:
                    data['profession'] = word
                    break
        
        return data
        
        return data
    
    def _extract_skills_data(self, message: str) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö"""
        data = {}
        
        message_lower = message.lower()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
        tech_skills = {
            'python': ['python', '–ø–∞–π—Ç–æ–Ω', '–ø–∏—Ç–æ–Ω'],
            'javascript': ['javascript', 'js', '–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç'],
            'java': ['java', '–¥–∂–∞–≤–∞'],
            'react': ['react', '—Ä–µ–∞–∫—Ç'],
            'vue': ['vue', 'vue.js'],
            'angular': ['angular', '–∞–Ω–≥—É–ª—è—Ä'],
            'node.js': ['node', 'node.js', 'nodejs'],
            'django': ['django', '–¥–∂–∞–Ω–≥–æ'],
            'flask': ['flask', '—Ñ–ª–∞—Å–∫'],
            'docker': ['docker', '–¥–æ–∫–µ—Ä'],
            'kubernetes': ['kubernetes', 'k8s', '–∫—É–±–µ—Ä–Ω–µ—Ç–µ—Å'],
            'postgresql': ['postgresql', 'postgres', '–ø–æ—Å—Ç–≥—Ä–µ—Å'],
            'mysql': ['mysql', '–º–∞–π—Å–∫–≤–ª'],
            'mongodb': ['mongodb', 'mongo'],
            'redis': ['redis', '—Ä–µ–¥–∏—Å'],
            'git': ['git', '–≥–∏—Ç'],
            'aws': ['aws', 'amazon'],
            'linux': ['linux', '–ª–∏–Ω—É–∫—Å'],
            'sql': ['sql', '—ç—Å–∫–≤–ª'],
            'html': ['html'],
            'css': ['css'],
            'typescript': ['typescript', 'ts'],
            'c++': ['c++', 'cpp'],
            'c#': ['c#', 'csharp'],
            'php': ['php', '–ø—Ö–ø'],
            'go': ['golang', 'go'],
            'rust': ['rust', '—Ä–∞—Å—Ç'],
            'kotlin': ['kotlin', '–∫–æ—Ç–ª–∏–Ω'],
            'swift': ['swift', '—Å–≤–∏—Ñ—Ç']
        }
        
        found_skills = []
        for skill_name, patterns in tech_skills.items():
            for pattern in patterns:
                if pattern in message_lower:
                    found_skills.append(skill_name)
                    break
        
        if found_skills:
            data['technical_skills'] = list(set(found_skills))  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
        # –ü–æ–∏—Å–∫ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã (–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ)
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–µ—Ç –æ–ø—ã—Ç–∞
        experience_patterns = [
            r'(\d+)\s*(?:–≥–æ–¥|–ª–µ—Ç|–≥–æ–¥–∞)',
            r'(\d+)\s*years?',
            r'(\d+)\s*–ª–µ—Ç\s*–æ–ø—ã—Ç–∞',
            r'–æ–ø—ã—Ç\s*(\d+)',
            r'(\d+)\+?\s*years?\s*(?:of\s*)?experience'
        ]
        
        for pattern in experience_patterns:
            match = re.search(pattern, message_lower)
            if match:
                years = int(match.group(1))
                data['experience_years'] = years
                break
        
        # –ü–æ–∏—Å–∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        education_keywords = ['—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∏–Ω—Å—Ç–∏—Ç—É—Ç', 'university', 'degree', '–¥–∏–ø–ª–æ–º', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–º–∞–≥–∏—Å—Ç—Ä', '–±–∞–∫–∞–ª–∞–≤—Ä']
        for keyword in education_keywords:
            if keyword in message_lower:
                data['has_education'] = True
                break
        
        return data
    
    def _extract_preferences_data(self, message: str) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö"""
        data = {}
        
        message_lower = message.lower()
        
        # –ü–æ–∏—Å–∫ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π (–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ)
        import re
        
        salary_patterns = [
            r'(\d+)\s*(?:000)?\s*(?:-|–¥–æ|to)\s*(\d+)\s*(?:000)?\s*(?:–µ–≤—Ä–æ|euro|eur|‚Ç¨)',
            r'–æ—Ç\s*(\d+)\s*(?:000)?\s*–¥–æ\s*(\d+)\s*(?:000)?\s*(?:–µ–≤—Ä–æ|euro|eur|‚Ç¨)',
            r'(\d+)\s*(?:–∫|k|—Ç—ã—Å—è—á)\s*(?:-|–¥–æ|to)\s*(\d+)\s*(?:–∫|k|—Ç—ã—Å—è—á)',
            r'–∑–∞—Ä–ø–ª–∞—Ç–∞\s*(\d+)',
            r'salary\s*(\d+)'
        ]
        
        for pattern in salary_patterns:
            match = re.search(pattern, message_lower)
            if match:
                if len(match.groups()) >= 2:
                    # –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã
                    min_salary = int(match.group(1))
                    max_salary = int(match.group(2))
                    # –ï—Å–ª–∏ —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ 1000, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –≤ —Ç—ã—Å—è—á–∞—Ö
                    if min_salary < 1000:
                        min_salary *= 1000
                    if max_salary < 1000:
                        max_salary *= 1000
                    data['salary_min'] = min_salary
                    data['salary_max'] = max_salary
                    data['salary_expectations'] = f"{min_salary}-{max_salary} EUR"
                else:
                    # –û–¥–Ω–æ —á–∏—Å–ª–æ
                    salary = int(match.group(1))
                    if salary < 1000:
                        salary *= 1000
                    data['salary_expectations'] = f"{salary} EUR"
                break
        
        # –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
        work_format_keywords = {
            'remote': ['remote', '—É–¥–∞–ª–µ–Ω–Ω–æ', '—É–¥–∞–ª–µ–Ω–Ω–∞—è', '–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ', '–∏–∑ –¥–æ–º–∞', 'home office'],
            'office': ['office', '–æ—Ñ–∏—Å', '–æ—Ñ–∏—Å–µ', '–Ω–∞ –º–µ—Å—Ç–µ', '–æ—á–Ω–æ'],
            'hybrid': ['hybrid', '–≥–∏–±—Ä–∏–¥', '—Å–º–µ—à–∞–Ω–Ω—ã–π', '—á–∞—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–æ']
        }
        
        for format_type, keywords in work_format_keywords.items():
            for keyword in keywords:
                if keyword in message_lower:
                    data['work_format'] = format_type
                    break
            if 'work_format' in data:
                break
        
        # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        employment_keywords = {
            'full_time': ['–ø–æ–ª–Ω—ã–π –¥–µ–Ω—å', 'full time', 'fulltime', '–ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', '—Ñ—É–ª–ª —Ç–∞–π–º'],
            'part_time': ['—á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', 'part time', 'parttime', '–Ω–µ–ø–æ–ª–Ω—ã–π –¥–µ–Ω—å'],
            'contract': ['–∫–æ–Ω—Ç—Ä–∞–∫—Ç', 'contract', '–ø–æ–¥—Ä—è–¥', '—Ñ—Ä–∏–ª–∞–Ω—Å', 'freelance'],
            'internship': ['—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞', 'internship', 'intern', '–ø—Ä–∞–∫—Ç–∏–∫–∞']
        }
        
        for employment_type, keywords in employment_keywords.items():
            for keyword in keywords:
                if keyword in message_lower:
                    data['employment_type'] = employment_type
                    break
            if 'employment_type' in data:
                break
        
        # –ü–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        company_size_keywords = {
            'startup': ['—Å—Ç–∞—Ä—Ç–∞–ø', 'startup', '–º–æ–ª–æ–¥–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '–Ω–µ–±–æ–ª—å—à–∞—è –∫–æ–º–ø–∞–Ω–∏—è'],
            'small': ['–º–∞–ª–∞—è', '–º–∞–ª–µ–Ω—å–∫–∞—è', 'small company', '–¥–æ 50'],
            'medium': ['—Å—Ä–µ–¥–Ω—è—è', 'medium', '—Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä', '50-500'],
            'large': ['–±–æ–ª—å—à–∞—è', '–∫—Ä—É–ø–Ω–∞—è', 'large', '–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è', '–±–æ–ª–µ–µ 500']
        }
        
        for size_type, keywords in company_size_keywords.items():
            for keyword in keywords:
                if keyword in message_lower:
                    data['company_size_preference'] = size_type
                    break
            if 'company_size_preference' in data:
                break
        
        return data
    
    async def _ai_analyze_response(self,
                                  user_message: str,
                                  stage: str,
                                  user_providers: List[Tuple[str, str, str]]) -> Dict[str, Any]:
        """AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        
–≠—Ç–∞–ø: {stage}
–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"

–í–µ—Ä–Ω–∏ JSON —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ù–∞–ø—Ä–∏–º–µ—Ä:
{{"profession": "Software Developer", "german_level": "B1", "city": "Berlin", "experience": "3 years"}}

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:"""
        
        try:
            provider, model, api_key = user_providers[0]
            result = await modern_llm_manager.generate_content(
                prompt=prompt,
                provider=provider,
                model=model,
                api_key=api_key,
                max_tokens=200
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
            if result and '{' in result:
                json_str = result[result.find('{'):result.rfind('}')+1]
                return json.loads(json_str)
                
        except Exception as e:
            logger.error(f"Failed to AI analyze response: {e}")
        
        return {}
    
    def _get_next_stage(self, profile: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
        current_stage = profile.get('stage', 'initial')
        collected_data = profile.get('collected_data', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if current_stage == 'initial':
            if len(collected_data) >= 2:  # –•–æ—Ç—è –±—ã 2 –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                return 'skills'
            return 'initial'
        
        elif current_stage == 'skills':
            if len(collected_data) >= 4:  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—Ä–∞–Ω–æ
                return 'preferences'
            return 'skills'
        
        elif current_stage == 'preferences':
            return 'complete'
        
        return 'complete'
    
    def _calculate_progress(self, profile: Dict[str, Any]) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        stage = profile.get('stage', 'initial')
        collected_data = profile.get('collected_data', {})
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–∞–ø–∞–º
        stage_progress = {
            'initial': 20,
            'skills': 50,
            'preferences': 80,
            'complete': 100
        }
        
        base_progress = stage_progress.get(stage, 0)
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_bonus = min(len(collected_data) * 5, 20)
        
        return min(base_progress + data_bonus, 100)
    
    async def _generate_job_recommendations(self,
                                          profile: Dict[str, Any],
                                          user_providers: List[Tuple[str, str, str]] = None) -> List[Dict[str, Any]]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            collected_data = profile.get('collected_data', {})
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_params = {
                'location': collected_data.get('preferred_city', 'Berlin'),
                'language_level': collected_data.get('german_level', 'B1'),
                'search_query': collected_data.get('profession', 'developer')
            }
            
            logger.info(f"Searching jobs with params: {search_params}")
            
            # –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            jobs_result = await self.job_search_service.search_jobs(**search_params)
            
            if jobs_result.get('status') == 'success':
                all_jobs = jobs_result.get('jobs', [])
                logger.info(f"Found {len(all_jobs)} jobs")
                
                if not all_jobs:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    return self._create_demo_job_recommendations(collected_data)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
                recommendations = []
                for job in all_jobs[:10]:  # –¢–æ–ø 10 –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    compatibility = await self._analyze_compatibility(profile, job, user_providers)
                    
                    recommendation = {
                        'job': job,
                        'compatibility': compatibility,
                        'recommendation_reason': self._get_recommendation_reason(profile, job, compatibility),
                        'action_items': self._get_action_items_for_job(profile, job, compatibility),
                        'match_highlights': self._get_match_highlights(profile, job, compatibility)
                    }
                    
                    recommendations.append(recommendation)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                recommendations.sort(key=lambda x: x['compatibility'].get('score', 0), reverse=True)
                
                # –ë–µ—Ä–µ–º —Ç–æ–ø 5 –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                return recommendations[:5]
            else:
                logger.warning(f"Job search failed: {jobs_result}")
                return self._create_demo_job_recommendations(collected_data)
            
        except Exception as e:
            logger.error(f"Failed to generate recommendations: {e}")
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._create_demo_job_recommendations(collected_data)
    
    def _create_demo_job_recommendations(self, collected_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
        
        profession = collected_data.get('profession', 'developer')
        city = collected_data.get('preferred_city', 'Berlin')
        german_level = collected_data.get('german_level', 'B1')
        
        demo_jobs = [
            {
                'title': f'Senior {profession.title()}',
                'company': 'TechCorp Deutschland',
                'location': city,
                'salary': '60,000 - 80,000 EUR',
                'description': f'Exciting opportunity for an experienced {profession} to join our innovative team in {city}. We work with cutting-edge technologies and offer excellent growth opportunities.',
                'requirements': f'3+ years of experience in {profession}, strong technical skills, {german_level}+ German level',
                'type': 'Vollzeit',
                'remote_possible': True
            },
            {
                'title': f'Junior {profession.title()}',
                'company': 'StartupHub GmbH',
                'location': city,
                'salary': '45,000 - 55,000 EUR',
                'description': f'Perfect entry-level position for a motivated {profession}. Join our dynamic startup environment and grow your skills.',
                'requirements': f'1+ year of experience, willingness to learn, {german_level}+ German level',
                'type': 'Vollzeit',
                'remote_possible': False
            },
            {
                'title': f'{profession.title()} (Remote)',
                'company': 'RemoteWork Solutions',
                'location': 'Deutschland (Remote)',
                'salary': '55,000 - 70,000 EUR',
                'description': f'100% remote position for a skilled {profession}. Work from anywhere in Germany with flexible hours.',
                'requirements': f'2+ years of experience, excellent communication skills, {german_level}+ German level',
                'type': 'Vollzeit',
                'remote_possible': True
            }
        ]
        
        recommendations = []
        for job in demo_jobs:
            # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            compatibility = {
                'score': 75 + (len(recommendations) * 5),  # –£–±—ã–≤–∞—é—â–∏–µ –±–∞–ª–ª—ã
                'strengths': [
                    f"üíº –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {profession}",
                    f"üìç –ñ–µ–ª–∞–µ–º—ã–π –≥–æ—Ä–æ–¥: {city}",
                    f"üá©üá™ –ü–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ: {german_level}"
                ],
                'concerns': [],
                'recommendations': ["üìù –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–µ–∑—é–º–µ", "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ"],
                'overall_recommendation': 'good',
                'recommendation_text': 'üëç –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –°—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!',
                'summary': f'–•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ({75 + (len(recommendations) * 5)}/100)!'
            }
            
            recommendation = {
                'job': job,
                'compatibility': compatibility,
                'recommendation_reason': f"–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞.",
                'action_items': [
                    "üìù –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—é–º–µ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏",
                    "‚úçÔ∏è –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ",
                    "üîç –ò–∑—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏",
                    "üìû –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"
                ],
                'match_highlights': [
                    f"‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {profession}",
                    f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥: {city}",
                    f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ: {german_level}+"
                ]
            }
            
            recommendations.append(recommendation)
        
        return recommendations
    
    def _get_recommendation_reason(self, profile: Dict[str, Any], job: Dict[str, Any], compatibility: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        score = compatibility.get('score', 0)
        strengths = compatibility.get('strengths', [])
        
        if score >= 80:
            reason = "üéØ –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! "
        elif score >= 65:
            reason = "üëç –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. "
        elif score >= 45:
            reason = "ü§î –•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã. "
        else:
            reason = "üìù –í–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. "
        
        if strengths:
            top_strengths = strengths[:2]  # –ë–µ—Ä–µ–º —Ç–æ–ø 2 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
            reason += "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã: " + ", ".join([s.split(" ", 1)[1] if " " in s else s for s in top_strengths])
        
        return reason
    
    def _get_action_items_for_job(self, profile: Dict[str, Any], job: Dict[str, Any], compatibility: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
        
        actions = []
        concerns = compatibility.get('concerns', [])
        score = compatibility.get('score', 0)
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions.append("üìù –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—é–º–µ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏")
        actions.append("‚úçÔ∏è –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ")
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        if score >= 80:
            actions.append("üöÄ –ü–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!")
            actions.append("üìû –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é")
        elif score >= 65:
            actions.append("üîç –ò–∑—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –∫–æ–º–ø–∞–Ω–∏—é")
            actions.append("üí™ –ü–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
        else:
            actions.append("üìö –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö")
            actions.append("üéØ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º
        for concern in concerns:
            if '–Ω–µ–º–µ—Ü–∫–æ–≥–æ' in concern.lower() or 'german' in concern.lower():
                actions.append("üá©üá™ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ –≤ —Ä–µ–∑—é–º–µ")
            elif '–≥–æ—Ä–æ–¥' in concern.lower() or 'city' in concern.lower():
                actions.append("üìç –û–±—ä—è—Å–Ω–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–µ–∑–¥—É")
            elif '–æ–ø—ã—Ç' in concern.lower() or 'experience' in concern.lower():
                actions.append("üíº –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç")
            elif '–Ω–∞–≤—ã–∫' in concern.lower() or 'skill' in concern.lower():
                actions.append("üõ† –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")
        
        return actions[:6]  # –ú–∞–∫—Å–∏–º—É–º 6 –¥–µ–π—Å—Ç–≤–∏–π
    
    def _get_match_highlights(self, profile: Dict[str, Any], job: Dict[str, Any], compatibility: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
        
        highlights = []
        strengths = compatibility.get('strengths', [])
        
        # –ë–µ—Ä–µ–º –≤—Å–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∫ highlights
        for strength in strengths[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 highlights
            if strength.startswith(('üéØ', 'üíº', 'üõ†', 'üá©üá™', '‚è±', 'üè†', 'üè¢')):
                highlights.append(strength)
            else:
                highlights.append(f"‚úÖ {strength}")
        
        # –ï—Å–ª–∏ –º–∞–ª–æ highlights, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
        if len(highlights) < 2:
            highlights.append("‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            highlights.append("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞")
        
        return highlights
    
    async def _analyze_compatibility(self,
                                   profile: Dict[str, Any],
                                   job: Dict[str, Any],
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π"""
        
        collected_data = profile.get('collected_data', {})
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏
        analysis = {
            'score': 0,
            'max_score': 100,
            'categories': {},
            'strengths': [],
            'concerns': [],
            'recommendations': [],
            'summary': ''
        }
        
        # 1. –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–∏ (25 –±–∞–ª–ª–æ–≤)
        location_score = self._analyze_location_match(job, collected_data)
        analysis['categories']['location'] = location_score
        analysis['score'] += location_score['score']
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏/–Ω–∞–≤—ã–∫–æ–≤ (30 –±–∞–ª–ª–æ–≤)
        skills_score = self._analyze_skills_match(job, collected_data)
        analysis['categories']['skills'] = skills_score
        analysis['score'] += skills_score['score']
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ —è–∑—ã–∫—É (20 –±–∞–ª–ª–æ–≤)
        language_score = self._analyze_language_requirements(job, collected_data)
        analysis['categories']['language'] = language_score
        analysis['score'] += language_score['score']
        
        # 4. –ê–Ω–∞–ª–∏–∑ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã (15 –±–∞–ª–ª–æ–≤)
        experience_score = self._analyze_experience_match(job, collected_data)
        analysis['categories']['experience'] = experience_score
        analysis['score'] += experience_score['score']
        
        # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (10 –±–∞–ª–ª–æ–≤)
        preferences_score = self._analyze_preferences_match(job, collected_data)
        analysis['categories']['preferences'] = preferences_score
        analysis['score'] += preferences_score['score']
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ insights
        for category in analysis['categories'].values():
            analysis['strengths'].extend(category.get('strengths', []))
            analysis['concerns'].extend(category.get('concerns', []))
            analysis['recommendations'].extend(category.get('recommendations', []))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
        analysis['summary'] = self._generate_compatibility_summary(analysis['score'], analysis['strengths'], analysis['concerns'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if analysis['score'] >= 80:
            analysis['overall_recommendation'] = 'excellent'
            analysis['recommendation_text'] = 'üéØ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫—É.'
        elif analysis['score'] >= 65:
            analysis['overall_recommendation'] = 'good'
            analysis['recommendation_text'] = 'üëç –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –°—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!'
        elif analysis['score'] >= 45:
            analysis['overall_recommendation'] = 'moderate'
            analysis['recommendation_text'] = 'ü§î –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã.'
        else:
            analysis['overall_recommendation'] = 'low'
            analysis['recommendation_text'] = 'üìù –ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.'
        
        return analysis
    
    def _analyze_location_match(self, job: Dict[str, Any], collected_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏–∏"""
        result = {'score': 0, 'max_score': 25, 'strengths': [], 'concerns': [], 'recommendations': []}
        
        job_location = job.get('location', '').lower()
        preferred_city = collected_data.get('preferred_city', '').lower()
        work_format = collected_data.get('work_format', '')
        
        if preferred_city and preferred_city in job_location:
            result['score'] = 25
            result['strengths'].append(f"üéØ –í–∞–∫–∞–Ω—Å–∏—è –≤ –∂–µ–ª–∞–µ–º–æ–º –≥–æ—Ä–æ–¥–µ: {job_location.title()}")
        elif 'remote' in job_location and work_format == 'remote':
            result['score'] = 20
            result['strengths'].append("üè† –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º")
        elif preferred_city:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–∫–∏–µ –≥–æ—Ä–æ–¥–∞
            if self._are_cities_nearby(preferred_city, job_location):
                result['score'] = 15
                result['recommendations'].append(f"üìç –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ–µ–∑–¥: {job_location.title()} –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç {preferred_city.title()}")
            else:
                result['score'] = 5
                result['concerns'].append(f"üìç –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥: {job_location.title()} –≤–º–µ—Å—Ç–æ {preferred_city.title()}")
        else:
            result['score'] = 10
            result['recommendations'].append("üìç –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞")
        
        return result
    
    def _analyze_skills_match(self, job: Dict[str, Any], collected_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–≤—ã–∫–æ–≤"""
        result = {'score': 0, 'max_score': 30, 'strengths': [], 'concerns': [], 'recommendations': []}
        
        job_description = (job.get('description', '') + ' ' + job.get('requirements', '')).lower()
        job_title = job.get('title', '').lower()
        
        profession = collected_data.get('profession', '').lower()
        technical_skills = [skill.lower() for skill in collected_data.get('technical_skills', [])]
        experience_years = collected_data.get('experience_years', 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        if profession and profession in job_title:
            result['score'] += 15
            result['strengths'].append(f"üíº –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {profession}")
        elif profession and any(word in job_title for word in profession.split()):
            result['score'] += 10
            result['strengths'].append(f"üíº –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {profession}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
        matching_skills = []
        for skill in technical_skills:
            if skill in job_description:
                matching_skills.append(skill)
        
        if matching_skills:
            skills_score = min(len(matching_skills) * 3, 15)
            result['score'] += skills_score
            result['strengths'].append(f"üõ† –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞–≤—ã–∫–∏: {', '.join(matching_skills)}")
        else:
            result['concerns'].append("üõ† –ù–µ –Ω–∞–π–¥–µ–Ω–æ —è–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –Ω–∞–≤—ã–∫–∞–º")
            result['recommendations'].append("üìö –ò–∑—É—á–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")
        
        return result
    
    def _analyze_language_requirements(self, job: Dict[str, Any], collected_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        result = {'score': 0, 'max_score': 20, 'strengths': [], 'concerns': [], 'recommendations': []}
        
        job_text = (job.get('description', '') + ' ' + job.get('requirements', '')).lower()
        user_german_level = collected_data.get('german_level', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ
        required_level = self._extract_german_level_from_job(job_text)
        
        if user_german_level and required_level:
            user_level_num = self._german_level_to_number(user_german_level)
            required_level_num = self._german_level_to_number(required_level)
            
            if user_level_num >= required_level_num:
                result['score'] = 20
                result['strengths'].append(f"üá©üá™ –£—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ {user_german_level} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º ({required_level})")
            elif user_level_num >= required_level_num - 1:
                result['score'] = 15
                result['strengths'].append(f"üá©üá™ –£—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ {user_german_level} –±–ª–∏–∑–æ–∫ –∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º ({required_level})")
                result['recommendations'].append("üìñ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ")
            else:
                result['score'] = 5
                result['concerns'].append(f"üá©üá™ –¢—Ä–µ–±—É–µ—Ç—Å—è {required_level}, —É –≤–∞—Å {user_german_level}")
                result['recommendations'].append("üìñ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞")
        else:
            result['score'] = 10
            if not user_german_level:
                result['recommendations'].append("üá©üá™ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞")
            else:
                result['recommendations'].append("üá©üá™ –í –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–µ–º–µ—Ü–∫–æ–º—É —è–∑—ã–∫—É")
        
        return result
    
    def _analyze_experience_match(self, job: Dict[str, Any], collected_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–ø—ã—Ç–∞"""
        result = {'score': 0, 'max_score': 15, 'strengths': [], 'concerns': [], 'recommendations': []}
        
        job_text = (job.get('description', '') + ' ' + job.get('requirements', '')).lower()
        user_experience = collected_data.get('experience_years', 0)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
        required_experience = self._extract_experience_from_job(job_text)
        
        if required_experience is not None and user_experience > 0:
            if user_experience >= required_experience:
                result['score'] = 15
                result['strengths'].append(f"‚è± –û–ø—ã—Ç {user_experience} –ª–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º ({required_experience}+ –ª–µ—Ç)")
            elif user_experience >= required_experience - 1:
                result['score'] = 10
                result['strengths'].append(f"‚è± –û–ø—ã—Ç {user_experience} –ª–µ—Ç –±–ª–∏–∑–æ–∫ –∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º ({required_experience}+ –ª–µ—Ç)")
            else:
                result['score'] = 5
                result['concerns'].append(f"‚è± –¢—Ä–µ–±—É–µ—Ç—Å—è {required_experience}+ –ª–µ—Ç, —É –≤–∞—Å {user_experience} –ª–µ—Ç")
                result['recommendations'].append("üíº –ü–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ –≤ —Ä–µ–∑—é–º–µ –≤—Å–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        else:
            result['score'] = 8
            if user_experience == 0:
                result['recommendations'].append("‚è± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            else:
                result['recommendations'].append("‚è± –í –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —á–µ—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–ø—ã—Ç—É")
        
        return result
    
    def _analyze_preferences_match(self, job: Dict[str, Any], collected_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        result = {'score': 0, 'max_score': 10, 'strengths': [], 'concerns': [], 'recommendations': []}
        
        job_text = (job.get('description', '') + ' ' + job.get('requirements', '')).lower()
        salary_expectations = collected_data.get('salary_expectations', '')
        work_format = collected_data.get('work_format', '')
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
        if work_format == 'remote' and 'remote' in job_text:
            result['score'] += 5
            result['strengths'].append("üè† –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ")
        elif work_format == 'office' and 'office' in job_text:
            result['score'] += 5
            result['strengths'].append("üè¢ –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ")
        elif work_format and work_format not in job_text:
            result['concerns'].append(f"üìç –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º ({work_format})")
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        if salary_expectations:
            result['score'] += 3
            result['strengths'].append("üí∞ –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—á—Ç–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑–µ")
        else:
            result['score'] += 2
            result['recommendations'].append("üí∞ –£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞")
        
        return result
    
    def _are_cities_nearby(self, city1: str, city2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–æ–≤"""
        nearby_cities = {
            'berlin': ['potsdam', 'brandenburg'],
            'munich': ['m√ºnchen', 'augsburg'],
            'hamburg': ['bremen', 'l√ºbeck'],
            'frankfurt': ['mainz', 'darmstadt', 'wiesbaden'],
            'cologne': ['k√∂ln', 'd√ºsseldorf', 'bonn'],
            'stuttgart': ['karlsruhe', 'heilbronn']
        }
        
        for main_city, nearby in nearby_cities.items():
            if (main_city in city1 and any(c in city2 for c in nearby)) or \
               (main_city in city2 and any(c in city1 for c in nearby)):
                return True
        
        return False
    
    def _extract_german_level_from_job(self, job_text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ
        patterns = [
            r'german.*?([abc][12])',
            r'deutsch.*?([abc][12])',
            r'([abc][12]).*german',
            r'([abc][12]).*deutsch'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, job_text, re.IGNORECASE)
            if match:
                return match.group(1).upper()
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if 'fluent german' in job_text or 'native german' in job_text:
            return 'C1'
        elif 'good german' in job_text or 'intermediate german' in job_text:
            return 'B2'
        elif 'basic german' in job_text:
            return 'A2'
        
        return None
    
    def _german_level_to_number(self, level: str) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ –≤ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        level_map = {'A1': 1, 'A2': 2, 'B1': 3, 'B2': 4, 'C1': 5, 'C2': 6}
        return level_map.get(level.upper(), 0)
    
    def _extract_experience_from_job(self, job_text: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—ã—Ç–∞
        patterns = [
            r'(\d+)\+?\s*years?\s*(?:of\s*)?experience',
            r'(\d+)\+?\s*jahre?\s*erfahrung',
            r'experience.*?(\d+)\+?\s*years?',
            r'minimum.*?(\d+)\+?\s*years?'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, job_text, re.IGNORECASE)
            if match:
                return int(match.group(1))
        
        return None
    
    def _generate_compatibility_summary(self, score: int, strengths: List[str], concerns: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if score >= 80:
            summary = f"üéØ –û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ({score}/100)! "
        elif score >= 65:
            summary = f"üëç –•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ({score}/100). "
        elif score >= 45:
            summary = f"ü§î –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ({score}/100). "
        else:
            summary = f"üìù –ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ({score}/100). "
        
        if strengths:
            summary += f"–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {len(strengths)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. "
        
        if concerns:
            summary += f"–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {len(concerns)} –º–æ–º–µ–Ω—Ç–æ–≤."
        
        return summary
    
    def _get_recommendation_reason(self,
                                  profile: Dict[str, Any],
                                  job: Dict[str, Any],
                                  compatibility: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        score = compatibility.get('score', 0)
        reasons = compatibility.get('reasons', [])
        
        if score >= 80:
            reason = "–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç! "
        elif score >= 60:
            reason = "–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. "
        else:
            reason = "–ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. "
        
        if reasons:
            reason += " ".join(reasons[:2])  # –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–∏—á–∏–Ω—ã
        
        return reason
    
    def _create_translation_prompt(self, job_data: Dict[str, Any], target_language: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
        
        lang_names = {
            'ru': '—Ä—É—Å—Å–∫–∏–π',
            'en': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
            'de': '–Ω–µ–º–µ—Ü–∫–∏–π',
            'uk': '—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
            'es': '–∏—Å–ø–∞–Ω—Å–∫–∏–π',
            'fr': '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'
        }
        
        lang_name = lang_names.get(target_language, target_language)
        
        return f"""–ü–µ—Ä–µ–≤–µ–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ {lang_name} —è–∑—ã–∫.

–ù–∞–∑–≤–∞–Ω–∏–µ: {job_data.get('title', '')}
–ö–æ–º–ø–∞–Ω–∏—è: {job_data.get('company', '')}
–õ–æ–∫–∞—Ü–∏—è: {job_data.get('location', '')}
–û–ø–∏—Å–∞–Ω–∏–µ: {job_data.get('description', '')}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {job_data.get('requirements', '')}
–ó–∞—Ä–ø–ª–∞—Ç–∞: {job_data.get('salary', '')}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "title": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
    "company": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
    "location": "–ª–æ–∫–∞—Ü–∏—è",
    "description": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "requirements": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
    "salary": "–∑–∞—Ä–ø–ª–∞—Ç–∞"
}}

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:"""
    
    def _parse_translation(self, translation: str, original_job: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            if translation and '{' in translation:
                json_str = translation[translation.find('{'):translation.rfind('}')+1]
                parsed = json.loads(json_str)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
                if 'title' in parsed and 'description' in parsed:
                    return parsed
                    
        except Exception as e:
            logger.error(f"Failed to parse translation: {e}")
        
        # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        return original_job
    
    def _create_demo_translation(self, job_data: Dict[str, Any], target_language: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ–º–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è fallback"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
        original_title = job_data.get('title', 'Software Developer')
        original_company = job_data.get('company', 'Tech Company')
        original_location = job_data.get('location', 'Berlin, Germany')
        original_description = job_data.get('description', 'Interesting software development position')
        original_requirements = job_data.get('requirements', 'Programming experience required')
        original_salary = job_data.get('salary', 'Competitive salary')
        
        translations = {
            'ru': {
                'title': self._translate_title_to_russian(original_title),
                'company': original_company,
                'location': self._translate_location_to_russian(original_location),
                'description': f"""üìã –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:
{self._translate_description_to_russian(original_description)}

üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏: {original_company} - –¥–∏–Ω–∞–º–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è –∫–æ–º–ø–∞–Ω–∏—è –≤ —Å—Ñ–µ—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

üéØ –ß—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:
‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
‚Ä¢ –î—Ä—É–∂–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤""",
                'requirements': f"""‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
{self._translate_requirements_to_russian(original_requirements)}

üìö –ë—É–¥–µ—Ç –ø–ª—é—Å–æ–º:
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ
‚Ä¢ –ó–Ω–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ñ–µ–ª–∞–Ω–∏–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏""",
                'salary': self._translate_salary_to_russian(original_salary)
            },
            'en': {
                'title': self._translate_title_to_english(original_title),
                'company': original_company,
                'location': original_location,
                'description': f"""üìã Position Description:
{self._enhance_english_description(original_description)}

üè¢ About Company: {original_company} - rapidly growing technology company.

üéØ What we offer:
‚Ä¢ Competitive salary package
‚Ä¢ Professional growth opportunities
‚Ä¢ Modern technologies and tools
‚Ä¢ Friendly team of professionals""",
                'requirements': f"""‚úÖ Requirements:
{self._enhance_english_requirements(original_requirements)}

üìö Nice to have:
‚Ä¢ Team collaboration experience
‚Ä¢ Knowledge of modern development methodologies
‚Ä¢ Willingness to learn new technologies""",
                'salary': original_salary
            },
            'de': {
                'title': self._translate_title_to_german(original_title),
                'company': original_company,
                'location': original_location,
                'description': f"""üìã Stellenbeschreibung:
{self._translate_description_to_german(original_description)}

üè¢ √úber das Unternehmen: {original_company} - dynamisch wachsendes Technologieunternehmen.

üéØ Was wir bieten:
‚Ä¢ Wettbewerbsf√§higes Gehalt
‚Ä¢ Berufliche Entwicklungsm√∂glichkeiten
‚Ä¢ Moderne Technologien und Tools
‚Ä¢ Freundliches Profi-Team""",
                'requirements': f"""‚úÖ Anforderungen:
{self._translate_requirements_to_german(original_requirements)}

üìö Von Vorteil:
‚Ä¢ Teamarbeit-Erfahrung
‚Ä¢ Kenntnisse moderner Entwicklungsmethoden
‚Ä¢ Lernbereitschaft f√ºr neue Technologien""",
                'salary': self._translate_salary_to_german(original_salary)
            }
        }
        
        target_translation = translations.get(target_language, translations['en'])
        
        return json.dumps({
            'title': target_translation['title'],
            'company': target_translation['company'],
            'location': target_translation['location'],
            'description': target_translation['description'],
            'requirements': target_translation['requirements'],
            'salary': target_translation['salary'],
            'translation_note': f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {self.languages.get(target_language, target_language)} –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        }, ensure_ascii=False, indent=2)
    
    def _translate_title_to_russian(self, title: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        common_translations = {
            'software developer': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û',
            'full stack developer': 'Fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            'frontend developer': 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            'backend developer': 'Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            'data scientist': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–∞–Ω–Ω—ã–º',
            'project manager': '–ü—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä',
            'ui/ux designer': 'UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä',
            'marketing manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É',
            'sales manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º'
        }
        
        title_lower = title.lower()
        for eng, rus in common_translations.items():
            if eng in title_lower:
                return rus
                
        return f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç - {title}"
    
    def _translate_description_to_russian(self, description: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        if 'developer' in description.lower():
            return """–ú—ã –∏—â–µ–º —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏. 
–í—ã –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —Ä–µ—à–µ–Ω–∏–π 
–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤."""
        elif 'designer' in description.lower():
            return """–ò—â–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–¥–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
–í—ã –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –≤–æ–ø–ª–æ—â–∞—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –≤ –∂–∏–∑–Ω—å
–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç—ã—Å—è—á–∏ –ª—é–¥–µ–π."""
        else:
            return """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏,
–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Ä–∞–±–æ—Ç—É –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ä–µ–¥–µ."""
    
    def _translate_requirements_to_russian(self, requirements: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        return """‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç 2-—Ö –ª–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏
‚Ä¢ –ó–Ω–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û
‚Ä¢ –£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ
‚Ä¢ –ó–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —á—Ç–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    def _translate_location_to_russian(self, location: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        city_translations = {
            'berlin': '–ë–µ—Ä–ª–∏–Ω',
            'munich': '–ú—é–Ω—Ö–µ–Ω',
            'hamburg': '–ì–∞–º–±—É—Ä–≥',
            'frankfurt': '–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç',
            'cologne': '–ö—ë–ª—å–Ω',
            'stuttgart': '–®—Ç—É—Ç–≥–∞—Ä—Ç'
        }
        
        location_lower = location.lower()
        for eng, rus in city_translations.items():
            if eng in location_lower:
                return location.replace(eng.title(), rus)
                
        return location
    
    def _translate_salary_to_russian(self, salary: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        if 'competitive' in salary.lower():
            return '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (45,000-80,000 EUR/–≥–æ–¥)'
        return salary
    
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –Ω–µ–º–µ—Ü–∫–æ–≥–æ
    def _translate_title_to_english(self, title: str) -> str:
        return title  # Already in English most likely
    
    def _enhance_english_description(self, description: str) -> str:
        return f"{description}\n\nJoin our innovative team and work on cutting-edge projects using the latest technologies."
    
    def _enhance_english_requirements(self, requirements: str) -> str:
        return f"{requirements}\n‚Ä¢ 2+ years of relevant experience\n‚Ä¢ Strong problem-solving skills\n‚Ä¢ Team collaboration abilities"
    
    def _translate_title_to_german(self, title: str) -> str:
        german_translations = {
            'software developer': 'Softwareentwickler',
            'full stack developer': 'Fullstack-Entwickler',
            'frontend developer': 'Frontend-Entwickler',
            'backend developer': 'Backend-Entwickler',
            'project manager': 'Projektmanager',
            'designer': 'Designer'
        }
        
        title_lower = title.lower()
        for eng, ger in german_translations.items():
            if eng in title_lower:
                return ger
                
        return title
    
    def _translate_description_to_german(self, description: str) -> str:
        return f"{description}\n\nWerden Sie Teil unseres innovativen Teams und arbeiten Sie an zukunftsweisenden Projekten."
    
    def _translate_requirements_to_german(self, requirements: str) -> str:
        return f"{requirements}\n‚Ä¢ Mindestens 2 Jahre Berufserfahrung\n‚Ä¢ Teamf√§higkeit\n‚Ä¢ Lernbereitschaft"
    
    def _translate_salary_to_german(self, salary: str) -> str:
        if 'competitive' in salary.lower():
            return 'Attraktives Gehalt (45.000-80.000 EUR/Jahr)'
        return salary
    
    def _get_fallback_message(self, language: str) -> str:
        """Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        messages = {
            'ru': "–ü—Ä–∏–≤–µ—Ç! –Ø AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä, –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –∏—â–µ—à—å?",
            'en': "Hi! I'm an AI recruiter, I'll help find the perfect job in Germany. Tell me what job you're looking for?",
            'de': "Hallo! Ich bin ein AI-Recruiter und helfe dir den perfekten Job in Deutschland zu finden. Erz√§hl mir, welchen Job du suchst?"
        }
        
        return messages.get(language, messages['ru'])
    
    def _get_fallback_message_for_stage(self, stage: str, language: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–µ fallback —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞"""
        
        messages = {
            'ru': {
                'initial': """üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∏ –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. 

–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ:
‚Ä¢ –ö–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏—â–µ—à—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –¥–∏–∑–∞–π–Ω–µ—Ä, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥)
‚Ä¢ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?
‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞? (A1-C2)

–ù–∞—á–Ω–∏ —Å –ª—é–±–æ–≥–æ –ø—É–Ω–∫—Ç–∞! üöÄ""",
                
                'skills': """üíº –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ:

‚Ä¢ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ?
‚Ä¢ –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–Ω–∞–µ—à—å?
‚Ä¢ –ï—Å—Ç—å –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã?
‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–ª?

–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ - —Ç–µ–º –ª—É—á—à–µ –ø–æ–¥–±–µ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–∏! ‚ö°""",
                
                'preferences': """‚öôÔ∏è –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:

‚Ä¢ –ö–∞–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞? (–æ—Ç ... –¥–æ ... EUR)
‚Ä¢ –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —á–∞—Å—Ç–∏—á–Ω—É—é –∑–∞–Ω—è—Ç–æ—Å—Ç—å?
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Å?
‚Ä¢ –ï—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏? (—Å—Ç–∞—Ä—Ç–∞–ø/–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è)

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–π–¥—É –∏–¥–µ–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! üéØ""",
                
                'complete': """üéâ –ü—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤! –°–µ–π—á–∞—Å –∏—â—É –ª—É—á—à–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è –Ω–∞–π–¥—É:
‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
‚úÖ –†–∞–±–æ—Ç—É —Å –Ω—É–∂–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –Ω–µ–º–µ—Ü–∫–æ–≥–æ
‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–∏–ª–∫—É

–¢–∞–∫–∂–µ –º–æ–≥—É:
üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª—é–±—É—é –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Ä—É—Å—Å–∫–∏–π
üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
‚úçÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ

–í–æ—Ç —á—Ç–æ –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è:"""
            },
            'en': {
                'initial': """üëã Hi! I'm an AI recruiter helping find perfect jobs in Germany.

Tell me:
‚Ä¢ What position are you looking for? (e.g., developer, designer, marketer)
‚Ä¢ Which city would you like to work in?
‚Ä¢ What's your German level? (A1-C2)

Start with any point! üöÄ""",
                
                'skills': """üíº Great! Now tell me about your experience:

‚Ä¢ How many years have you worked in this field?
‚Ä¢ What technologies/tools do you know?
‚Ä¢ Do you have education or certifications?
‚Ä¢ What projects have you implemented?

The more details, the better I can match jobs! ‚ö°""",
                
                'preferences': """‚öôÔ∏è Almost ready! Final details:

‚Ä¢ What salary range interests you? (from ... to ... EUR)
‚Ä¢ Full-time or part-time preference?
‚Ä¢ Interested in remote work or office only?
‚Ä¢ Company size preference? (startup/corporation)

After this, I'll find perfect matches! üéØ""",
                
                'complete': """üéâ Profile ready! Searching for best jobs...

Based on your data, I'll find:
‚úÖ Jobs matching your requirements
‚úÖ Positions in your chosen city
‚úÖ Work with your German level
‚úÖ Matching salary range

I can also:
üîÑ Translate any job to English
üìä Analyze compatibility
‚úçÔ∏è Create cover letters

Here's what I found for you:"""
            },
            'de': {
                'initial': """üëã Hallo! Ich bin ein AI-Recruiter und helfe bei der Jobsuche in Deutschland.

Erz√§hl mir:
‚Ä¢ Welche Position suchst du? (z.B. Entwickler, Designer, Marketer)
‚Ä¢ In welcher Stadt m√∂chtest du arbeiten?
‚Ä¢ Wie ist dein Deutschniveau? (A1-C2)

Fang mit einem Punkt an! üöÄ""",
                
                'skills': """üíº Toll! Jetzt erz√§hl von deiner Erfahrung:

‚Ä¢ Wie viele Jahre Berufserfahrung hast du?
‚Ä¢ Welche Technologien/Tools beherrschst du?
‚Ä¢ Hast du Ausbildung oder Zertifikate?
‚Ä¢ Welche Projekte hast du umgesetzt?

Je mehr Details, desto besser kann ich Jobs finden! ‚ö°""",
                
                'preferences': """‚öôÔ∏è Fast fertig! Letzte Details:

‚Ä¢ Welches Gehalt stellst du dir vor? (von ... bis ... EUR)
‚Ä¢ Vollzeit oder Teilzeit?
‚Ä¢ Remote-Arbeit oder nur B√ºro?
‚Ä¢ Pr√§ferenz f√ºr Unternehmensgr√∂√üe? (Startup/Konzern)

Danach finde ich perfekte Stellen! üéØ""",
                
                'complete': """üéâ Profil fertig! Suche beste Jobs...

Basierend auf deinen Daten finde ich:
‚úÖ Jobs mit passenden Anforderungen
‚úÖ Stellen in deiner gew√§hlten Stadt
‚úÖ Arbeit mit deinem Deutschniveau
‚úÖ Passende Gehaltsvorstellungen

Ich kann auch:
üîÑ Jobs ins Deutsche √ºbersetzen
üìä Kompatibilit√§t analysieren
‚úçÔ∏è Anschreiben erstellen

Hier ist was ich f√ºr dich gefunden habe:"""
            }
        }
        
        return messages.get(language, messages['ru']).get(stage, messages['ru']['initial'])
    
    def _get_completion_message(self, language: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        messages = {
            'ru': """üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤!

–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º:

üéØ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –í–ê–ö–ê–ù–°–ò–ô**
‚Ä¢ –ü–æ–¥–æ–±—Ä–∞–ª –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
‚Ä¢ –£–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏

üí° **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
üîÑ **–ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–π** - –ø–µ—Ä–µ–≤–µ–¥—É –ª—é–±—É—é –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Ä—É—Å—Å–∫–∏–π
üìä **–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏** - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤–∞—à–∏—Ö —à–∞–Ω—Å–æ–≤
‚úçÔ∏è **–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞** - —Å–æ—Å—Ç–∞–≤–ª—é –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
üìù **–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ** - –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—é

‚≠ê –í–æ—Ç –ª—É—á—à–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:""",
            
            'en': """üéâ Excellent! Your profile is ready!

Now I can offer you:

üéØ **PERSONALIZED JOB RECOMMENDATIONS**
‚Ä¢ Selected best matches for your profile
‚Ä¢ Analyzed compatibility with each position
‚Ä¢ Provided specific action steps for each job

üí° **ADDITIONAL FEATURES:**
üîÑ **Job Translation** - translate any job to English
üìä **Compatibility Analysis** - detailed breakdown of your chances
‚úçÔ∏è **Cover Letters** - create personalized letters for each job
üìù **Resume Improvement** - advice on adapting to specific jobs

‚≠ê Here are the best jobs specifically for you:""",
            
            'de': """üéâ Ausgezeichnet! Ihr Profil ist fertig!

Jetzt kann ich Ihnen anbieten:

üéØ **PERSONALISIERTE STELLENEMPFEHLUNGEN**
‚Ä¢ Beste √úbereinstimmungen f√ºr Ihr Profil ausgew√§hlt
‚Ä¢ Kompatibilit√§t mit jeder Position analysiert
‚Ä¢ Spezifische Handlungsschritte f√ºr jede Stelle bereitgestellt

üí° **ZUS√ÑTZLICHE FUNKTIONEN:**
üîÑ **Stellen√ºbersetzung** - √ºbersetze jede Stelle ins Deutsche
üìä **Kompatibilit√§tsanalyse** - detaillierte Aufschl√ºsselung Ihrer Chancen
‚úçÔ∏è **Anschreiben** - erstelle personalisierte Briefe f√ºr jede Stelle
üìù **Lebenslauf-Verbesserung** - Ratschl√§ge zur Anpassung an spezifische Jobs

‚≠ê Hier sind die besten Jobs speziell f√ºr Sie:"""
        }
        
        return messages.get(language, messages['ru'])