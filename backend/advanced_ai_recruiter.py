"""
üéØ Advanced AI Recruiter Service - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
–ò–¥–µ–∞–ª—å–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∫–æ—Ç–æ—Ä—ã–π:
- –£–º–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ 3-5 –≤–æ–ø—Ä–æ—Å–æ–≤
- –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –î–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –ª—é–±–æ–π —è–∑—ã–∫
- –°–æ–∑–¥–∞–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
"""

import logging
import json
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from modern_llm_manager import modern_llm_manager
from job_search_service import JobSearchService
from german_cities_service import GermanCitiesService

logger = logging.getLogger(__name__)

class AdvancedAIRecruiter:
    def __init__(self, database):
        self.db = database
        self.job_search_service = JobSearchService()
        self.cities_service = GermanCitiesService()
        
        # –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ - —Å–æ–∫—Ä–∞—â–µ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        self.stages = {
            'initial': {'name': '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', 'weight': 20},
            'skills': {'name': '–ù–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç', 'weight': 40},
            'preferences': {'name': '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', 'weight': 30},
            'complete': {'name': '–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É', 'weight': 100}
        }
        
        # –Ø–∑—ã–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        self.languages = {
            'ru': '—Ä—É—Å—Å–∫–∏–π',
            'en': 'english',
            'de': 'deutsch',
            'uk': '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'es': 'espa√±ol',
            'fr': 'fran√ßais'
        }
    
    async def start_conversation(self,
                                user_id: str,
                                user_language: str = 'ru',
                                user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
        """
        try:
            logger.info(f"Starting advanced AI recruiter for user {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            existing_profile = await self.db.get_ai_recruiter_profile(user_id)
            
            if existing_profile:
                # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
                return await self._resume_conversation(existing_profile, user_language, user_providers)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = self._create_initial_profile(user_id, user_language)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ai_message = await self._generate_smart_message(
                profile, 'initial', None, user_language, user_providers
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile['conversation_history'].append({
                'timestamp': datetime.now().isoformat(),
                'stage': 'initial',
                'ai_message': ai_message,
                'user_message': None
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            await self.db.save_ai_recruiter_profile(user_id, profile)
            
            return {
                'status': 'success',
                'stage': 'initial',
                'ai_message': ai_message,
                'profile': profile,
                'progress': 0,
                'is_complete': False
            }
            
        except Exception as e:
            logger.error(f"Failed to start AI recruiter: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {str(e)}',
                'fallback_message': self._get_fallback_message(user_language)
            }
    
    async def continue_conversation(self,
                                   user_id: str,
                                   user_message: str,
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üí¨ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        try:
            logger.info(f"Continuing conversation for user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ.',
                    'restart_required': True
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            extracted_data = await self._analyze_user_response(
                user_message, profile, user_providers
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile['collected_data'].update(extracted_data)
            profile['last_interaction'] = datetime.now().isoformat()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            next_stage = self._get_next_stage(profile)
            profile['stage'] = next_stage
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            ai_message = await self._generate_smart_message(
                profile, next_stage, user_message, profile['language'], user_providers
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            profile['conversation_history'].append({
                'timestamp': datetime.now().isoformat(),
                'stage': next_stage,
                'ai_message': ai_message,
                'user_message': user_message,
                'extracted_data': extracted_data
            })
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = self._calculate_progress(profile)
            is_complete = next_stage == 'complete'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω
            recommendations = None
            if is_complete:
                recommendations = await self._generate_job_recommendations(profile, user_providers)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await self.db.save_ai_recruiter_profile(user_id, profile)
            
            return {
                'status': 'success',
                'stage': next_stage,
                'ai_message': ai_message,
                'profile': profile,
                'progress': progress,
                'is_complete': is_complete,
                'recommendations': recommendations
            }
            
        except Exception as e:
            logger.error(f"Failed to continue conversation: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {str(e)}'
            }
    
    async def get_job_recommendations(self,
                                     user_id: str,
                                     user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞–±–æ—Ç—ã
        """
        try:
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            recommendations = await self._generate_job_recommendations(profile, user_providers)
            
            return {
                'status': 'success',
                'recommendations': recommendations,
                'profile_completeness': self._calculate_progress(profile)
            }
            
        except Exception as e:
            logger.error(f"Failed to get recommendations: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}'
            }
    
    async def translate_job(self,
                           job_data: Dict[str, Any],
                           target_language: str,
                           user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üåç –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫
        """
        try:
            logger.info(f"Translating job to {target_language}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            prompt = self._create_translation_prompt(job_data, target_language)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
            if user_providers:
                provider, model, api_key = user_providers[0]
                translation = await modern_llm_manager.generate_content(
                    prompt=prompt,
                    provider=provider,
                    model=model,
                    api_key=api_key,
                    max_tokens=2000
                )
            else:
                translation = self._create_demo_translation(job_data, target_language)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            translated_job = self._parse_translation(translation, job_data)
            
            return {
                'status': 'success',
                'original_job': job_data,
                'translated_job': translated_job,
                'target_language': target_language
            }
            
        except Exception as e:
            logger.error(f"Failed to translate job: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}',
                'fallback_translation': job_data
            }
    
    async def analyze_job_compatibility(self,
                                       user_id: str,
                                       job_data: Dict[str, Any],
                                       user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π
        """
        try:
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            analysis = await self._analyze_compatibility(profile, job_data, user_providers)
            
            return {
                'status': 'success',
                'analysis': analysis,
                'job_title': job_data.get('title', 'Unknown'),
                'compatibility_score': analysis.get('score', 0)
            }
            
        except Exception as e:
            logger.error(f"Failed to analyze compatibility: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {str(e)}'
            }
    
    # =====================================================
    # –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´
    # =====================================================
    
    def _create_initial_profile(self, user_id: str, language: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        return {
            'user_id': user_id,
            'language': language,
            'stage': 'initial',
            'collected_data': {},
            'conversation_history': [],
            'created_at': datetime.now().isoformat(),
            'last_interaction': datetime.now().isoformat()
        }
    
    async def _resume_conversation(self,
                                  profile: Dict[str, Any],
                                  language: str,
                                  user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        current_stage = profile.get('stage', 'initial')
        
        if current_stage == 'complete':
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = await self._generate_job_recommendations(profile, user_providers)
            return {
                'status': 'success',
                'stage': 'complete',
                'ai_message': self._get_completion_message(language),
                'profile': profile,
                'progress': 100,
                'is_complete': True,
                'recommendations': recommendations
            }
        
        # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
        ai_message = await self._generate_smart_message(
            profile, current_stage, None, language, user_providers
        )
        
        return {
            'status': 'success',
            'stage': current_stage,
            'ai_message': ai_message,
            'profile': profile,
            'progress': self._calculate_progress(profile),
            'is_complete': False
        }
    
    async def _generate_smart_message(self,
                                     profile: Dict[str, Any],
                                     stage: str,
                                     user_message: Optional[str],
                                     language: str,
                                     user_providers: List[Tuple[str, str, str]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = self._create_context_prompt(profile, stage, user_message, language)
        
        if user_providers:
            try:
                provider, model, api_key = user_providers[0]
                ai_message = await modern_llm_manager.generate_content(
                    prompt=prompt,
                    provider=provider,
                    model=model,
                    api_key=api_key,
                    max_tokens=500
                )
                
                if ai_message:
                    return ai_message.strip()
            except Exception as e:
                logger.error(f"Failed to generate AI message: {e}")
        
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏—è
        return self._get_fallback_message_for_stage(stage, language)
    
    def _create_context_prompt(self,
                              profile: Dict[str, Any],
                              stage: str,
                              user_message: Optional[str],
                              language: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        collected_data = profile.get('collected_data', {})
        history_summary = self._summarize_conversation_history(profile)
        
        prompts = {
            'ru': {
                'initial': f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. 
                
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∞–∫—Å–∏–º—É–º 3-5 –≤–æ–ø—Ä–æ—Å–æ–≤) —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å:
- –ö–∞–∫—É—é —Ä–∞–±–æ—Ç—É –∏—â–µ—Ç —á–µ–ª–æ–≤–µ–∫
- –ö–∞–∫–æ–π —É –Ω–µ–≥–æ –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏
- –ì–¥–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
- –£—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞

–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º. –ù–ï –≥–æ–≤–æ—Ä–∏ "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" –ø–æ–≤—Ç–æ—Ä–Ω–æ.

{history_summary}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):""",
                
                'skills': f"""–ü—Ä–æ–¥–æ–ª–∂–∏ –∏–Ω—Ç–µ—Ä–≤—å—é. –£–∂–µ —Å–æ–±—Ä–∞–Ω–æ: {collected_data}
                
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: "{user_message}"

–¢–µ–ø–µ—Ä—å —É–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –Ω–∞–≤—ã–∫–∞—Ö –∏ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã. –ó–∞–¥–∞–π –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):""",
                
                'preferences': f"""–ü—Ä–æ–¥–æ–ª–∂–∏ –∏–Ω—Ç–µ—Ä–≤—å—é. –£–∂–µ —Å–æ–±—Ä–∞–Ω–æ: {collected_data}
                
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: "{user_message}"

–¢–µ–ø–µ—Ä—å —É–∑–Ω–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ (–∑–∞—Ä–ø–ª–∞—Ç–∞, –≥—Ä–∞—Ñ–∏–∫, –∫–æ–º–ø–∞–Ω–∏—è). –ó–∞–¥–∞–π –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):""",
                
                'complete': f"""–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–±—Ä–∞–Ω–æ: {collected_data}
                
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: "{user_message}"

–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–æ–∏—Å–∫ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–≥–æ.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):"""
            },
            'en': {
                'initial': f"""You are a professional AI recruiter helping find the perfect job in Germany.
                
Your task is to conduct a short interview (maximum 3-5 questions) to learn:
- What job they're looking for
- Their experience and skills
- Where they want to work
- German language level

Be friendly, professional, and efficient. DON'T say "Hello" repeatedly.

{history_summary}

Your response (in English):""",
                
                'skills': f"""Continue the interview. Already collected: {collected_data}
                
User responded: "{user_message}"

Now learn details about skills and work experience. Ask ONE specific question.

Your response (in English):""",
                
                'preferences': f"""Continue the interview. Already collected: {collected_data}
                
User responded: "{user_message}"

Now learn work preferences (salary, schedule, company). Ask ONE specific question.

Your response (in English):""",
                
                'complete': f"""Interview completed! Collected: {collected_data}
                
User responded: "{user_message}"

Thank the user and say you're starting to search for perfect job opportunities specifically for them.

Your response (in English):"""
            }
        }
        
        return prompts.get(language, prompts['ru']).get(stage, prompts['ru']['initial'])
    
    def _summarize_conversation_history(self, profile: Dict[str, Any]) -> str:
        """–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        history = profile.get('conversation_history', [])
        if not history:
            return "–†–∞–∑–≥–æ–≤–æ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è."
        
        if len(history) == 1:
            return "–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        
        return f"–£–∂–µ –±—ã–ª–æ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—á—Ç–µ–Ω—ã."
    
    async def _analyze_user_response(self,
                                   user_message: str,
                                   profile: Dict[str, Any],
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        current_stage = profile.get('stage', 'initial')
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        extracted_data = {}
        
        if current_stage == 'initial':
            # –ò—â–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –≥–æ—Ä–æ–¥, —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞
            extracted_data.update(self._extract_initial_data(user_message))
        
        elif current_stage == 'skills':
            # –ò—â–µ–º –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç
            extracted_data.update(self._extract_skills_data(user_message))
        
        elif current_stage == 'preferences':
            # –ò—â–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            extracted_data.update(self._extract_preferences_data(user_message))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å LLM, –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if user_providers:
            try:
                ai_analysis = await self._ai_analyze_response(user_message, current_stage, user_providers)
                extracted_data.update(ai_analysis)
            except Exception as e:
                logger.error(f"Failed AI analysis: {e}")
        
        return extracted_data
    
    def _extract_initial_data(self, message: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = {}
        
        # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ
        message_lower = message.lower()
        for level in ['a1', 'a2', 'b1', 'b2', 'c1', 'c2']:
            if level in message_lower:
                data['german_level'] = level.upper()
                break
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        cities = ['berlin', 'm√ºnchen', 'hamburg', 'k√∂ln', 'frankfurt', 'd√ºsseldorf', 'stuttgart']
        for city in cities:
            if city in message_lower:
                data['preferred_city'] = city.title()
                break
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        professions = ['developer', 'engineer', 'manager', 'designer', 'analyst', 'consultant']
        for prof in professions:
            if prof in message_lower:
                data['profession'] = prof.title()
                break
        
        return data
    
    def _extract_skills_data(self, message: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö"""
        data = {}
        
        # –ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
        tech_skills = ['python', 'java', 'javascript', 'react', 'angular', 'node.js', 'docker']
        found_skills = []
        
        message_lower = message.lower()
        for skill in tech_skills:
            if skill in message_lower:
                found_skills.append(skill.title())
        
        if found_skills:
            data['technical_skills'] = found_skills
        
        # –ü–æ–∏—Å–∫ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
        if '–≥–æ–¥' in message_lower or '–ª–µ—Ç' in message_lower:
            data['experience_mentioned'] = True
        
        return data
    
    def _extract_preferences_data(self, message: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö"""
        data = {}
        
        message_lower = message.lower()
        
        # –ü–æ–∏—Å–∫ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π
        if '–µ–≤—Ä–æ' in message_lower or '‚Ç¨' in message_lower:
            data['salary_mentioned'] = True
        
        # –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
        if 'remote' in message_lower or '—É–¥–∞–ª–µ–Ω–Ω–æ' in message_lower:
            data['work_format'] = 'remote'
        elif 'office' in message_lower or '–æ—Ñ–∏—Å' in message_lower:
            data['work_format'] = 'office'
        
        return data
    
    async def _ai_analyze_response(self,
                                  user_message: str,
                                  stage: str,
                                  user_providers: List[Tuple[str, str, str]]) -> Dict[str, Any]:
        """AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        
–≠—Ç–∞–ø: {stage}
–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"

–í–µ—Ä–Ω–∏ JSON —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ù–∞–ø—Ä–∏–º–µ—Ä:
{{"profession": "Software Developer", "german_level": "B1", "city": "Berlin", "experience": "3 years"}}

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:"""
        
        try:
            provider, model, api_key = user_providers[0]
            result = await modern_llm_manager.generate_content(
                prompt=prompt,
                provider=provider,
                model=model,
                api_key=api_key,
                max_tokens=200
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
            if result and '{' in result:
                json_str = result[result.find('{'):result.rfind('}')+1]
                return json.loads(json_str)
                
        except Exception as e:
            logger.error(f"Failed to AI analyze response: {e}")
        
        return {}
    
    def _get_next_stage(self, profile: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
        current_stage = profile.get('stage', 'initial')
        collected_data = profile.get('collected_data', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if current_stage == 'initial':
            if len(collected_data) >= 2:  # –•–æ—Ç—è –±—ã 2 –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                return 'skills'
            return 'initial'
        
        elif current_stage == 'skills':
            if len(collected_data) >= 4:  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—Ä–∞–Ω–æ
                return 'preferences'
            return 'skills'
        
        elif current_stage == 'preferences':
            return 'complete'
        
        return 'complete'
    
    def _calculate_progress(self, profile: Dict[str, Any]) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        stage = profile.get('stage', 'initial')
        collected_data = profile.get('collected_data', {})
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–∞–ø–∞–º
        stage_progress = {
            'initial': 20,
            'skills': 50,
            'preferences': 80,
            'complete': 100
        }
        
        base_progress = stage_progress.get(stage, 0)
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_bonus = min(len(collected_data) * 5, 20)
        
        return min(base_progress + data_bonus, 100)
    
    async def _generate_job_recommendations(self,
                                          profile: Dict[str, Any],
                                          user_providers: List[Tuple[str, str, str]] = None) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            collected_data = profile.get('collected_data', {})
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_params = {
                'location': collected_data.get('preferred_city', 'Berlin'),
                'language_level': collected_data.get('german_level', 'B1'),
                'search_query': collected_data.get('profession', 'developer')
            }
            
            # –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            jobs_result = await self.job_search_service.search_jobs(**search_params)
            
            if jobs_result.get('status') == 'success':
                jobs = jobs_result.get('jobs', [])[:5]  # –¢–æ–ø 5 –≤–∞–∫–∞–Ω—Å–∏–π
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
                recommendations = []
                for job in jobs:
                    compatibility = await self._analyze_compatibility(profile, job, user_providers)
                    recommendations.append({
                        'job': job,
                        'compatibility': compatibility,
                        'recommendation_reason': self._get_recommendation_reason(profile, job, compatibility)
                    })
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                recommendations.sort(key=lambda x: x['compatibility'].get('score', 0), reverse=True)
                
                return recommendations
            
        except Exception as e:
            logger.error(f"Failed to generate recommendations: {e}")
        
        return []
    
    async def _analyze_compatibility(self,
                                   profile: Dict[str, Any],
                                   job: Dict[str, Any],
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π"""
        
        collected_data = profile.get('collected_data', {})
        
        # –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        score = 50
        reasons = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
        job_location = job.get('location', '').lower()
        preferred_city = collected_data.get('preferred_city', '').lower()
        
        if preferred_city and preferred_city in job_location:
            score += 20
            reasons.append(f"–í–∞–∫–∞–Ω—Å–∏—è –≤ –∂–µ–ª–∞–µ–º–æ–º –≥–æ—Ä–æ–¥–µ: {job_location}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        job_title = job.get('title', '').lower()
        profession = collected_data.get('profession', '').lower()
        
        if profession and profession in job_title:
            score += 15
            reasons.append(f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {profession}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤—ã–∫–æ–≤
        job_description = job.get('description', '').lower()
        technical_skills = collected_data.get('technical_skills', [])
        
        matching_skills = []
        for skill in technical_skills:
            if skill.lower() in job_description:
                matching_skills.append(skill)
        
        if matching_skills:
            score += len(matching_skills) * 5
            reasons.append(f"–°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞–≤—ã–∫–∏: {', '.join(matching_skills)}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
        score = min(score, 100)
        
        return {
            'score': score,
            'reasons': reasons,
            'analysis_date': datetime.now().isoformat()
        }
    
    def _get_recommendation_reason(self,
                                  profile: Dict[str, Any],
                                  job: Dict[str, Any],
                                  compatibility: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        score = compatibility.get('score', 0)
        reasons = compatibility.get('reasons', [])
        
        if score >= 80:
            reason = "–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç! "
        elif score >= 60:
            reason = "–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. "
        else:
            reason = "–ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. "
        
        if reasons:
            reason += " ".join(reasons[:2])  # –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–∏—á–∏–Ω—ã
        
        return reason
    
    def _create_translation_prompt(self, job_data: Dict[str, Any], target_language: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
        
        lang_names = {
            'ru': '—Ä—É—Å—Å–∫–∏–π',
            'en': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
            'de': '–Ω–µ–º–µ—Ü–∫–∏–π',
            'uk': '—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
            'es': '–∏—Å–ø–∞–Ω—Å–∫–∏–π',
            'fr': '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'
        }
        
        lang_name = lang_names.get(target_language, target_language)
        
        return f"""–ü–µ—Ä–µ–≤–µ–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ {lang_name} —è–∑—ã–∫.

–ù–∞–∑–≤–∞–Ω–∏–µ: {job_data.get('title', '')}
–ö–æ–º–ø–∞–Ω–∏—è: {job_data.get('company', '')}
–õ–æ–∫–∞—Ü–∏—è: {job_data.get('location', '')}
–û–ø–∏—Å–∞–Ω–∏–µ: {job_data.get('description', '')}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {job_data.get('requirements', '')}
–ó–∞—Ä–ø–ª–∞—Ç–∞: {job_data.get('salary', '')}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "title": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
    "company": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
    "location": "–ª–æ–∫–∞—Ü–∏—è",
    "description": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "requirements": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
    "salary": "–∑–∞—Ä–ø–ª–∞—Ç–∞"
}}

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:"""
    
    def _parse_translation(self, translation: str, original_job: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            if translation and '{' in translation:
                json_str = translation[translation.find('{'):translation.rfind('}')+1]
                parsed = json.loads(json_str)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
                if 'title' in parsed and 'description' in parsed:
                    return parsed
                    
        except Exception as e:
            logger.error(f"Failed to parse translation: {e}")
        
        # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        return original_job
    
    def _create_demo_translation(self, job_data: Dict[str, Any], target_language: str) -> str:
        """–î–µ–º–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è fallback"""
        
        translations = {
            'ru': {
                'title': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è',
                'company': job_data.get('company', '–ö–æ–º–ø–∞–Ω–∏—è'),
                'location': job_data.get('location', '–ì–µ—Ä–º–∞–Ω–∏—è'),
                'description': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –¥–∏–Ω–∞–º–∏—á–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.',
                'requirements': '–û–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.',
                'salary': job_data.get('salary', '–û–±—Å—É–∂–¥–∞–µ—Ç—Å—è')
            },
            'en': {
                'title': 'Software Developer',
                'company': job_data.get('company', 'Company'),
                'location': job_data.get('location', 'Germany'),
                'description': 'Exciting developer position in a dynamic team.',
                'requirements': 'Programming experience, knowledge of programming languages.',
                'salary': job_data.get('salary', 'Competitive')
            }
        }
        
        demo_data = translations.get(target_language, translations['en'])
        return json.dumps(demo_data, ensure_ascii=False, indent=2)
    
    def _get_fallback_message(self, language: str) -> str:
        """Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        messages = {
            'ru': "–ü—Ä–∏–≤–µ—Ç! –Ø AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä, –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –∏—â–µ—à—å?",
            'en': "Hi! I'm an AI recruiter, I'll help find the perfect job in Germany. Tell me what job you're looking for?",
            'de': "Hallo! Ich bin ein AI-Recruiter und helfe dir den perfekten Job in Deutschland zu finden. Erz√§hl mir, welchen Job du suchst?"
        }
        
        return messages.get(language, messages['ru'])
    
    def _get_fallback_message_for_stage(self, stage: str, language: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–µ fallback —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞"""
        
        messages = {
            'ru': {
                'initial': """üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∏ –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. 

–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ:
‚Ä¢ –ö–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏—â–µ—à—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –¥–∏–∑–∞–π–Ω–µ—Ä, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥)
‚Ä¢ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?
‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞? (A1-C2)

–ù–∞—á–Ω–∏ —Å –ª—é–±–æ–≥–æ –ø—É–Ω–∫—Ç–∞! üöÄ""",
                
                'skills': """üíº –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ:

‚Ä¢ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ?
‚Ä¢ –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–Ω–∞–µ—à—å?
‚Ä¢ –ï—Å—Ç—å –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã?
‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–ª?

–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ - —Ç–µ–º –ª—É—á—à–µ –ø–æ–¥–±–µ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–∏! ‚ö°""",
                
                'preferences': """‚öôÔ∏è –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:

‚Ä¢ –ö–∞–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞? (–æ—Ç ... –¥–æ ... EUR)
‚Ä¢ –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —á–∞—Å—Ç–∏—á–Ω—É—é –∑–∞–Ω—è—Ç–æ—Å—Ç—å?
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Å?
‚Ä¢ –ï—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏? (—Å—Ç–∞—Ä—Ç–∞–ø/–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è)

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–π–¥—É –∏–¥–µ–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! üéØ""",
                
                'complete': """üéâ –ü—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤! –°–µ–π—á–∞—Å –∏—â—É –ª—É—á—à–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è –Ω–∞–π–¥—É:
‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
‚úÖ –†–∞–±–æ—Ç—É —Å –Ω—É–∂–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –Ω–µ–º–µ—Ü–∫–æ–≥–æ
‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–∏–ª–∫—É

–¢–∞–∫–∂–µ –º–æ–≥—É:
üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª—é–±—É—é –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Ä—É—Å—Å–∫–∏–π
üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
‚úçÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ

–í–æ—Ç —á—Ç–æ –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è:"""
            },
            'en': {
                'initial': """üëã Hi! I'm an AI recruiter helping find perfect jobs in Germany.

Tell me:
‚Ä¢ What position are you looking for? (e.g., developer, designer, marketer)
‚Ä¢ Which city would you like to work in?
‚Ä¢ What's your German level? (A1-C2)

Start with any point! üöÄ""",
                
                'skills': """üíº Great! Now tell me about your experience:

‚Ä¢ How many years have you worked in this field?
‚Ä¢ What technologies/tools do you know?
‚Ä¢ Do you have education or certifications?
‚Ä¢ What projects have you implemented?

The more details, the better I can match jobs! ‚ö°""",
                
                'preferences': """‚öôÔ∏è Almost ready! Final details:

‚Ä¢ What salary range interests you? (from ... to ... EUR)
‚Ä¢ Full-time or part-time preference?
‚Ä¢ Interested in remote work or office only?
‚Ä¢ Company size preference? (startup/corporation)

After this, I'll find perfect matches! üéØ""",
                
                'complete': """üéâ Profile ready! Searching for best jobs...

Based on your data, I'll find:
‚úÖ Jobs matching your requirements
‚úÖ Positions in your chosen city
‚úÖ Work with your German level
‚úÖ Matching salary range

I can also:
üîÑ Translate any job to English
üìä Analyze compatibility
‚úçÔ∏è Create cover letters

Here's what I found for you:"""
            },
            'de': {
                'initial': """üëã Hallo! Ich bin ein AI-Recruiter und helfe bei der Jobsuche in Deutschland.

Erz√§hl mir:
‚Ä¢ Welche Position suchst du? (z.B. Entwickler, Designer, Marketer)
‚Ä¢ In welcher Stadt m√∂chtest du arbeiten?
‚Ä¢ Wie ist dein Deutschniveau? (A1-C2)

Fang mit einem Punkt an! üöÄ""",
                
                'skills': """üíº Toll! Jetzt erz√§hl von deiner Erfahrung:

‚Ä¢ Wie viele Jahre Berufserfahrung hast du?
‚Ä¢ Welche Technologien/Tools beherrschst du?
‚Ä¢ Hast du Ausbildung oder Zertifikate?
‚Ä¢ Welche Projekte hast du umgesetzt?

Je mehr Details, desto besser kann ich Jobs finden! ‚ö°""",
                
                'preferences': """‚öôÔ∏è Fast fertig! Letzte Details:

‚Ä¢ Welches Gehalt stellst du dir vor? (von ... bis ... EUR)
‚Ä¢ Vollzeit oder Teilzeit?
‚Ä¢ Remote-Arbeit oder nur B√ºro?
‚Ä¢ Pr√§ferenz f√ºr Unternehmensgr√∂√üe? (Startup/Konzern)

Danach finde ich perfekte Stellen! üéØ""",
                
                'complete': """üéâ Profil fertig! Suche beste Jobs...

Basierend auf deinen Daten finde ich:
‚úÖ Jobs mit passenden Anforderungen
‚úÖ Stellen in deiner gew√§hlten Stadt
‚úÖ Arbeit mit deinem Deutschniveau
‚úÖ Passende Gehaltsvorstellungen

Ich kann auch:
üîÑ Jobs ins Deutsche √ºbersetzen
üìä Kompatibilit√§t analysieren
‚úçÔ∏è Anschreiben erstellen

Hier ist was ich f√ºr dich gefunden habe:"""
            }
        }
        
        return messages.get(language, messages['ru']).get(stage, messages['ru']['initial'])
    
    def _get_completion_message(self, language: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        messages = {
            'ru': "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤! –í–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:",
            'en': "Your profile is ready! Here are personalized job recommendations specifically for you:",
            'de': "Ihr Profil ist fertig! Hier sind personalisierte Stellenempfehlungen speziell f√ºr Sie:"
        }
        
        return messages.get(language, messages['ru'])