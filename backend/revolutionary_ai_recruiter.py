"""
üöÄ Revolutionary AI Recruiter - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
–°—É–ø–µ—Ä-—É–º–Ω—ã–π AI —Ä–µ–∫—Ä—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
- –ü—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
- –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
- –î–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
"""

import logging
import json
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
from modern_llm_manager import modern_llm_manager
from job_search_service import JobSearchService
from german_cities_service import GermanCitiesService

logger = logging.getLogger(__name__)

class RevolutionaryAIRecruiter:
    def __init__(self, database):
        self.db = database
        self.job_search_service = JobSearchService()
        self.cities_service = GermanCitiesService()
        
        # –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_stages = {
            'profile_analysis': {'name': '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è', 'weight': 20},
            'market_analysis': {'name': '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞', 'weight': 20},
            'skill_gap_analysis': {'name': '–ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤', 'weight': 15},
            'salary_analysis': {'name': '–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π', 'weight': 15},
            'strategy_creation': {'name': '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞', 'weight': 15},
            'optimization': {'name': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è', 'weight': 15}
        }
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.skill_categories = {
            'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
            'soft': '–ú—è–≥–∫–∏–µ –Ω–∞–≤—ã–∫–∏', 
            'language': '–Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏',
            'domain': '–ó–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏',
            'leadership': '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
            'analytical': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏'
        }
        
        # –¢–∏–ø—ã –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.career_strategies = {
            'aggressive': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç)',
            'steady': '–£—Å—Ç–æ–π—á–∏–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ)',
            'pivot': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'specialist': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–≥–ª—É–±–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã',
            'generalist': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π'
        }

    async def conduct_revolutionary_analysis(self,
                                           user_id: str,
                                           user_language: str = 'ru',
                                           user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üöÄ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        try:
            logger.info(f"üöÄ Starting revolutionary analysis for user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –±–∞–∑–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis_result = await self._perform_comprehensive_analysis(
                profile, user_language, user_providers
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            profile['revolutionary_analysis'] = analysis_result
            profile['last_analysis'] = datetime.now().isoformat()
            await self.db.save_ai_recruiter_profile(user_id, profile)
            
            return {
                'status': 'success',
                'analysis': analysis_result,
                'profile': profile,
                'recommendations_generated': len(analysis_result.get('job_recommendations', [])),
                'career_strategy': analysis_result.get('career_strategy'),
                'success_predictions': analysis_result.get('success_predictions')
            }
            
        except Exception as e:
            logger.error(f"Revolutionary analysis failed: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'
            }
    
    async def _perform_comprehensive_analysis(self,
                                            profile: Dict[str, Any],
                                            language: str,
                                            user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        
        collected_data = profile.get('collected_data', {})
        
        # 1. –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        profile_analysis = await self._deep_profile_analysis(collected_data, language, user_providers)
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞
        market_analysis = await self._analyze_job_market(collected_data, language, user_providers)
        
        # 3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞–≤—ã–∫–∞—Ö
        skill_gap_analysis = await self._analyze_skill_gaps(collected_data, market_analysis, language, user_providers)
        
        # 4. –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        salary_analysis = await self._analyze_salary_potential(collected_data, market_analysis, language, user_providers)
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        career_strategy = await self._create_career_strategy(
            profile_analysis, market_analysis, skill_gap_analysis, language, user_providers
        )
        
        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        job_recommendations = await self._generate_revolutionary_recommendations(
            profile, market_analysis, career_strategy, user_providers
        )
        
        # 7. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_predictions = await self._predict_success_rates(
            profile_analysis, market_analysis, job_recommendations, language, user_providers
        )
        
        return {
            'profile_analysis': profile_analysis,
            'market_analysis': market_analysis,
            'skill_gap_analysis': skill_gap_analysis,
            'salary_analysis': salary_analysis,
            'career_strategy': career_strategy,
            'job_recommendations': job_recommendations,
            'success_predictions': success_predictions,
            'analysis_timestamp': datetime.now().isoformat(),
            'analysis_version': '2.0_revolutionary'
        }
    
    async def _deep_profile_analysis(self,
                                   collected_data: Dict[str, Any],
                                   language: str,
                                   user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        
        if not user_providers:
            return self._create_demo_profile_analysis(collected_data, language)
        
        prompt = self._create_profile_analysis_prompt(collected_data, language)
        
        try:
            provider, model, api_key = user_providers[0]
            ai_analysis = await modern_llm_manager.generate_content(
                prompt=prompt,
                provider=provider,
                model=model,
                api_key=api_key,
                max_tokens=3000
            )
            
            return self._parse_profile_analysis(ai_analysis, collected_data)
            
        except Exception as e:
            logger.error(f"Profile analysis failed: {e}")
            return self._create_demo_profile_analysis(collected_data, language)
    
    def _create_profile_analysis_prompt(self, data: Dict[str, Any], language: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        
        data_summary = json.dumps(data, ensure_ascii=False, indent=2)
        
        if language == 'ru':
            return f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü—Ä–æ–≤–µ–¥–∏ –ì–õ–£–ë–û–ö–ò–ô –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

–î–ê–ù–ù–´–ï –ö–ê–ù–î–ò–î–ê–¢–ê:
{data_summary}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:

1. –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:
   - –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
   - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
   - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞

2. –°–õ–ê–ë–´–ï –ú–ï–°–¢–ê:
   - –ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–≤—ã–∫–∞—Ö
   - –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
   - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã

3. –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ü–û–†–¢–†–ï–¢:
   - –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç/—É–Ω–∏–≤–µ—Ä—Å–∞–ª)
   - –£—Ä–æ–≤–µ–Ω—å —Å–µ–Ω–∏–æ—Ä–Ω–æ—Å—Ç–∏
   - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–º–µ–Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

4. –†–´–ù–û–ß–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø:
   - –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω –Ω–∞ —Ä—ã–Ω–∫–µ
   - –í –∫–∞–∫–∏—Ö —Å–µ–∫—Ç–æ—Ä–∞—Ö –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω
   - –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (USP)

5. –ö–ê–†–¨–ï–†–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ:
   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è
   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π

6. –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨:
   - –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
   - –°—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã
   - –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç–µ

–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º.
–û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
"""
        else:
            return f"""
You are an experienced HR analyst and career consultant. Conduct a DEEP analysis of the candidate's profile.

CANDIDATE DATA:
{data_summary}

Analyze the following aspects:

1. STRENGTHS:
   - Key professional skills
   - Unique competencies  
   - Competitive advantages

2. WEAKNESSES:
   - Skill gaps
   - Areas for development
   - Potential job search risks

3. PROFESSIONAL PORTRAIT:
   - Type of professional (specialist/generalist)
   - Seniority level
   - Readiness for career change

4. MARKET POSITION:
   - Market demand level
   - Most competitive sectors
   - Unique value proposition (USP)

5. CAREER POTENTIAL:
   - Growth opportunities
   - Recommended development directions
   - Timeline for achieving goals

6. PSYCHOLOGICAL PROFILE:
   - Motivational factors
   - Work style
   - Team collaboration preferences

Give specific, actionable recommendations. Be honest and objective.
Structure your response in JSON format.
"""
    
    async def _analyze_job_market(self,
                                 collected_data: Dict[str, Any],
                                 language: str,
                                 user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä—ã–Ω–∫–∞
        search_params = {
            'location': collected_data.get('preferred_city', 'Berlin'),
            'language_level': collected_data.get('german_level', 'B1'),
            'search_query': collected_data.get('profession', 'developer')
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            jobs_result = await self.job_search_service.search_jobs(**search_params)
            current_jobs = jobs_result.get('jobs', [])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
            market_trends = await self._analyze_market_trends(current_jobs, collected_data, language, user_providers)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–ª–∫–∏
            salary_trends = self._analyze_salary_trends(current_jobs)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏
            skill_trends = self._analyze_skill_trends(current_jobs)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
            company_analysis = self._analyze_companies(current_jobs)
            
            return {
                'total_jobs_found': len(current_jobs),
                'market_trends': market_trends,
                'salary_trends': salary_trends,
                'skill_trends': skill_trends,
                'company_analysis': company_analysis,
                'competition_level': self._assess_competition_level(len(current_jobs)),
                'market_hotness': self._assess_market_hotness(current_jobs),
                'analysis_date': datetime.now().isoformat(),
                'search_parameters': search_params
            }
            
        except Exception as e:
            logger.error(f"Market analysis failed: {e}")
            return self._create_demo_market_analysis(collected_data, language)
    
    async def _generate_revolutionary_recommendations(self,
                                                    profile: Dict[str, Any],
                                                    market_analysis: Dict[str, Any],
                                                    career_strategy: Dict[str, Any],
                                                    user_providers: List[Tuple[str, str, str]] = None) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π"""
        
        try:
            collected_data = profile.get('collected_data', {})
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            base_params = {
                'location': collected_data.get('preferred_city', 'Berlin'),
                'language_level': collected_data.get('german_level', 'B1'),
                'search_query': collected_data.get('profession', 'developer')
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            all_jobs = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
            main_search = await self.job_search_service.search_jobs(**base_params)
            if main_search.get('status') == 'success':
                all_jobs.extend(main_search.get('jobs', []))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            profession_variants = self._get_profession_variants(collected_data.get('profession', ''))
            for variant in profession_variants[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                variant_params = base_params.copy()
                variant_params['search_query'] = variant
                variant_search = await self.job_search_service.search_jobs(**variant_params)
                if variant_search.get('status') == 'success':
                    all_jobs.extend(variant_search.get('jobs', [])[:5])  # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –æ—Ç –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_jobs = self._remove_duplicate_jobs(all_jobs)
            
            if not unique_jobs:
                return self._create_demo_recommendations(collected_data)
            
            # –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            revolutionary_recommendations = []
            
            for job in unique_jobs[:15]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-15 –≤–∞–∫–∞–Ω—Å–∏–π
                job_analysis = await self._revolutionary_job_analysis(
                    job, profile, market_analysis, career_strategy, user_providers
                )
                
                if job_analysis['compatibility_score'] >= 60:  # –¢–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    revolutionary_recommendations.append({
                        'job': job,
                        'revolutionary_analysis': job_analysis,
                        'ai_insights': job_analysis.get('ai_insights', {}),
                        'success_prediction': job_analysis.get('success_prediction', {}),
                        'application_strategy': job_analysis.get('application_strategy', {}),
                        'interview_preparation': job_analysis.get('interview_preparation', {})
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–º—É —Å–∫–æ—Ä–∏–Ω–≥—É
            revolutionary_recommendations.sort(
                key=lambda x: x['revolutionary_analysis']['total_score'], 
                reverse=True
            )
            
            return revolutionary_recommendations[:10]  # –¢–æ–ø-10 –ª—É—á—à–∏—Ö
            
        except Exception as e:
            logger.error(f"Revolutionary recommendations failed: {e}")
            return self._create_demo_recommendations(collected_data)
    
    async def _revolutionary_job_analysis(self,
                                        job: Dict[str, Any],
                                        profile: Dict[str, Any],
                                        market_analysis: Dict[str, Any],
                                        career_strategy: Dict[str, Any],
                                        user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
        
        if not user_providers:
            return self._create_demo_job_analysis(job, profile)
        
        prompt = self._create_revolutionary_job_analysis_prompt(job, profile, market_analysis, career_strategy)
        
        try:
            provider, model, api_key = user_providers[0]
            ai_analysis = await modern_llm_manager.generate_content(
                prompt=prompt,
                provider=provider,
                model=model,
                api_key=api_key,
                max_tokens=2500
            )
            
            return self._parse_revolutionary_job_analysis(ai_analysis, job, profile)
            
        except Exception as e:
            logger.error(f"Revolutionary job analysis failed: {e}")
            return self._create_demo_job_analysis(job, profile)
    
    def _create_revolutionary_job_analysis_prompt(self,
                                                job: Dict[str, Any],
                                                profile: Dict[str, Any],
                                                market_analysis: Dict[str, Any],
                                                career_strategy: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        
        job_info = f"""
–í–∞–∫–∞–Ω—Å–∏—è: {job.get('title', 'Unknown')}
–ö–æ–º–ø–∞–Ω–∏—è: {job.get('company_name', 'Unknown')}
–û–ø–∏—Å–∞–Ω–∏–µ: {job.get('description', 'No description')[:500]}...
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {job.get('requirements', 'No requirements')}
–õ–æ–∫–∞—Ü–∏—è: {job.get('location', 'Unknown')}
–ó–∞—Ä–ø–ª–∞—Ç–∞: {job.get('salary', 'Not specified')}
"""
        
        candidate_data = json.dumps(profile.get('collected_data', {}), ensure_ascii=False, indent=2)
        market_data = json.dumps(market_analysis, ensure_ascii=False, indent=2)
        strategy_data = json.dumps(career_strategy, ensure_ascii=False, indent=2)
        
        return f"""
–¢—ã —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ü—Ä–æ–≤–µ–¥–∏ –ì–õ–£–ë–û–ö–ò–ô –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏.

–í–ê–ö–ê–ù–°–ò–Ø:
{job_info}

–ü–†–û–§–ò–õ–¨ –ö–ê–ù–î–ò–î–ê–¢–ê:
{candidate_data}

–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê:
{market_data}

–ö–ê–†–¨–ï–†–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:
{strategy_data}

–ü—Ä–æ–≤–µ–¥–∏ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

1. –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ (0-100):
   - –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤
   - –û–ø—ã—Ç –≤ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
   - –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ

2. –£–°–ü–ï–®–ù–û–°–¢–¨ –ö–ê–ù–î–ò–î–ê–¢–£–†–´ (0-100):
   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
   - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏

3. –ö–ê–†–¨–ï–†–ù–ê–Ø –¶–ï–ù–ù–û–°–¢–¨ (0-100):
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ü–µ–ª—è–º
   - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏
   - –†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤

4. AI –ò–ù–°–ê–ô–¢–´:
   - –°–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏
   - –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   - "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ" —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è

5. –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–î–ê–ß–ò:
   - –ö–∞–∫ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
   - –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è CV
   - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞

6. –ü–û–î–ì–û–¢–û–í–ö–ê –ö –ò–ù–¢–ï–†–í–¨–Æ:
   - –í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞–¥—É—Ç
   - –ö–∞–∫ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
   - –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ –∫–∞–∫ –∏—Ö –æ–±—ã–≥—Ä–∞—Ç—å

7. –ó–ê–†–ü–õ–ê–¢–ù–´–ï –û–ñ–ò–î–ê–ù–ò–Ø:
   - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–∏–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –î–∞–π —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.
–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ –≤—Å–µ–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏.
"""
    
    async def generate_perfect_cover_letter(self,
                                          job_data: Dict[str, Any],
                                          user_id: str,
                                          style: str = 'professional',
                                          user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """
        üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self.db.get_ai_recruiter_profile(user_id)
            if not profile:
                return {
                    'status': 'error',
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.'
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            revolutionary_analysis = profile.get('revolutionary_analysis', {})
            
            # –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
            cover_letter = await self._create_perfect_cover_letter(
                job_data, profile, revolutionary_analysis, style, user_providers
            )
            
            return {
                'status': 'success',
                'cover_letter': cover_letter,
                'personalization_score': cover_letter.get('personalization_score', 85),
                'style': style,
                'generated_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Perfect cover letter generation failed: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {str(e)}'
            }
    
    async def _create_perfect_cover_letter(self,
                                         job_data: Dict[str, Any],
                                         profile: Dict[str, Any],
                                         revolutionary_analysis: Dict[str, Any],
                                         style: str,
                                         user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
        
        if not user_providers:
            return self._create_demo_cover_letter(job_data, profile, style)
        
        prompt = self._create_cover_letter_prompt(job_data, profile, revolutionary_analysis, style)
        
        try:
            provider, model, api_key = user_providers[0]
            ai_letter = await modern_llm_manager.generate_content(
                prompt=prompt,
                provider=provider,
                model=model,
                api_key=api_key,
                max_tokens=2000
            )
            
            return self._parse_perfect_cover_letter(ai_letter, job_data, style)
            
        except Exception as e:
            logger.error(f"Cover letter creation failed: {e}")
            return self._create_demo_cover_letter(job_data, profile, style)
    
    def _create_cover_letter_prompt(self, job_data: Dict[str, Any], profile: Dict[str, Any], revolutionary_analysis: Dict[str, Any], style: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
        
        job_info = f"""
–î–æ–ª–∂–Ω–æ—Å—Ç—å: {job_data.get('title', 'Unknown')}
–ö–æ–º–ø–∞–Ω–∏—è: {job_data.get('company_name', 'Unknown')}
–û–ø–∏—Å–∞–Ω–∏–µ: {job_data.get('description', 'No description')[:400]}...
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {job_data.get('requirements', 'No requirements')}
–ó–∞—Ä–ø–ª–∞—Ç–∞: {job_data.get('salary', 'Not specified')}
–õ–æ–∫–∞—Ü–∏—è: {job_data.get('location', 'Unknown')}
"""
        
        user_data = profile.get('collected_data', {})
        analysis_data = json.dumps(revolutionary_analysis, ensure_ascii=False, indent=2) if revolutionary_analysis else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞"
        
        style_instructions = {
            'professional': '–°—Ç—Ä–æ–≥–æ –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å, —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
            'creative': '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –∂–∏–≤–æ–π —è–∑—ã–∫, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏',
            'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å, —Ñ–æ–∫—É—Å –Ω–∞ –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏',
            'friendly': '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è'
        }
        
        return f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ HR.

–°–æ–∑–¥–∞–π –ò–î–ï–ê–õ–¨–ù–û–ï —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –≤ —Å—Ç–∏–ª–µ "{style}".

–í–ê–ö–ê–ù–°–ò–Ø:
{job_info}

–ü–†–û–§–ò–õ–¨ –ö–ê–ù–î–ò–î–ê–¢–ê:
–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {user_data.get('profession', 'Unknown')}
–û–ø—ã—Ç: {user_data.get('experience_years', 'Unknown')} –ª–µ—Ç
–ù–∞–≤—ã–∫–∏: {', '.join(user_data.get('technical_skills', ['Not specified']))}
–ù–µ–º–µ—Ü–∫–∏–π: {user_data.get('german_level', 'Unknown')}
–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_data.get('has_education', 'Unknown')}
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_data.get('work_format', 'Unknown')}

–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó:
{analysis_data}

–°–¢–ò–õ–¨ –ü–ò–°–¨–ú–ê: {style_instructions.get(style, 'Professional approach')}

–°–æ–∑–¥–∞–π –ø–∏—Å—å–º–æ –∫–æ—Ç–æ—Ä–æ–µ:

1. –ó–ê–ì–û–õ–û–í–û–ö: –¶–µ–ø–ª—è—é—â–∞—è —Ç–µ–º–∞ –ø–∏—Å—å–º–∞
2. –ü–†–ò–í–ï–¢–°–¢–í–ò–ï: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ HR/–Ω–∞–Ω–∏–º–∞—é—â–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
3. –í–°–¢–£–ü–õ–ï–ù–ò–ï (1 –∞–±–∑–∞—Ü): 
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏ –≥–¥–µ –Ω–∞—à–µ–ª –≤–∞–∫–∞–Ω—Å–∏—é
   - –ö—Ä–∞—Ç–∫–æ–µ, –Ω–æ –º–æ—â–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
4. –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ (2-3 –∞–±–∑–∞—Ü–∞):
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞
   - –ö–∞–∫ –Ω–∞–≤—ã–∫–∏ —Ä–µ—à–∞—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–º–ø–∞–Ω–∏–∏
   - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
5. –ú–û–¢–ò–í–ê–¶–ò–Ø (1 –∞–±–∑–∞—Ü):
   - –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –∫–æ–º–ø–∞–Ω–∏—è
   - –ß—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏
   - –ö–∞–∫–æ–π –≤–∫–ª–∞–¥ –º–æ–∂–µ—Ç –≤–Ω–µ—Å—Ç–∏
6. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
   - Call-to-action –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
   - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ú–∞–∫—Å–∏–º—É–º 350 —Å–ª–æ–≤
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –ù–ï –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
- –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å 2-3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
- –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
- –£–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–π —Ç–æ–Ω

–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
"""
    
    def _parse_perfect_cover_letter(self, ai_letter: str, job_data: Dict[str, Any], style: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
            if '{' in ai_letter and '}' in ai_letter:
                json_start = ai_letter.find('{')
                json_end = ai_letter.rfind('}') + 1
                json_str = ai_letter[json_start:json_end]
                parsed = json.loads(json_str)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                parsed['style'] = style
                parsed['job_title'] = job_data.get('title', 'Unknown')
                parsed['company'] = job_data.get('company_name', 'Unknown')
                parsed['personalization_score'] = self._calculate_personalization_score(parsed)
                parsed['generated_at'] = datetime.now().isoformat()
                
                return parsed
        except:
            pass
        
        # Fallback —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        return {
            'subject': f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {job_data.get('title', 'Unknown')}",
            'greeting': f"–£–≤–∞–∂–∞–µ–º—ã–π HR-–º–µ–Ω–µ–¥–∂–µ—Ä {job_data.get('company_name', '–∫–æ–º–ø–∞–Ω–∏–∏')}!",
            'body': ai_letter if len(ai_letter) < 1000 else ai_letter[:1000] + '...',
            'closing': '–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n[–í–∞—à–µ –∏–º—è]',
            'full_text': ai_letter,
            'word_count': len(ai_letter.split()),
            'style': style,
            'personalization_score': 75,
            'generated_at': datetime.now().isoformat()
        }
    
    def _calculate_personalization_score(self, letter_data: Dict[str, Any]) -> int:
        """–†–∞—Å—á–µ—Ç –±–∞–ª–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞"""
        score = 50  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if letter_data.get('subject') and '–ø–æ–∑–∏—Ü–∏—è' in letter_data['subject'].lower():
            score += 10
        
        if letter_data.get('body'):
            body = letter_data['body'].lower()
            if '–∫–æ–º–ø–∞–Ω–∏—è' in body or '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è' in body:
                score += 10
            if any(skill in body for skill in ['–æ–ø—ã—Ç', '–Ω–∞–≤—ã–∫', '—É–º–µ–Ω–∏–µ', '–∑–Ω–∞–Ω–∏–µ']):
                score += 10
            if '–∏–Ω—Ç–µ—Ä–≤—å—é' in body or '–≤—Å—Ç—Ä–µ—á–∞' in body:
                score += 10
            if len(body.split()) >= 200:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞
                score += 10
        
        return min(score, 100)
    
    def _create_demo_cover_letter(self, job_data: Dict[str, Any], profile: Dict[str, Any], style: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
        
        job_title = job_data.get('title', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
        company = job_data.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')
        user_data = profile.get('collected_data', {})
        profession = user_data.get('profession', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
        
        demo_body = f"""–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞–∫–∞–Ω—Å–∏—è {job_title} –≤ {company}.

–ú–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ {profession} –∏ –∑–Ω–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ø–æ–∑–≤–æ–ª—è—Ç –º–Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏. –Ø –æ–±–ª–∞–¥–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –≥–æ—Ç–æ–≤ –≤–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.

{company} –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –º–µ–Ω—è –∫–∞–∫ –∏–Ω–Ω–æ–≤–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å –æ—Ç–ª–∏—á–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π. –Ø –±—ã–ª –±—ã —Ä–∞–¥ –æ–±—Å—É–¥–∏—Ç—å –º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏.

–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
        
        return {
            'subject': f'–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {job_title}',
            'greeting': f'–£–≤–∞–∂–∞–µ–º—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ {company}!',
            'body': demo_body,
            'closing': '–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n[–í–∞—à–µ –∏–º—è]',
            'full_text': f'–£–≤–∞–∂–∞–µ–º—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ {company}!\n\n{demo_body}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n[–í–∞—à–µ –∏–º—è]',
            'word_count': len(demo_body.split()),
            'style': style,
            'personalization_score': 80,
            'generated_at': datetime.now().isoformat(),
            'demo_mode': True
        }
    # =====================================================
    # –î–ï–ú–û –ò –ü–ê–†–°–ò–ù–ì –ú–ï–¢–û–î–´
    # =====================================================
    
    def _create_demo_profile_analysis(self, data: Dict[str, Any], language: str) -> Dict[str, Any]:
        """–î–µ–º–æ-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
        profession = data.get('profession', 'developer')
        experience = data.get('experience_years', '2-3')
        
        return {
            'strengths': [
                f'–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã {profession} ({experience} –ª–µ—Ç)',
                '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –æ–±—É—á–µ–Ω–∏—é',
                '–ó–Ω–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
                '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —Å—Ä–µ–¥–µ'
            ],
            'weaknesses': [
                '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –Ω–µ–º–µ—Ü–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö',
                '–ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
                '–ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –≤ –ì–µ—Ä–º–∞–Ω–∏–∏'
            ],
            'professional_portrait': {
                'type': '–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
                'seniority': 'Junior-Middle',
                'adaptability': '–í—ã—Å–æ–∫–∞—è'
            },
            'market_position': {
                'demand_level': '–í—ã—Å–æ–∫–∏–π',
                'competitive_sectors': ['Tech', 'Startups', 'Digital'],
                'usp': f'–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π {profession} —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –æ–ø—ã—Ç–æ–º'
            },
            'career_potential': {
                'growth_opportunities': '–û—Ç–ª–∏—á–Ω—ã–µ',
                'recommended_directions': ['–£–≥–ª—É–±–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤', '–†–∞–∑–≤–∏—Ç–∏–µ –ª–∏–¥–µ—Ä—Å–∫–∏—Ö –∫–∞—á–µ—Å—Ç–≤'],
                'timeline': '1-2 –≥–æ–¥–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è'
            }
        }
    
    def _create_demo_market_analysis(self, data: Dict[str, Any], language: str) -> Dict[str, Any]:
        """–î–µ–º–æ-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        return {
            'total_jobs_found': 150,
            'market_trends': {
                'trend': '–†–∞—Å—Ç—É—â–∏–π —Å–ø—Ä–æ—Å',
                'hot_skills': ['Python', 'JavaScript', 'Cloud', 'AI/ML'],
                'growth_sectors': ['Fintech', 'Healthcare Tech', 'Green Tech']
            },
            'salary_trends': {
                'average_salary': '55,000 - 75,000 EUR',
                'salary_growth': '+8% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥',
                'bonus_potential': '10-20% –æ—Ç –±–∞–∑–æ–≤–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã'
            },
            'competition_level': '–£–º–µ—Ä–µ–Ω–Ω–∞—è',
            'market_hotness': '–ì–æ—Ä—è—á–∏–π —Ä—ã–Ω–æ–∫ - –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π'
        }
    
    def _create_demo_recommendations(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–î–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        profession = data.get('profession', 'Developer')
        city = data.get('preferred_city', 'Berlin')
        
        return [
            {
                'job': {
                    'title': f'Senior {profession}',
                    'company_name': 'TechCorp Deutschland',
                    'location': city,
                    'salary': '65,000 - 80,000 EUR',
                    'description': f'Exciting opportunity for an experienced {profession} to join our innovative team.',
                    'requirements': ['3+ years experience', 'Strong technical skills', 'Team collaboration']
                },
                'revolutionary_analysis': {
                    'compatibility_score': 92,
                    'success_prediction': 85,
                    'career_value': 88,
                    'total_score': 88
                },
                'ai_insights': {
                    'hidden_opportunities': 'Company is expanding rapidly - great growth potential',
                    'key_advantages': 'Your international background is a perfect fit',
                    'secret_requirements': 'They value cultural diversity and fresh perspectives'
                }
            }
        ]
    
    def _parse_revolutionary_job_analysis(self, ai_analysis: str, job: Dict[str, Any], profile: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if '{' in ai_analysis and '}' in ai_analysis:
                json_start = ai_analysis.find('{')
                json_end = ai_analysis.rfind('}') + 1
                json_str = ai_analysis[json_start:json_end]
                parsed = json.loads(json_str)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
                compatibility = parsed.get('compatibility_score', 75)
                success = parsed.get('success_prediction', 70)
                career_value = parsed.get('career_value', 80)
                
                total_score = int((compatibility * 0.4 + success * 0.3 + career_value * 0.3))
                parsed['total_score'] = total_score
                
                return parsed
        except:
            pass
        
        # Fallback –∞–Ω–∞–ª–∏–∑
        return {
            'compatibility_score': 75,
            'success_prediction': 70,
            'career_value': 80,
            'total_score': 75,
            'ai_insights': {
                'analysis': ai_analysis[:500] + '...' if len(ai_analysis) > 500 else ai_analysis
            }
        }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _get_profession_variants(self, profession: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        variants_map = {
            'developer': ['software engineer', 'programmer', 'software developer'],
            'designer': ['ui designer', 'ux designer', 'product designer'],
            'manager': ['project manager', 'product manager', 'team lead'],
            'analyst': ['data analyst', 'business analyst', 'systems analyst'],
            'engineer': ['software engineer', 'system engineer', 'technical lead']
        }
        
        profession_lower = profession.lower()
        for key, variants in variants_map.items():
            if key in profession_lower:
                return variants
        
        return [profession]
    
    def _remove_duplicate_jobs(self, jobs: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π"""
        unique_jobs = []
        seen_titles = set()
        
        for job in jobs:
            title_key = f"{job.get('title', '')}-{job.get('company_name', '')}"
            if title_key not in seen_titles:
                seen_titles.add(title_key)
                unique_jobs.append(job)
        
        return unique_jobs
    
    def _assess_competition_level(self, job_count: int) -> str:
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏"""
        if job_count > 100:
            return '–ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è - –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π'
        elif job_count > 50:
            return '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è'
        elif job_count > 20:
            return '–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è'
        else:
            return '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è - –º–∞–ª–æ –≤–∞–∫–∞–Ω—Å–∏–π'
    
    def _assess_market_hotness(self, jobs: List[Dict[str, Any]]) -> str:
        """–û—Ü–µ–Ω–∫–∞ –≥–æ—Ä—è—á–µ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
        if len(jobs) > 100:
            return '–ì–æ—Ä—è—á–∏–π —Ä—ã–Ω–æ–∫ üî•'
        elif len(jobs) > 50:
            return '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä—ã–Ω–æ–∫ üìà'
        elif len(jobs) > 20:
            return '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫'
        else:
            return '–°–ø–æ–∫–æ–π–Ω—ã–π —Ä—ã–Ω–æ–∫'

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
revolutionary_ai_recruiter = None

def get_revolutionary_ai_recruiter(database):
    global revolutionary_ai_recruiter
    if revolutionary_ai_recruiter is None:
        revolutionary_ai_recruiter = RevolutionaryAIRecruiter(database)
    return revolutionary_ai_recruiter