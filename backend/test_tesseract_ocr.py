#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Tesseract OCR
"""
import sys
import os
sys.path.append('.')

import asyncio
import tempfile
import requests
from PIL import Image, ImageDraw, ImageFont
from improved_ocr_service import improved_ocr_service

async def test_tesseract_complete():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç Tesseract OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    print("üîç –ü–û–õ–ù–´–ô –¢–ï–°–¢ TESSERACT OCR –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
    print("\n1. üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê OCR –°–ï–†–í–ò–°–ê")
    status = improved_ocr_service.get_service_status()
    
    print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: {status['service_name']}")
    print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: {status['primary_method']}")
    print(f"   ‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω: {status['methods']['tesseract_ocr']['available']}")
    print(f"   ‚úÖ –í–µ—Ä—Å–∏—è Tesseract: {status['tesseract_version']}")
    print(f"   ‚úÖ Tesseract –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {status['tesseract_dependency']}")
    print(f"   ‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É: {status['production_ready']}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤
    print("\n2. üîß –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –í–°–ï–• –ú–ï–¢–û–î–û–í OCR")
    methods = status['methods']
    for method_name, method_info in methods.items():
        status_icon = "‚úÖ" if method_info['available'] else "‚ùå"
        print(f"   {status_icon} {method_name}: {method_info['description']}")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print("\n3. üñºÔ∏è –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1: –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    test_images = []
    
    # –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    img1 = Image.new('RGB', (500, 100), 'white')
    draw1 = ImageDraw.Draw(img1)
    draw1.text((20, 20), "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! –≠—Ç–æ —Ç–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.", fill='black')
    temp1 = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
    img1.save(temp1.name)
    test_images.append(('russian', temp1.name))
    
    # –ù–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç
    img2 = Image.new('RGB', (500, 100), 'white')
    draw2 = ImageDraw.Draw(img2)
    draw2.text((20, 20), "Hallo Welt! Dies ist ein deutscher Text.", fill='black')
    temp2 = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
    img2.save(temp2.name)
    test_images.append(('german', temp2.name))
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    img3 = Image.new('RGB', (500, 100), 'white')
    draw3 = ImageDraw.Draw(img3)
    draw3.text((20, 20), "Hello World! This is an English text.", fill='black')
    temp3 = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
    img3.save(temp3.name)
    test_images.append(('english', temp3.name))
    
    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    img4 = Image.new('RGB', (500, 100), 'white')
    draw4 = ImageDraw.Draw(img4)
    draw4.text((20, 20), "–ü—Ä–∏–≤—ñ—Ç —Å–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É.", fill='black')
    temp4 = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
    img4.save(temp4.name)
    test_images.append(('ukrainian', temp4.name))
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Tesseract
    print("\n4. üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–Ø–ú–û–ì–û –í–´–ó–û–í–ê TESSERACT")
    
    tesseract_results = []
    for lang, image_path in test_images:
        try:
            result = await improved_ocr_service.extract_text_with_tesseract(image_path)
            tesseract_results.append((lang, len(result), result[:50]))
            print(f"   ‚úÖ {lang.capitalize()}: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤ - '{result[:50]}...'")
        except Exception as e:
            print(f"   ‚ùå {lang.capitalize()}: –û—à–∏–±–∫–∞ - {e}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
    print("\n5. üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê OCR")
    
    pipeline_results = []
    for lang, image_path in test_images:
        try:
            result = await improved_ocr_service.extract_text_from_image(image_path)
            pipeline_results.append((lang, len(result), result[:50]))
            print(f"   ‚úÖ {lang.capitalize()}: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤ - '{result[:50]}...'")
        except Exception as e:
            print(f"   ‚ùå {lang.capitalize()}: –û—à–∏–±–∫–∞ - {e}")
    
    # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ process_document
    print("\n6. üìÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PROCESS_DOCUMENT")
    
    document_results = []
    for lang, image_path in test_images:
        try:
            result, method = await improved_ocr_service.process_document(image_path, 'image/png')
            document_results.append((lang, method, len(result), result[:50]))
            print(f"   ‚úÖ {lang.capitalize()}: –ú–µ—Ç–æ–¥ '{method}', {len(result)} —Å–∏–º–≤–æ–ª–æ–≤ - '{result[:50]}...'")
        except Exception as e:
            print(f"   ‚ùå {lang.capitalize()}: –û—à–∏–±–∫–∞ - {e}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    print("\n7. üåê –ü–†–û–í–ï–†–ö–ê API ENDPOINTS")
    
    try:
        # OCR Status
        response = requests.get("http://localhost:8001/api/ocr-status")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ /api/ocr-status: {data['status']}")
            print(f"      - Primary method: {data['ocr_service']['primary_method']}")
            print(f"      - Tesseract available: {data['ocr_service']['methods']['tesseract_ocr']['available']}")
        else:
            print(f"   ‚ùå /api/ocr-status: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå /api/ocr-status: –û—à–∏–±–∫–∞ - {e}")
    
    try:
        # Health
        response = requests.get("http://localhost:8001/api/health")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ /api/health: {data['status']}")
        else:
            print(f"   ‚ùå /api/health: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå /api/health: –û—à–∏–±–∫–∞ - {e}")
    
    # 8. –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n8. üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    total_tests = len(test_images) * 3 + 2  # 3 OCR —Ç–µ—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + 2 API —Ç–µ—Å—Ç–∞
    successful_tests = 0
    
    successful_tests += len(tesseract_results)
    successful_tests += len(pipeline_results)
    successful_tests += len(document_results)
    successful_tests += 2  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç
    
    print(f"   üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {total_tests - successful_tests}")
    print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_tests/total_tests)*100:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Tesseract —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
    if status['primary_method'] == 'tesseract_ocr':
        print(f"\n   üéØ –ì–õ–ê–í–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Tesseract OCR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –û–°–ù–û–í–ù–û–ô –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞!")
        print(f"   ‚úÖ –í–µ—Ä—Å–∏—è Tesseract: {status['tesseract_version']}")
        print(f"   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π, –ù–µ–º–µ—Ü–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π")
        print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É")
    else:
        print(f"\n   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ Tesseract: {status['primary_method']}")
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\n9. üßπ –û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í")
    for _, image_path in test_images:
        try:
            os.unlink(image_path)
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω: {image_path}")
        except Exception as e:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {image_path}: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TESSERACT OCR –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(test_tesseract_complete())