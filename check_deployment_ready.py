#!/usr/bin/env python3
"""
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é German Letter AI
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import os
import sys
import json
import subprocess
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    WHITE = '\033[1;37m'
    NC = '\033[0m'  # No Color

def print_colored(text, color):
    print(f"{color}{text}{Colors.NC}")

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print_colored(f"‚úÖ {description}: {file_path}", Colors.GREEN)
        return True
    else:
        print_colored(f"‚ùå {description}: {file_path} –ù–ï –ù–ê–ô–î–ï–ù", Colors.RED)
        return False

def check_docker_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Dockerfile"""
    if not os.path.exists(file_path):
        print_colored(f"‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}", Colors.RED)
        return False
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    checks = [
        ("tesseract-ocr", "Tesseract OCR"),
        ("python:3.11", "Python 3.11 –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑"),
        ("requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
        ("uvicorn", "Uvicorn —Å–µ—Ä–≤–µ—Ä"),
        ("EXPOSE 8001", "–ü–æ—Ä—Ç 8001")
    ]
    
    all_good = True
    for check, description in checks:
        if check in content:
            print_colored(f"  ‚úÖ {description}", Colors.GREEN)
        else:
            print_colored(f"  ‚ùå {description} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", Colors.RED)
            all_good = False
    
    return all_good

def check_requirements(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt"""
    if not os.path.exists(file_path):
        print_colored(f"‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}", Colors.RED)
        return False
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    required_packages = [
        "fastapi", "uvicorn", "python-dotenv", "pydantic", 
        "pytesseract", "opencv-python", "Pillow", "httpx",
        "google-generativeai", "openai", "anthropic"
    ]
    
    all_good = True
    for package in required_packages:
        if package.lower() in content.lower():
            print_colored(f"  ‚úÖ {package}", Colors.GREEN)
        else:
            print_colored(f"  ‚ùå {package} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", Colors.RED)
            all_good = False
    
    return all_good

def check_env_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
    if not os.path.exists(file_path):
        print_colored(f"‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}", Colors.RED)
        return False
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    required_vars = [
        "GOOGLE_CLIENT_ID", "JWT_SECRET_KEY", "SQLITE_DB_PATH",
        "TESSERACT_AVAILABLE", "TESSERACT_VERSION"
    ]
    
    all_good = True
    for var in required_vars:
        if var in content:
            print_colored(f"  ‚úÖ {var}", Colors.GREEN)
        else:
            print_colored(f"  ‚ùå {var} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", Colors.RED)
            all_good = False
    
    return all_good

def check_package_json(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ package.json"""
    if not os.path.exists(file_path):
        print_colored(f"‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}", Colors.RED)
        return False
    
    try:
        with open(file_path, 'r') as f:
            package_data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = package_data.get('dependencies', {})
        required_deps = ['react', 'react-dom', 'axios', 'react-router-dom']
        
        all_good = True
        for dep in required_deps:
            if dep in dependencies:
                print_colored(f"  ‚úÖ {dep}: {dependencies[dep]}", Colors.GREEN)
            else:
                print_colored(f"  ‚ùå {dep} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", Colors.RED)
                all_good = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        scripts = package_data.get('scripts', {})
        if 'build' in scripts:
            print_colored(f"  ‚úÖ build script: {scripts['build']}", Colors.GREEN)
        else:
            print_colored(f"  ‚ùå build script –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", Colors.RED)
            all_good = False
            
        return all_good
        
    except json.JSONDecodeError:
        print_colored(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ {file_path}", Colors.RED)
        return False

def main():
    print_colored("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é German Letter AI", Colors.CYAN)
    print_colored("=" * 60, Colors.CYAN)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    root_dir = Path(__file__).parent
    
    # –°—á–µ—Ç—á–∏–∫–∏
    total_checks = 0
    passed_checks = 0
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print_colored("\nüìã 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–ø–ª–æ—è:", Colors.BLUE)
    
    config_files = [
        ("fly.toml", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Fly.io"),
        ("netlify.toml", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Netlify"),
        ("Dockerfile", "Dockerfile –¥–ª—è backend"),
        (".dockerignore", "Docker ignore —Ñ–∞–π–ª"),
        ("auto_deploy.sh", "–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è")
    ]
    
    for file_name, description in config_files:
        total_checks += 1
        if check_file_exists(root_dir / file_name, description):
            passed_checks += 1
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend —Ñ–∞–π–ª–æ–≤
    print_colored("\nüîß 2. Backend —Ñ–∞–π–ª—ã:", Colors.BLUE)
    
    backend_dir = root_dir / "backend"
    
    total_checks += 1
    if check_file_exists(backend_dir / "server.py", "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä"):
        passed_checks += 1
    
    total_checks += 1
    if check_file_exists(backend_dir / "requirements.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"):
        passed_checks += 1
        print_colored("  üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:", Colors.YELLOW)
        if check_requirements(backend_dir / "requirements.txt"):
            passed_checks += 1
        total_checks += 1
    
    total_checks += 1
    if check_file_exists(backend_dir / ".env", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"):
        passed_checks += 1
        print_colored("  üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:", Colors.YELLOW)
        if check_env_file(backend_dir / ".env"):
            passed_checks += 1
        total_checks += 1
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend —Ñ–∞–π–ª–æ–≤
    print_colored("\nüé® 3. Frontend —Ñ–∞–π–ª—ã:", Colors.BLUE)
    
    frontend_dir = root_dir / "frontend"
    
    total_checks += 1
    if check_file_exists(frontend_dir / "package.json", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Node.js"):
        passed_checks += 1
        print_colored("  üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:", Colors.YELLOW)
        if check_package_json(frontend_dir / "package.json"):
            passed_checks += 1
        total_checks += 1
    
    total_checks += 1
    if check_file_exists(frontend_dir / ".env", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"):
        passed_checks += 1
    
    total_checks += 1
    if check_file_exists(frontend_dir / "public" / "_redirects", "Netlify redirects"):
        passed_checks += 1
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_colored("\nüê≥ 4. Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:", Colors.BLUE)
    
    total_checks += 1
    if check_file_exists(root_dir / "Dockerfile", "Dockerfile –¥–ª—è backend"):
        passed_checks += 1
        print_colored("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Dockerfile:", Colors.YELLOW)
        if check_docker_file(root_dir / "Dockerfile"):
            passed_checks += 1
        total_checks += 1
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    print_colored("\nüìö 5. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:", Colors.BLUE)
    
    doc_files = [
        ("DEPLOY_GUIDE_FLY_NETLIFY.md", "–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –¥–µ–ø–ª–æ—é"),
        ("DEPLOY_GUIDE_BEGINNER.md", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤"),
        ("fly_secrets.env", "–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è Fly.io"),
        ("netlify_env.txt", "–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è Netlify")
    ]
    
    for file_name, description in doc_files:
        total_checks += 1
        if check_file_exists(root_dir / file_name, description):
            passed_checks += 1
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print_colored("\n" + "=" * 60, Colors.CYAN)
    print_colored("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:", Colors.WHITE)
    
    success_rate = (passed_checks / total_checks) * 100
    
    if success_rate >= 90:
        print_colored(f"üéâ –û–¢–õ–ò–ß–ù–û! –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {passed_checks}/{total_checks} ({success_rate:.1f}%)", Colors.GREEN)
        print_colored("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!", Colors.GREEN)
    elif success_rate >= 70:
        print_colored(f"‚ö†Ô∏è  –•–û–†–û–®–û! –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {passed_checks}/{total_checks} ({success_rate:.1f}%)", Colors.YELLOW)
        print_colored("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º", Colors.YELLOW)
    else:
        print_colored(f"‚ùå –í–ù–ò–ú–ê–ù–ò–ï! –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {passed_checks}/{total_checks} ({success_rate:.1f}%)", Colors.RED)
        print_colored("üö® –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", Colors.RED)
    
    print_colored("\nüöÄ –î–ª—è –¥–µ–ø–ª–æ—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:", Colors.CYAN)
    print_colored("1. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ DEPLOY_GUIDE_FLY_NETLIFY.md", Colors.WHITE)
    print_colored("2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./auto_deploy.sh", Colors.WHITE)
    print_colored("3. –ò–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ DEPLOY_GUIDE_BEGINNER.md", Colors.WHITE)
    
    return success_rate >= 90

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)