#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –¥–ª—è Telegram Mini App
"""

import asyncio
import aiohttp
import json
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_enhanced_ai_recruiter():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
    
    backend_url = "http://localhost:8001"
    
    async with aiohttp.ClientSession() as session:
        
        logger.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û AI –†–ï–ö–†–£–¢–ï–†–ê")
        logger.info("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        test_user_data = {
            "telegram_user": {
                "id": 999999999,
                "first_name": "–¢–µ—Å—Ç",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "username": "test_user"
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        async with session.post(f"{backend_url}/api/auth/telegram/verify", json=test_user_data) as response:
            if response.status == 200:
                auth_data = await response.json()
                token = auth_data['access_token']
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
                return
        
        headers = {"Authorization": f"Bearer {token}"}
        
        # –¢–ï–°–¢ 1: –ó–∞–ø—É—Å–∫ AI —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
        logger.info("\nü§ñ –¢–ï–°–¢ 1: –ó–∞–ø—É—Å–∫ AI —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞...")
        start_data = {"user_language": "ru"}
        async with session.post(f"{backend_url}/api/ai-recruiter/start", json=start_data, headers=headers) as response:
            if response.status == 200:
                start_result = await response.json()
                logger.info("‚úÖ AI —Ä–µ–∫—Ä—É—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {start_result.get('ai_message', '')[:200]}...")
                logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {start_result.get('progress', 0)}%")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {response.status}")
                return
        
        # –¢–ï–°–¢ 2: –°–∏–º—É–ª—è—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å AI —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
        logger.info("\nüí¨ –¢–ï–°–¢ 2: –°–∏–º—É–ª—è—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞...")
        
        conversation_steps = [
            "–Ø –∏—â—É —Ä–∞–±–æ—Ç—É Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –ë–µ—Ä–ª–∏–Ω–µ, –º–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ B2",
            "–£ –º–µ–Ω—è 5 –ª–µ—Ç –æ–ø—ã—Ç–∞, –∑–Ω–∞—é Python, Django, PostgreSQL, Docker",
            "–•–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –æ—Ç 65000 –¥–æ 80000 –µ–≤—Ä–æ –≤ –≥–æ–¥, –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å –≤ –æ—Ñ–∏—Å–µ"
        ]
        
        for i, user_message in enumerate(conversation_steps, 1):
            logger.info(f"\nüë§ –®–∞–≥ {i}: {user_message}")
            
            continue_data = {
                "user_message": user_message,
                "conversation_data": {"messages": []}
            }
            
            async with session.post(f"{backend_url}/api/ai-recruiter/continue", json=continue_data, headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"ü§ñ –û—Ç–≤–µ—Ç AI: {result.get('ai_message', '')[:300]}...")
                    logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {result.get('progress', 0)}%")
                    logger.info(f"üéØ –≠—Ç–∞–ø: {result.get('stage', 'unknown')}")
                    
                    if result.get('is_complete'):
                        logger.info("üéâ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω! –ï—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
                        recommendations = result.get('recommendations', [])
                        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
                        break
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {i}: {response.status}")
        
        # –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π
        logger.info("\nüéØ –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        recommendation_data = {"max_recommendations": 5}
        async with session.post(f"{backend_url}/api/ai-job-recommendations", json=recommendation_data, headers=headers) as response:
            if response.status == 200:
                recommendations_result = await response.json()
                logger.info("‚úÖ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                
                recommendations = recommendations_result.get('recommendations', [])
                logger.info(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
                
                for i, rec in enumerate(recommendations[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    job = rec.get('job', {})
                    compatibility = rec.get('compatibility', {})
                    logger.info(f"\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {i}:")
                    logger.info(f"   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {job.get('title', 'N/A')}")
                    logger.info(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {job.get('company', 'N/A')}")
                    logger.info(f"   üìç –ì–æ—Ä–æ–¥: {job.get('location', 'N/A')}")
                    logger.info(f"   üìä –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibility.get('score', 0)}/100")
                    logger.info(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {compatibility.get('recommendation_text', 'N/A')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
                    strengths = compatibility.get('strengths', [])
                    if strengths:
                        logger.info(f"   ‚úÖ –ü–ª—é—Å—ã: {', '.join(strengths[:2])}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                    action_items = rec.get('action_items', [])
                    if action_items:
                        logger.info(f"   üìù –î–µ–π—Å—Ç–≤–∏—è: {', '.join(action_items[:2])}")
                        
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {response.status}")
        
        # –¢–ï–°–¢ 4: –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–µ–π
        logger.info("\nüìä –¢–ï–°–¢ 4: –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
        test_job = {
            "title": "Senior Python Developer",
            "company": "TechCorp Berlin",
            "location": "Berlin, Germany",
            "description": "We are looking for a Senior Python Developer with Django experience",
            "requirements": "5+ years Python, Django, PostgreSQL, German B2+",
            "salary": "70,000 - 90,000 EUR"
        }
        
        compatibility_data = {"job_data": test_job}
        async with session.post(f"{backend_url}/api/job-compatibility", json=compatibility_data, headers=headers) as response:
            if response.status == 200:
                compatibility_result = await response.json()
                analysis = compatibility_result.get('analysis', {})
                
                logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                logger.info(f"üìä –û–±—â–∏–π –±–∞–ª–ª: {analysis.get('score', 0)}/100")
                logger.info(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis.get('recommendation_text', 'N/A')}")
                logger.info(f"üìù –†–µ–∑—é–º–µ: {analysis.get('summary', 'N/A')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
                categories = analysis.get('categories', {})
                for category, data in categories.items():
                    logger.info(f"   {category}: {data.get('score', 0)}/{data.get('max_score', 0)}")
                    
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {response.status}")
        
        # –¢–ï–°–¢ 5: –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏
        logger.info("\nüîÑ –¢–ï–°–¢ 5: –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏...")
        translation_data = {
            "job_data": test_job,
            "target_language": "ru"
        }
        
        async with session.post(f"{backend_url}/api/translate-job", json=translation_data, headers=headers) as response:
            if response.status == 200:
                translation_result = await response.json()
                translated_job = translation_result.get('translated_job', {})
                
                logger.info("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                logger.info(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {translated_job.get('title', 'N/A')}")
                logger.info(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {translated_job.get('company', 'N/A')}")
                logger.info(f"üìç –õ–æ–∫–∞—Ü–∏—è: {translated_job.get('location', 'N/A')}")
                logger.info(f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {translated_job.get('salary', 'N/A')}")
                
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {response.status}")
        
        logger.info("\n" + "=" * 60)
        logger.info("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        logger.info("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ AI —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await test_enhanced_ai_recruiter()

if __name__ == "__main__":
    asyncio.run(main())