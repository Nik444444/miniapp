#!/usr/bin/env python3
"""
ü§ñ Advanced AI Recruiter Testing Script
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
"""

import requests
import json
import logging
import time
from typing import Dict, Any, Optional

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AIRecruiterTester:
    def __init__(self, backend_url: str):
        self.backend_url = backend_url.rstrip('/')
        self.auth_token = None
        
        # Test data for Gemini API
        self.test_gemini_key = "AIzaSyCf2tzpl6bvCIVfZwGfgyxw2v8-5JmBU7M"
        
        # Test data for conversation
        self.test_conversation = [
            "–Ø –∏—â—É —Ä–∞–±–æ—Ç—É Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –ë–µ—Ä–ª–∏–Ω–µ. –ú–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ B2.",
            "–£ –º–µ–Ω—è 3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å Python, Django, React. –ó–Ω–∞—é Docker –∏ PostgreSQL.",
            "–•–æ—á—É –∑–∞—Ä–ø–ª–∞—Ç—É –æ—Ç 60000 –µ–≤—Ä–æ –≤ –≥–æ–¥. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –æ—Ñ–∏—Å–Ω—É—é —Ä–∞–±–æ—Ç—É, –Ω–æ –≥–æ—Ç–æ–≤ –∫ hybrid."
        ]
        
        # Test job data for compatibility testing
        self.test_job = {
            "id": "test_job_123",
            "title": "Senior Python Developer",
            "company": "Tech Company Berlin",
            "location": {"city": "Berlin", "country": "Germany"},
            "description": "We are looking for a Senior Python Developer with Django experience...",
            "requirements": "3+ years Python, Django, PostgreSQL, Docker",
            "salary": "65,000 - 75,000 EUR",
            "remote_possible": False
        }
    
    def authenticate_telegram_user(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram"""
        try:
            auth_data = {
                "user": {
                    "id": 123456789,
                    "first_name": "AI Test",
                    "last_name": "User",
                    "username": "ai_test_user",
                    "language_code": "ru"
                },
                "auth_date": int(time.time()),
                "hash": "test_hash_123"
            }
            
            response = requests.post(
                f"{self.backend_url}/api/auth/telegram/verify",
                json=auth_data,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get('access_token')
                if self.auth_token:
                    logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–∞")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Gemini API –∫–ª—é—á
                    self.update_api_keys()
                    return True
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def update_api_keys(self) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            data = {"gemini_api_key": self.test_gemini_key}
            
            response = requests.put(
                f"{self.backend_url}/api/user/api-keys",
                json=data,
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ API –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π: {e}")
            return False
    
    def test_ai_recruiter_start(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
        try:
            logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞...")
            
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            data = {"user_language": "ru"}  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: user_language –≤–º–µ—Å—Ç–æ language
            
            response = requests.post(
                f"{self.backend_url}/api/ai-recruiter/start",
                json=data,
                headers=headers,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    logger.info(f"‚úÖ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω: {result.get('stage')}")
                    logger.info(f"üìù AI —Å–æ–æ–±—â–µ–Ω–∏–µ: {result.get('ai_message', '')[:100]}...")
                    return result
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.get('message')}")
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞: {e}")
        
        return {"status": "error"}
    
    def test_ai_recruiter_conversation(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º"""
        try:
            logger.info("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º...")
            
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            
            for i, message in enumerate(self.test_conversation):
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {message[:50]}...")
                
                data = {
                    "user_message": message,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: user_message –≤–º–µ—Å—Ç–æ message
                    "conversation_data": {}   # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                }
                
                response = requests.post(
                    f"{self.backend_url}/api/ai-recruiter/continue",
                    json=data,
                    headers=headers,
                    timeout=20
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('status') == 'success':
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –≠—Ç–∞–ø: {result.get('stage')}")
                        logger.info(f"üìù AI –æ—Ç–≤–µ—Ç: {result.get('ai_message', '')[:100]}...")
                        logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {result.get('progress', 0)}%")
                        
                        if result.get('is_complete'):
                            logger.info("üéØ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω!")
                            break
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ: {result.get('message')}")
                        return False
                else:
                    logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                    return False
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                time.sleep(1)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
            return False
    
    def test_ai_recruiter_profile(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
        try:
            logger.info("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...")
            
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            
            response = requests.get(
                f"{self.backend_url}/api/ai-recruiter/profile",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    profile = result.get('profile', {})
                    collected_data = profile.get('collected_data', {})
                    
                    logger.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω")
                    logger.info(f"üìä –≠—Ç–∞–ø: {profile.get('stage')}")
                    logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {profile.get('progress')}%")
                    logger.info(f"üîç –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(collected_data)} –ø–æ–ª–µ–π")
                    
                    for key, value in collected_data.items():
                        logger.info(f"   - {key}: {value}")
                    
                    return result
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {result.get('message')}")
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        return {"status": "error"}
    
    def test_job_compatibility(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
            
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            data = {"job_data": self.test_job}
            
            response = requests.post(
                f"{self.backend_url}/api/job-compatibility",
                json=data,
                headers=headers,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    analysis = result.get('analysis', {})
                    score = analysis.get('score', 0)
                    reasons = analysis.get('reasons', [])
                    
                    logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    logger.info(f"üéØ –û—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {score}%")
                    logger.info(f"üìù –ü—Ä–∏—á–∏–Ω—ã: {len(reasons)} –Ω–∞–π–¥–µ–Ω–æ")
                    
                    for reason in reasons[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏—á–∏–Ω—ã
                        logger.info(f"   - {reason}")
                    
                    return result
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('message')}")
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        
        return {"status": "error"}
    
    def test_job_recommendations(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        try:
            logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            data = {"max_jobs": 5}
            
            response = requests.post(
                f"{self.backend_url}/api/ai-job-recommendations",
                json=data,
                headers=headers,
                timeout=20
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    recommendations = result.get('recommendations', [])
                    
                    logger.info("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                    logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
                    
                    for i, rec in enumerate(recommendations[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        job = rec.get('job', {})
                        compatibility = rec.get('compatibility', {})
                        
                        logger.info(f"   {i+1}. {job.get('title', 'Unknown')} - {compatibility.get('score', 0)}%")
                        logger.info(f"      üìç {job.get('location_string', 'Unknown location')}")
                    
                    return result
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {result.get('message')}")
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        return {"status": "error"}
    
    def test_job_translation(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            logger.info("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏...")
            
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            data = {
                "job_data": self.test_job,
                "target_language": "ru"
            }
            
            response = requests.post(
                f"{self.backend_url}/api/translate-job",
                json=data,
                headers=headers,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    translated_job = result.get('translated_job', {})
                    
                    logger.info("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    logger.info(f"üìù –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {translated_job.get('title', '')}")
                    logger.info(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {translated_job.get('company', '')}")
                    
                    return result
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {result.get('message')}")
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        
        return {"status": "error"}
    
    def test_job_subscription(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            logger.info("üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...")
            
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_data = {
                "search_query": "Python Developer",
                "location": "Berlin",
                "language_level": "B2",
                "notification_frequency": "daily"
            }
            
            response = requests.post(
                f"{self.backend_url}/api/job-subscription/create",
                json=subscription_data,
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    subscription_id = result.get('subscription_id')
                    logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
                    logger.info(f"üÜî ID –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_id}")
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
                    response = requests.get(
                        f"{self.backend_url}/api/job-subscription/list",
                        headers=headers,
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        subscriptions = result.get('subscriptions', [])
                        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}")
                        
                        return True
                    else:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {result.get('message')}")
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        
        return False
    
    def run_all_tests(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞")
        logger.info("=" * 80)
        
        results = {}
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        logger.info("1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        results['auth'] = self.authenticate_telegram_user()
        if not results['auth']:
            logger.error("‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return results
        
        # –ó–∞–ø—É—Å–∫ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
        logger.info("\n2. –ó–∞–ø—É—Å–∫ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞...")
        start_result = self.test_ai_recruiter_start()
        results['start'] = start_result.get('status') == 'success'
        
        # –†–∞–∑–≥–æ–≤–æ—Ä —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
        logger.info("\n3. –†–∞–∑–≥–æ–≤–æ—Ä —Å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º...")
        results['conversation'] = self.test_ai_recruiter_conversation()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        logger.info("\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
        profile_result = self.test_ai_recruiter_profile()
        results['profile'] = profile_result.get('status') == 'success'
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logger.info("\n5. –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
        compatibility_result = self.test_job_compatibility()
        results['compatibility'] = compatibility_result.get('status') == 'success'
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        logger.info("\n6. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        recommendations_result = self.test_job_recommendations()
        results['recommendations'] = recommendations_result.get('status') == 'success'
        
        # –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏
        logger.info("\n7. –ü–µ—Ä–µ–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏...")
        translation_result = self.test_job_translation()
        results['translation'] = translation_result.get('status') == 'success'
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        logger.info("\n8. –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫...")
        results['subscription'] = self.test_job_subscription()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 80)
        logger.info("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AI-–†–ï–ö–†–£–¢–ï–†–ê")
        logger.info("=" * 80)
        
        total_tests = len(results)
        passed_tests = sum(1 for result in results.values() if result)
        
        for test_name, passed in results.items():
            status = "‚úÖ PASS" if passed else "‚ùå FAIL"
            logger.info(f"{status} - {test_name}")
        
        logger.info(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"–£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
        logger.info(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - passed_tests}")
        logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests / total_tests * 100):.1f}%")
        
        if passed_tests == total_tests:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! AI-–†–ï–ö–†–£–¢–ï–† –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        elif passed_tests >= total_tests * 0.7:
            logger.info("üü° –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–®–õ–ò. AI-–†–ï–ö–†–£–¢–ï–† –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û.")
        else:
            logger.info("üî¥ –ú–ù–û–ì–û –ù–ï–£–î–ê–ß–ù–´–• –¢–ï–°–¢–û–í. –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê AI-–†–ï–ö–†–£–¢–ï–†–ê.")
        
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    backend_url = "https://miniapp-wvsxfa.fly.dev"
    
    tester = AIRecruiterTester(backend_url)
    results = tester.run_all_tests()
    
    return results

if __name__ == "__main__":
    main()